[0m[35mxtask/src/main.rs[0m:[0m[32m44[0m:[0m41[0m:                let _d = sh.push_dir("./[0m[1m[31mcrate[0ms/rust-analyzer");
[0m[35mxtask/src/main.rs[0m:[0m[32m67[0m:[0m29[0m:    let _d = sh.push_dir("./[0m[1m[31mcrate[0ms/syntax");
[0m[35mCargo.lock[0m:[0m[32m8[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m17[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m23[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m32[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m38[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m44[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m50[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m56[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m67[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m73[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m90[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m105[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m111[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m117[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m123[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m132[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m141[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m155[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m175[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m181[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m193[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m204[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m217[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m233[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m243[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m254[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m260[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m269[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m279[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m290[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m303[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m312[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m325[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m336[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m342[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m348[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m354[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m360[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m369[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m375[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m385[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m397[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m403[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m429[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m438[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m447[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m453[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m459[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m465[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m471[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m480[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m489[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m537[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m565[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m597[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m621[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m632[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m642[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m794[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m804[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m814[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m824[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m835[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m844[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m863[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m872[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m878[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m884[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m894[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m908[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m914[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m920[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m926[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m936[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m950[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m985[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m995[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1012[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1024[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1052[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1058[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1067[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1076[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1085[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1094[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1103[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1112[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1124[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1133[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1145[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1151[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1170[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1180[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1190[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1199[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1208[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1214[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1220[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1226[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1237[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1247[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1261[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1286[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1296[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1302[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1312[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1321[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1331[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1391[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1403[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m1421[0m:[0m57[0m: "la-arena 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m1437[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1448[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1457[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1468[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1477[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1486[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1496[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1506[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1516[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1526[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1538[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1547[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1556[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1585[0m:[0m59[0m: "lsp-server 0.7.4 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mCargo.lock[0m:[0m[32m1626[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1642[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1648[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1654[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1671[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1683[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1692[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1701[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1707[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1713[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1722[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1731[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1742[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1754[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1765[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1774[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1780[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1789[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1802[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1821[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1832[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1843[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1901[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1907[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1916[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1927[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1937[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1948[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1958[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1968[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1978[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1984[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m1993[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2006[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2018[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2029[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2039[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2050[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2062[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2075[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2089[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2095[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2101[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2110[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2116[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2122[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2131[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2137[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2143[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2149[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2161[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2167[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2198[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2208[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2214[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2224[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2230[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2239[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2245[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2260[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2269[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2284[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2290[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2296[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2302[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2308[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2314[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2320[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2326[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2332[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2338[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2344[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2350[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2356[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2362[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2368[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2374[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2383[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2389[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2398[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mCargo.lock[0m:[0m[32m2417[0m:[0m49[0m:source = "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index"
[0m[35mxtask/src/dist.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{date_iso, flags, project_root};
[0m[35mxtask/src/dist.rs[0m:[0m[32m20[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/src/dist.rs[0m:[0m[32m90[0m:[0m45[0m:    cmd!(sh, "cargo build --manifest-path ./[0m[1m[31mcrate[0ms/rust-analyzer/Cargo.toml --bin rust-analyzer --target {target_name} --release").run()?;
[0m[35mxtask/src/publish.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::flags;
[0m[35mxtask/src/publish.rs[0m:[0m[32m9[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/src/install.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::flags;
[0m[35mxtask/src/install.rs[0m:[0m[32m11[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/src/install.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ClientOpt {
[0m[35mxtask/src/install.rs[0m:[0m[32m27[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) code_bin: Option<String>,
[0m[35mxtask/src/install.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ServerOpt {
[0m[35mxtask/src/install.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) malloc: Malloc,
[0m[35mxtask/src/install.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Malloc {
[0m[35mxtask/src/install.rs[0m:[0m[32m139[0m:[0m46[0m:    let cmd = cmd!(sh, "cargo install --path [0m[1m[31mcrate[0ms/rust-analyzer --locked --force --features force-always-assert {features...}");
[0m[35mxtask/src/publish/notes.rs[0m:[0m[32m323[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_asciidoc_to_markdown<R>(input: R) -> anyhow::Result<String>
[0m[35mxtask/src/release/changelog.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn get_changelog(
[0m[35mxtask/src/metrics.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::flags::{self, MeasurementType};
[0m[35mxtask/src/metrics.rs[0m:[0m[32m17[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/Cargo.toml[0m:[0m[32m17[0m:[0m42[0m:# Avoid adding more dependencies to this [0m[1m[31mcrate[0m
[0m[35mxtask/src/release.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{date_iso, flags, is_release_tag, project_root};
[0m[35mxtask/src/release.rs[0m:[0m[32m8[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/src/release.rs[0m:[0m[32m75[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(self, sh: &Shell) -> anyhow::Result<()> {
[0m[35mxtask/src/flags.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::install::{ClientOpt, Malloc, ServerOpt};
[0m[35mxtask/src/flags.rs[0m:[0m[32m176[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn server(&self) -> Option<ServerOpt> {
[0m[35mxtask/src/flags.rs[0m:[0m[32m189[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn client(&self) -> Option<ClientOpt> {
[0m[35mlib/README.md[0m:[0m[32m3[0m:[0m1[0m:[0m[1m[31mCrate[0ms in this directory are published to [[0m[1m[31mcrate[0ms.io](https://[0m[1m[31mcrate[0ms.io) and obey semver.
[0m[35mlib/README.md[0m:[0m[32m7[0m:[0m14[0m:We use these [0m[1m[31mcrate[0ms from [0m[1m[31mcrate[0ms.io, not the local copies because we want to ensure that
[0m[35mlib/README.md[0m:[0m[32m9[0m:[0m1[0m:[0m[1m[31mcrate[0ms, you need to release a new version to [0m[1m[31mcrate[0ms.io before you can use that API in rust-analyzer.
[0m[35mlib/README.md[0m:[0m[32m11[0m:[0m172[0m:To release new versions of these packages, change their version in Cargo.toml. Once your PR is merged into master a workflow will automatically publish the new version to [0m[1m[31mcrate[0ms.io.
[0m[35mlib/README.md[0m:[0m[32m14[0m:[0m10[0m:`[patch.'[0m[1m[31mcrate[0ms-io']` section in Cargo.toml
[0m[35mlib/la-arena/src/map.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::Idx;
[0m[35mdocs/user/generated_config.adoc[0m:[0m[32m134[0m:[0m54[0m:Unsets the implicit `#[cfg(test)]` for the specified [0m[1m[31mcrate[0ms.
[0m[35mdocs/user/generated_config.adoc[0m:[0m[32m481[0m:[0m96[0m:[[rust-analyzer.imports.granularity.group]]rust-analyzer.imports.granularity.group (default: `"[0m[1m[31mcrate[0m"`)::
[0m[35mdocs/user/generated_config.adoc[0m:[0m[32m499[0m:[0m61[0m:Prefer to unconditionally use imports of the core and alloc [0m[1m[31mcrate[0m, over the std [0m[1m[31mcrate[0m.
[0m[35mdocs/user/generated_config.adoc[0m:[0m[32m737[0m:[0m28[0m:This config takes a map of [0m[1m[31mcrate[0m names with the exported proc-macro names to ignore as values.
[0m[35mdocs/user/generated_config.adoc[0m:[0m[32m768[0m:[0m1[0m:[0m[1m[31mcrate[0ms must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.
[0m[35mlib/line-index/src/tests.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{LineIndex, TextSize, WideChar};
[0m[35mdocs/dev/architecture.md[0m:[0m[32m26[0m:[0m159[0m:More specifically, input data consists of a set of test files (`(PathBuf, String)` pairs) and information about project structure, captured in the so called `[0m[1m[31mCrate[0mGraph`.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m27[0m:[0m5[0m:The [0m[1m[31mcrate[0m graph specifies which files are [0m[1m[31mcrate[0m roots, which cfg flags are specified for each [0m[1m[31mcrate[0m and what dependencies exist between the [0m[1m[31mcrate[0ms.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m42[0m:[0m2[0m:`[0m[1m[31mcrate[0ms/rust-analyzer/src/bin/main.rs` contains the main function which spawns LSP.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m45[0m:[0m2[0m:`[0m[1m[31mcrate[0ms/rust-analyzer/src/handlers.rs` implements all LSP requests and is a great place to start if you are already familiar with LSP.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m55[0m:[0m17[0m:Note also which [0m[1m[31mcrate[0ms are **API Boundaries**.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m70[0m:[0m57[0m:rust-analyzer independent libraries which we publish to [0m[1m[31mcrate[0ms.io.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m73[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/parser`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m91[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/syntax`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m114[0m:[0m115[0m:Note [`api_walkthrough`](https://github.com/rust-lang/rust-analyzer/blob/2fb6af89eb794f775de60b82afe56b6f986c2a40/[0m[1m[31mcrate[0ms/ra_syntax/src/lib.rs#L190-L348)
[0m[35mdocs/dev/architecture.md[0m:[0m[32m119[0m:[0m38[0m:**Architecture Invariant:** `syntax` [0m[1m[31mcrate[0m is completely independent from the rest of rust-analyzer. It knows nothing about salsa or LSP.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m123[0m:[0m27[0m:You can view the `syntax` [0m[1m[31mcrate[0m as an entry point to rust-analyzer.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m124[0m:[0m10[0m:`syntax` [0m[1m[31mcrate[0m is an **API Boundary**.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m137[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/base_db`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m139[0m:[0m55[0m:We use the [salsa](https://github.com/salsa-rs/salsa) [0m[1m[31mcrate[0m for incremental and on-demand computation.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m141[0m:[0m15[0m:The `base_db` [0m[1m[31mcrate[0m provides basic infrastructure for interacting with salsa.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m149[0m:[0m6[0m:The `[0m[1m[31mCrate[0mGraph` structure is used to represent the dependencies between the [0m[1m[31mcrate[0ms abstractly.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m154[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/hir_expand`, `[0m[1m[31mcrate[0ms/hir_def`, `[0m[1m[31mcrate[0ms/hir_ty`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m156[0m:[0m7[0m:These [0m[1m[31mcrate[0ms are the *brain* of rust-analyzer.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m159[0m:[0m11[0m:`hir_xxx` [0m[1m[31mcrate[0ms have a strong [ECS](https://en.wikipedia.org/wiki/Entity_component_system) flavor, in that they work with raw ids and directly query the database.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m161[0m:[0m7[0m:These [0m[1m[31mcrate[0ms integrate deeply with salsa and chalk.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m164[0m:[0m7[0m:These [0m[1m[31mcrate[0ms also define various intermediate representations of the core.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m168[0m:[0m40[0m:`DefMap` contains the module tree of a [0m[1m[31mcrate[0m and stores module scopes.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m172[0m:[0m35[0m:**Architecture Invariant:** these [0m[1m[31mcrate[0ms are not, and will never be, an api boundary.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m174[0m:[0m35[0m:**Architecture Invariant:** these [0m[1m[31mcrate[0ms explicitly care about being incremental.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m178[0m:[0m70[0m:**Architecture Invariant:** hir exists only in context of particular [0m[1m[31mcrate[0m instance with specific CFG flags.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m179[0m:[0m61[0m:The same syntax may produce several instances of HIR if the [0m[1m[31mcrate[0m participates in the [0m[1m[31mcrate[0m graph more than once.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m181[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/hir`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m183[0m:[0m21[0m:The top-level `hir` [0m[1m[31mcrate[0m is an **API Boundary**.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m184[0m:[0m62[0m:If you think about "using rust-analyzer as a library", `hir` [0m[1m[31mcrate[0m is most likely the façade you'll be talking to.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m189[0m:[0m24[0m:While internal `hir_*` [0m[1m[31mcrate[0ms _compute_ things, `hir`, from the outside, looks like an inert data structure.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m203[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/ide`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m205[0m:[0m11[0m:The `ide` [0m[1m[31mcrate[0m builds on top of `hir` semantic model to provide high-level IDE features like completion or goto definition.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m209[0m:[0m35[0m:**Architecture Invariant:** `ide` [0m[1m[31mcrate[0m's API is build out of POD types with public fields.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m216[0m:[0m25[0m:`ide` is also the first [0m[1m[31mcrate[0m which has the notion of change over time.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m220[0m:[0m43[0m:Internally, `ide` is split across several [0m[1m[31mcrate[0ms. `ide_assists`, `ide_completion` and `ide_ssr` implement large isolated features.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m224[0m:[0m35[0m:**Architecture Invariant:** `ide` [0m[1m[31mcrate[0m strives to provide a _perfect_ API.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m228[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/rust-analyzer`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m230[0m:[0m6[0m:This [0m[1m[31mcrate[0m defines the `rust-analyzer` binary, so it is the **entry point**.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m233[0m:[0m57[0m:**Architecture Invariant:** `rust-analyzer` is the only [0m[1m[31mcrate[0m that knows about LSP and JSON serialization.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m235[0m:[0m63[0m:Instead, create a serializable counterpart in `rust-analyzer` [0m[1m[31mcrate[0m and manually convert between the two.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m254[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/toolchain`, `[0m[1m[31mcrate[0ms/project_model`, `[0m[1m[31mcrate[0ms/flycheck`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m256[0m:[0m7[0m:These [0m[1m[31mcrate[0ms deal with invoking `cargo` to learn about project structure and get compiler errors for the "check on save" feature.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m258[0m:[0m11[0m:They use `[0m[1m[31mcrate[0ms/path` heavily instead of `std::path`.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m261[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/mbe`, `[0m[1m[31mcrate[0ms/tt`, `[0m[1m[31mcrate[0ms/proc_macro_api`, `[0m[1m[31mcrate[0ms/proc_macro_srv`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m263[0m:[0m7[0m:These [0m[1m[31mcrate[0ms implement macros as token tree -> token tree transforms.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m266[0m:[0m6[0m:`tt` [0m[1m[31mcrate[0m defined `TokenTree`, a single token or a delimited sequence of token trees.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m267[0m:[0m7[0m:`mbe` [0m[1m[31mcrate[0m contains tools for transforming between syntax trees and token tree.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m282[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/cfg`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m284[0m:[0m6[0m:This [0m[1m[31mcrate[0m is responsible for parsing, evaluation and general definition of `cfg` attributes.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m286[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/vfs`, `[0m[1m[31mcrate[0ms/vfs-notify`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m288[0m:[0m7[0m:These [0m[1m[31mcrate[0ms implement a virtual file system.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m295[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/stdx`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m297[0m:[0m6[0m:This [0m[1m[31mcrate[0m contains various non-rust-analyzer specific utils, which could have been in std, as well
[0m[35mdocs/dev/architecture.md[0m:[0m[32m300[0m:[0m6[0m:### `[0m[1m[31mcrate[0ms/profile`
[0m[35mdocs/dev/architecture.md[0m:[0m[32m302[0m:[0m6[0m:This [0m[1m[31mcrate[0m contains utilities for CPU and memory profiling.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m318[0m:[0m39[0m:* The `rowan` library is published to [0m[1m[31mcrate[0ms.io, but it is deliberately kept under `1.0` and always makes semver-incompatible upgrades
[0m[35mdocs/dev/architecture.md[0m:[0m[32m322[0m:[0m61[0m:At some point we might consider opening up APIs or allowing [0m[1m[31mcrate[0ms.io libraries to include rust-analyzer specific annotations, but that's going to be a big commitment on our side.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m343[0m:[0m115[0m:* API for working with syntax trees (`syntax::ast`, the [`ungrammar`](https://github.com/rust-analyzer/ungrammar) [0m[1m[31mcrate[0m).
[0m[35mdocs/dev/architecture.md[0m:[0m[32m352[0m:[0m21[0m:See the `sourcegen` [0m[1m[31mcrate[0m for details.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m376[0m:[0m47[0m:The outermost boundary is the `rust-analyzer` [0m[1m[31mcrate[0m, which defines an LSP interface in terms of stdio.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m389[0m:[0m38[0m:For comparisons, we use the `expect` [0m[1m[31mcrate[0m for snapshot testing.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m392[0m:[0m44[0m:See the `marks` module in the `test_utils` [0m[1m[31mcrate[0m for more.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m463[0m:[0m20[0m:             0ms - [0m[1m[31mcrate[0m_def_map:wait (804 calls)
[0m[35mdocs/dev/architecture.md[0m:[0m[32m498[0m:[0m75[0m:For example, `rust-project.json` is its own format -- it doesn't include `[0m[1m[31mCrate[0mGraph` as is.
[0m[35mdocs/dev/architecture.md[0m:[0m[32m499[0m:[0m24[0m:Instead, it creates a `[0m[1m[31mCrate[0mGraph` by calling appropriate constructing functions.
[0m[35mlib/line-index/src/lib.rs[0m:[0m[32m202[0m:[0m41[0m:/// This is adapted from the rustc_span [0m[1m[31mcrate[0m, https://github.com/rust-lang/rust/blob/de59844c98f7925242a798a72c59dc3610dd0e2c/compiler/rustc_span/src/analyze_source_file.rs
[0m[35mdocs/user/manual.adoc[0m:[0m[32m552[0m:[0m5[0m:=== [0m[1m[31mCrate[0ms
[0m[35mdocs/user/manual.adoc[0m:[0m[32m554[0m:[0m69[0m:There is a package named `ra_ap_rust_analyzer` available on https://[0m[1m[31mcrate[0ms.io/[0m[1m[31mcrate[0ms/ra_ap_rust-analyzer[[0m[1m[31mcrate[0ms.io], for someone who wants to use it programmatically.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m591[0m:[0m62[0m:It is especially useful when the `repo` doesn't use external [0m[1m[31mcrate[0ms or the standard library.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m598[0m:[0m68[0m:**Source:** https://github.com/rust-lang/rust-analyzer/blob/master/[0m[1m[31mcrate[0ms/rust-analyzer/src/config.rs[config.rs]
[0m[35mdocs/user/manual.adoc[0m:[0m[32m645[0m:[0m9[0m:    /// [0m[1m[31mcrate[0ms that are built-in to rust, such as
[0m[35mdocs/user/manual.adoc[0m:[0m[32m659[0m:[0m17[0m:    /// sysroot [0m[1m[31mcrate[0ms.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m670[0m:[0m33[0m:    /// dependencies on sysroot [0m[1m[31mcrate[0ms. Conversely,
[0m[35mdocs/user/manual.adoc[0m:[0m[32m674[0m:[0m9[0m:    /// [0m[1m[31mcrate[0ms.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m676[0m:[0m20[0m:    /// The set of [0m[1m[31mcrate[0ms comprising the current
[0m[35mdocs/user/manual.adoc[0m:[0m[32m678[0m:[0m41[0m:    /// dependencies as well as sysroot [0m[1m[31mcrate[0m (libstd,
[0m[35mdocs/user/manual.adoc[0m:[0m[32m680[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: [0m[1m[31mCrate[0m[];
[0m[35mdocs/user/manual.adoc[0m:[0m[32m683[0m:[0m11[0m:interface [0m[1m[31mCrate[0m {
[0m[35mdocs/user/manual.adoc[0m:[0m[32m684[0m:[0m18[0m:    /// Optional [0m[1m[31mcrate[0m name used for display purposes,
[0m[35mdocs/user/manual.adoc[0m:[0m[32m686[0m:[0m42[0m:    /// key for semantically-significant [0m[1m[31mcrate[0m names.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m688[0m:[0m40[0m:    /// Path to the root module of the [0m[1m[31mcrate[0m.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m690[0m:[0m24[0m:    /// Edition of the [0m[1m[31mcrate[0m.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m694[0m:[0m21[0m:    /// Should this [0m[1m[31mcrate[0m be treated as a member of
[0m[35mdocs/user/manual.adoc[0m:[0m[32m698[0m:[0m26[0m:    /// (members are the [0m[1m[31mcrate[0ms which reside inside
[0m[35mdocs/user/manual.adoc[0m:[0m[32m702[0m:[0m31[0m:    /// library and 3rd party [0m[1m[31mcrate[0ms to enable
[0m[35mdocs/user/manual.adoc[0m:[0m[32m704[0m:[0m33[0m:    /// assumes that non-member [0m[1m[31mcrate[0ms don't change).
[0m[35mdocs/user/manual.adoc[0m:[0m[32m707[0m:[0m31[0m:    /// files comprising this [0m[1m[31mcrate[0m.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m711[0m:[0m14[0m:    /// to a [0m[1m[31mcrate[0m. `include_dirs` are included
[0m[35mdocs/user/manual.adoc[0m:[0m[32m715[0m:[0m19[0m:    /// Different [0m[1m[31mcrate[0ms can share the same `source`.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m717[0m:[0m16[0m:    /// If two [0m[1m[31mcrate[0ms share an `.rs` file in common,
[0m[35mdocs/user/manual.adoc[0m:[0m[32m725[0m:[0m47[0m:    /// The set of cfgs activated for a given [0m[1m[31mcrate[0m, like
[0m[35mdocs/user/manual.adoc[0m:[0m[32m728[0m:[0m32[0m:    /// Target triple for this [0m[1m[31mCrate[0m.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m737[0m:[0m21[0m:    /// Whether the [0m[1m[31mcrate[0m is a proc-macro [0m[1m[31mcrate[0m.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m739[0m:[0m24[0m:    /// For proc-macro [0m[1m[31mcrate[0ms, path to compiled
[0m[35mdocs/user/manual.adoc[0m:[0m[32m745[0m:[0m20[0m:    /// Index of a [0m[1m[31mcrate[0m in the `[0m[1m[31mcrate[0ms` array.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m746[0m:[0m5[0m:    [0m[1m[31mcrate[0m: number,
[0m[35mdocs/user/manual.adoc[0m:[0m[32m748[0m:[0m17[0m:    /// `extern [0m[1m[31mcrate[0m name` declaration.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m760[0m:[0m65[0m:* Specify `"rust-analyzer.linkedProjects": [ { "roots": [...], "[0m[1m[31mcrate[0ms": [...] }]` inline.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m794[0m:[0m114[0m:The LSP server performs no network access in itself, but runs `cargo metadata` which will update or download the [0m[1m[31mcrate[0m registry and the source code of the project dependencies.
[0m[35mdocs/user/manual.adoc[0m:[0m[32m981[0m:[0m41[0m:For example, if you want to run https://[0m[1m[31mcrate[0ms.io/[0m[1m[31mcrate[0ms/cargo-watch[`cargo watch`] instead, you might add the following to `.vscode/tasks.json`:
[0m[35mdocs/dev/debugging.md[0m:[0m[32m56[0m:[0m16[0m:- Navigate to `[0m[1m[31mcrate[0ms/rust-analyzer/src/main_loop.rs` and add a breakpoint to the `on_request` function.
[0m[35mdocs/dev/debugging.md[0m:[0m[32m60[0m:[0m254[0m:If you need to debug the server from the very beginning, including its initialization code, you can use the `--wait-dbg` command line argument or `RA_WAIT_DBG` environment variable. The server will spin at the beginning of the `try_main` function (see `[0m[1m[31mcrate[0ms\rust-analyzer\src\bin\main.rs`)
[0m[35mlib/lsp-server/src/msg.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::error::ExtractError;
[0m[35mlib/lsp-server/src/msg.rs[0m:[0m[32m210[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_shutdown(&self) -> bool {
[0m[35mlib/lsp-server/src/msg.rs[0m:[0m[32m213[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_initialize(&self) -> bool {
[0m[35mlib/lsp-server/src/msg.rs[0m:[0m[32m234[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_exit(&self) -> bool {
[0m[35mlib/lsp-server/src/msg.rs[0m:[0m[32m237[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_initialized(&self) -> bool {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{AngleBracketedArgs, ParenthesizedArgs, AttrStyle, BareFnTy};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{GenericBound, TraitBoundModifier};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::Unsafety;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Mod, AnonConst, Arg, Arm, Guard, Attribute, BindingMode, TraitItemKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::Block;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{BlockCheckMode, CaptureBy, Movability};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Constness, [0m[1m[31mCrate[0m};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::Defaultness;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::EnumDef;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Expr, ExprKind, RangeLimits};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Field, FnDecl, FnHeader};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{ForeignItem, ForeignItemKind, FunctionRetTy};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{GenericParam, GenericParamKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::GenericArg;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Ident, ImplItem, IsAsync, IsAuto, Item, ItemKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Label, Lifetime, Lit, LitKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::Local;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::MacStmtStyle;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Mac, Mac_, MacDelimiter};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{MutTy, Mutability};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Pat, PatKind, PathSegment};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{PolyTraitRef, QSelf};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m23[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Stmt, StmtKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m24[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{VariantData, StructField};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::StrStyle;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::SelfKind;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m27[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{TraitItem, TraitRef, TraitObjectSyntax};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m28[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Ty, TyKind, TypeBinding, GenericBounds};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m29[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{Visibility, VisibilityKind, WhereClause, [0m[1m[31mCrate[0mSugar};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m30[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{UseTree, UseTreeKind};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m31[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{BinOpKind, UnOp};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m32[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ast::{RangeEnd, RangeSyntax};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m33[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ast, attr};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m34[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ext::base::DummyResult;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m35[0m:[0m5[0m:use [0m[1m[31mcrate[0m::source_map::{self, SourceMap, Spanned, respan};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m36[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::{self, SeqSep, classify, token};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m37[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::lexer::{TokenAndSpan, UnmatchedBrace};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m38[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m39[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::token::DelimToken;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m40[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::{new_sub_parser_from_file, ParseSess, Directory, DirectoryOwnership};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m41[0m:[0m5[0m:use [0m[1m[31mcrate[0m::util::parser::{AssocOp, Fixity};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m42[0m:[0m5[0m:use [0m[1m[31mcrate[0m::print::pprust;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m43[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ptr::P;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m44[0m:[0m5[0m:use [0m[1m[31mcrate[0m::parse::PResult;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m45[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ThinVec;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m46[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m47[0m:[0m5[0m:use [0m[1m[31mcrate[0m::symbol::{Symbol, keywords};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m236[0m:[0m5[0m:    [0m[1m[31mcrate[0m directory: Directory<'a>,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m243[0m:[0m5[0m:    [0m[1m[31mcrate[0m expected_tokens: Vec<TokenType>,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m253[0m:[0m5[0m:    [0m[1m[31mcrate[0m unmatched_angle_bracket_count: u32,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m254[0m:[0m5[0m:    [0m[1m[31mcrate[0m max_angle_bracket_count: u32,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m258[0m:[0m5[0m:    [0m[1m[31mcrate[0m unclosed_delims: Vec<UnmatchedBrace>,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m397[0m:[0m1[0m:[0m[1m[31mcrate[0m enum TokenType {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m645[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn unexpected<T>(&mut self) -> PResult<'a, T> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m947[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn check(&mut self, tok: &token::Token) -> bool {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m1419[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn span_bug<S: Into<MultiSpan>>(&self, sp: S, m: &str) -> ! {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m1427[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn diagnostic(&self) -> &'a errors::Handler {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m1831[0m:[0m25[0m:                    use [0m[1m[31mcrate[0m::print::pprust::PrintState;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2070[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_arg(&mut self) -> PResult<'a, Arg> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2168[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_lit(&mut self) -> PResult<'a, Lit> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2182[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2280[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_path_common(&mut self, style: PathStyle, enable_warning: bool)
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2423[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn check_lifetime(&mut self) -> bool {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m2429[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn expect_lifetime(&mut self) -> Lifetime {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m3200[0m:[0m33[0m:                            use [0m[1m[31mcrate[0m::print::pprust::PrintState;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m3259[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn process_potential_macro_variable(&mut self) {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m3291[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_token_tree(&mut self) -> TokenTree {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m4051[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_arm(&mut self) -> PResult<'a, Arm> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5024[0m:[0m11[0m:    fn is_[0m[1m[31mcrate[0m_vis(&self) -> bool {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5025[0m:[0m41[0m:        self.token.is_keyword(keywords::[0m[1m[31mCrate[0m) && self.look_ahead(1, |t| t != &token::ModSep)
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5126[0m:[0m46[0m:        // such as a union items, item with `[0m[1m[31mcrate[0m` visibility or auto trait items.
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5130[0m:[0m13[0m:        // `[0m[1m[31mcrate[0m::b::c` - path, `[0m[1m[31mcrate[0m struct S;` - not a path.
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5134[0m:[0m28[0m:                  !self.is_[0m[1m[31mcrate[0m_vis() &&
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5358[0m:[0m29[0m:                        use [0m[1m[31mcrate[0m::print::pprust::{PrintState, INDENT_UNIT};
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5430[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m5695[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m6991[0m:[0m28[0m:    /// Parses `pub`, `pub([0m[1m[31mcrate[0m)` and `pub(in path)` plus shortcuts `[0m[1m[31mcrate[0m` for `pub([0m[1m[31mcrate[0m)`,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m6999[0m:[0m64[0m:        self.expected_tokens.push(TokenType::Keyword(keywords::[0m[1m[31mCrate[0m));
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7000[0m:[0m20[0m:        if self.is_[0m[1m[31mcrate[0m_vis() {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7001[0m:[0m30[0m:            self.bump(); // `[0m[1m[31mcrate[0m`
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7002[0m:[0m62[0m:            return Ok(respan(self.prev_span, VisibilityKind::[0m[1m[31mCrate[0m([0m[1m[31mCrate[0mSugar::Just[0m[1m[31mCrate[0m)));
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7018[0m:[0m62[0m:            if self.look_ahead(1, |t| t.is_keyword(keywords::[0m[1m[31mCrate[0m)) {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7019[0m:[0m25[0m:                // `pub([0m[1m[31mcrate[0m)`
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7021[0m:[0m34[0m:                self.bump(); // `[0m[1m[31mcrate[0m`
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7025[0m:[0m37[0m:                    VisibilityKind::[0m[1m[31mCrate[0m([0m[1m[31mCrate[0mSugar::Pub[0m[1m[31mCrate[0m),
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7057[0m:[0m6[0m:`pub([0m[1m[31mcrate[0m)`: visible only on the current [0m[1m[31mcrate[0m
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7172[0m:[0m42[0m:            let mut strip_unconfigured = [0m[1m[31mcrate[0m::config::StripUnconfigured {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7495[0m:[0m14[0m:    fn parse_[0m[1m[31mcrate[0m_name_with_dashes(&mut self) -> PResult<'a, ast::Ident> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7496[0m:[0m26[0m:        let error_msg = "[0m[1m[31mcrate[0m name using dashes are not valid in `extern [0m[1m[31mcrate[0m` statements";
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7497[0m:[0m47[0m:        let suggestion_msg = "if the original [0m[1m[31mcrate[0m name uses dashes you need to use underscores \
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7506[0m:[0m23[0m:        let mut fixed_[0m[1m[31mcrate[0m_name = false;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7507[0m:[0m27[0m:        // Accept `extern [0m[1m[31mcrate[0m name-like-this` for better diagnostics
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7511[0m:[0m23[0m:                fixed_[0m[1m[31mcrate[0m_name = true;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7516[0m:[0m18[0m:        if fixed_[0m[1m[31mcrate[0m_name {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7536[0m:[0m24[0m:    /// Parses `extern [0m[1m[31mcrate[0m` links.
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7541[0m:[0m16[0m:    /// extern [0m[1m[31mcrate[0m foo;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7542[0m:[0m16[0m:    /// extern [0m[1m[31mcrate[0m bar as foo;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7544[0m:[0m26[0m:    fn parse_item_extern_[0m[1m[31mcrate[0m(&mut self,
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7549[0m:[0m27[0m:        // Accept `extern [0m[1m[31mcrate[0m name-like-this` for better diagnostics
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7550[0m:[0m36[0m:        let orig_name = self.parse_[0m[1m[31mcrate[0m_name_with_dashes()?;
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7559[0m:[0m58[0m:        Ok(self.mk_item(span, item_name, ItemKind::Extern[0m[1m[31mCrate[0m(orig_name), visibility, attrs))
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7825[0m:[0m43[0m:            if self.eat_keyword(keywords::[0m[1m[31mCrate[0m) {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m7826[0m:[0m55[0m:                return Ok(Some(self.parse_item_extern_[0m[1m[31mcrate[0m(lo, visibility, attrs)?));
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m8221[0m:[0m5[0m:    [0m[1m[31mcrate[0m fn parse_foreign_item(&mut self) -> PResult<'a, ForeignItem> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m8507[0m:[0m37[0m:    /// Parses a source module as a [0m[1m[31mcrate[0m. This is the main entry point for the parser.
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m8508[0m:[0m18[0m:    pub fn parse_[0m[1m[31mcrate[0m_mod(&mut self) -> PResult<'a, [0m[1m[31mCrate[0m> {
[0m[35mbench_data/glorious_old_parser[0m:[0m[32m8510[0m:[0m29[0m:        let krate = Ok(ast::[0m[1m[31mCrate[0m {
[0m[35mdocs/dev/README.md[0m:[0m[32m84[0m:[0m110[0m:If the problem concerns only internal parts of rust-analyzer (i.e. I don't need to touch the `rust-analyzer` [0m[1m[31mcrate[0m or TypeScript code), there is a unit-test for it.
[0m[35mdocs/dev/README.md[0m:[0m[32m98[0m:[0m51[0m:If I need to fix something in the `rust-analyzer` [0m[1m[31mcrate[0m, I feel sad because it's on the boundary between the two processes, and working there is slow.
[0m[35mdocs/dev/README.md[0m:[0m[32m108[0m:[0m95[0m:Additionally, I use `cargo run --release -p rust-analyzer -- analysis-stats path/to/some/rust/[0m[1m[31mcrate[0m` to run a batch analysis.
[0m[35mdocs/dev/README.md[0m:[0m[32m132[0m:[0m72[0m:Inside rust-analyzer, we use the [`tracing`](https://docs.rs/tracing/) [0m[1m[31mcrate[0m for logging,
[0m[35mdocs/dev/README.md[0m:[0m[32m257[0m:[0m90[0m:  Reviewers have `r+` access to all of organization's repositories and publish rights on [0m[1m[31mcrate[0ms.io.
[0m[35mlib/lsp-server/src/socket.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mlib/lsp-server/src/socket.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn socket_transport(
[0m[35meditors/code/package.json[0m:[0m[32m137[0m:[0m50[0m:                "command": "rust-analyzer.shuffle[0m[1m[31mCrate[0mGraph",
[0m[35meditors/code/package.json[0m:[0m[32m138[0m:[0m35[0m:                "title": "Shuffle [0m[1m[31mCrate[0m Graph",
[0m[35meditors/code/package.json[0m:[0m[32m147[0m:[0m47[0m:                "command": "rust-analyzer.view[0m[1m[31mCrate[0mGraph",
[0m[35meditors/code/package.json[0m:[0m[32m148[0m:[0m32[0m:                "title": "View [0m[1m[31mCrate[0m Graph",
[0m[35meditors/code/package.json[0m:[0m[32m152[0m:[0m51[0m:                "command": "rust-analyzer.viewFull[0m[1m[31mCrate[0mGraph",
[0m[35meditors/code/package.json[0m:[0m[32m153[0m:[0m32[0m:                "title": "View [0m[1m[31mCrate[0m Graph (Full)",
[0m[35meditors/code/package.json[0m:[0m[32m213[0m:[0m46[0m:                "title": "Add current file's [0m[1m[31mcrate[0m to workspace",
[0m[35meditors/code/package.json[0m:[0m[32m644[0m:[0m98[0m:                    "markdownDescription": "Unsets the implicit `#[cfg(test)]` for the specified [0m[1m[31mcrate[0ms.",
[0m[35meditors/code/package.json[0m:[0m[32m1088[0m:[0m33[0m:                    "default": "[0m[1m[31mcrate[0m",
[0m[35meditors/code/package.json[0m:[0m[32m1092[0m:[0m26[0m:                        "[0m[1m[31mcrate[0m",
[0m[35meditors/code/package.json[0m:[0m[32m1098[0m:[0m54[0m:                        "Merge imports from the same [0m[1m[31mcrate[0m into a single use statement. Conversely, imports from different [0m[1m[31mcrate[0ms are split into separate statements.",
[0m[35meditors/code/package.json[0m:[0m[32m1114[0m:[0m105[0m:                    "markdownDescription": "Prefer to unconditionally use imports of the core and alloc [0m[1m[31mcrate[0m, over the std [0m[1m[31mcrate[0m.",
[0m[35meditors/code/package.json[0m:[0m[32m1125[0m:[0m26[0m:                        "[0m[1m[31mcrate[0m"
[0m[35meditors/code/package.json[0m:[0m[32m1130[0m:[0m90[0m:                        "Force import paths to be absolute by always starting them with `[0m[1m[31mcrate[0m` or the extern [0m[1m[31mcrate[0m name they come from."
[0m[35meditors/code/package.json[0m:[0m[32m1445[0m:[0m137[0m:                    "markdownDescription": "These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of [0m[1m[31mcrate[0m names with the exported proc-macro names to ignore as values.",
[0m[35meditors/code/package.json[0m:[0m[32m1479[0m:[0m293[0m:                    "markdownDescription": "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\n[0m[1m[31mcrate[0ms must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.",
[0m[35meditors/code/package.json[0m:[0m[32m1930[0m:[0m24[0m:                "id": "[0m[1m[31mcrate[0mRoot",
[0m[35meditors/code/package.json[0m:[0m[32m1931[0m:[0m64[0m:                "description": "Style for names resolving to a [0m[1m[31mcrate[0m root"
[0m[35meditors/code/package.json[0m:[0m[32m1943[0m:[0m89[0m:                "description": "Style for items that are defined outside of the current [0m[1m[31mcrate[0m"
[0m[35meditors/code/package.json[0m:[0m[32m1951[0m:[0m75[0m:                "description": "Style for items that are from the current [0m[1m[31mcrate[0m and are `pub`"
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m602[0m:[0m9[0m:## View [0m[1m[31mCrate[0m Graph
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m604[0m:[0m32[0m:**Method:** `rust-analyzer/view[0m[1m[31mCrate[0mGraph`
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m609[0m:[0m15[0m:interface View[0m[1m[31mCrate[0mGraphParams {
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m616[0m:[0m25[0m:Renders rust-analyzer's [0m[1m[31mcrate[0m graph as an SVG image.
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m618[0m:[0m55[0m:If `full` is `true`, the graph includes non-workspace [0m[1m[31mcrate[0ms ([0m[1m[31mcrate[0ms.io dependencies as well as sysroot [0m[1m[31mcrate[0ms).
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m620[0m:[0m12[0m:## Shuffle [0m[1m[31mCrate[0m Graph
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m622[0m:[0m35[0m:**Method:** `rust-analyzer/shuffle[0m[1m[31mCrate[0mGraph`
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m626[0m:[0m14[0m:Shuffles the [0m[1m[31mcrate[0m IDs in the [0m[1m[31mcrate[0m graph, for debugging purposes.
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m881[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: {
[0m[35mdocs/dev/lsp-extensions.md[0m:[0m[32m888[0m:[0m13[0m:Returns all [0m[1m[31mcrate[0ms from this workspace, so it can be used create a viewTree to help navigate the dependency tree.
[0m[35meditors/code/src/dependencies_provider.ts[0m:[0m[32m92[0m:[0m15[0m:        const [0m[1m[31mcrate[0ms = dependenciesResult.[0m[1m[31mcrate[0ms;
[0m[35meditors/code/src/dependencies_provider.ts[0m:[0m[32m94[0m:[0m16[0m:        return [0m[1m[31mcrate[0ms
[0m[35meditors/code/src/dependencies_provider.ts[0m:[0m[32m95[0m:[0m19[0m:            .map(([0m[1m[31mcrate[0m) => {
[0m[35meditors/code/src/dependencies_provider.ts[0m:[0m[32m96[0m:[0m40[0m:                const dep = this.toDep([0m[1m[31mcrate[0m.name || "unknown", [0m[1m[31mcrate[0m.version || "", [0m[1m[31mcrate[0m.path);
[0m[35meditors/code/src/run.ts[0m:[0m[32m50[0m:[0m16[0m:        // see [0m[1m[31mcrate[0ms\rust-analyzer\src\main_loop\handlers.rs, handle_runnables
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m2[0m:[0m23[0m: * This file mirrors `[0m[1m[31mcrate[0ms/rust-analyzer/src/lsp_ext.rs` declarations.
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m48[0m:[0m21[0m:export const shuffle[0m[1m[31mCrate[0mGraph = new lc.RequestType0<null, void>("rust-analyzer/shuffle[0m[1m[31mCrate[0mGraph");
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m52[0m:[0m18[0m:export const view[0m[1m[31mCrate[0mGraph = new lc.RequestType<View[0m[1m[31mCrate[0mGraphParams, string, void>(
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m53[0m:[0m24[0m:    "rust-analyzer/view[0m[1m[31mCrate[0mGraph",
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m76[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: {
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m92[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: {
[0m[35meditors/code/src/lsp_ext.ts[0m:[0m[32m118[0m:[0m17[0m:export type View[0m[1m[31mCrate[0mGraphParams = { full: boolean };
[0m[35mlib/lsp-server/src/error.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Notification, Request};
[0m[35mlib/lsp-server/src/error.rs[0m:[0m[32m6[0m:[0m30[0m:pub struct ProtocolError(pub([0m[1m[31mcrate[0m) String);
[0m[35meditors/code/src/toolchain.ts[0m:[0m[32m34[0m:[0m16[0m:        // see [0m[1m[31mcrate[0ms\rust-analyzer\src\main_loop\handlers.rs, handle_code_lens
[0m[35meditors/code/src/toolchain.ts[0m:[0m[32m49[0m:[0m31[0m:            // for instance, `[0m[1m[31mcrate[0ms\rust-analyzer\tests\heavy_tests\main.rs` tests
[0m[35meditors/code/src/toolchain.ts[0m:[0m[32m65[0m:[0m57[0m:                        const isBinary = message.target.[0m[1m[31mcrate[0m_types.includes("bin");
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m3[0m:[0m17[0m:    /// sysroot [0m[1m[31mcrate[0ms.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m11[0m:[0m33[0m:    /// dependencies on sysroot [0m[1m[31mcrate[0ms. Conversely,
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m15[0m:[0m9[0m:    /// [0m[1m[31mcrate[0ms.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m17[0m:[0m20[0m:    /// The set of [0m[1m[31mcrate[0ms comprising the current
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m19[0m:[0m41[0m:    /// dependencies as well as sysroot [0m[1m[31mcrate[0m (libstd,
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m21[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: [0m[1m[31mCrate[0m[];
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m24[0m:[0m11[0m:interface [0m[1m[31mCrate[0m {
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m25[0m:[0m18[0m:    /// Optional [0m[1m[31mcrate[0m name used for display purposes,
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m27[0m:[0m42[0m:    /// key for semantically-significant [0m[1m[31mcrate[0m names.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m29[0m:[0m40[0m:    /// Path to the root module of the [0m[1m[31mcrate[0m.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m31[0m:[0m24[0m:    /// Edition of the [0m[1m[31mcrate[0m.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m35[0m:[0m21[0m:    /// Should this [0m[1m[31mcrate[0m be treated as a member of
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m39[0m:[0m26[0m:    /// (members are the [0m[1m[31mcrate[0ms which reside inside
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m43[0m:[0m31[0m:    /// library and 3rd party [0m[1m[31mcrate[0ms to enable
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m45[0m:[0m33[0m:    /// assumes that non-member [0m[1m[31mcrate[0ms don't change).
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m48[0m:[0m31[0m:    /// files comprising this [0m[1m[31mcrate[0m.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m52[0m:[0m14[0m:    /// to a [0m[1m[31mcrate[0m. `include_dirs` are included
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m56[0m:[0m19[0m:    /// Different [0m[1m[31mcrate[0ms can share the same `source`.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m58[0m:[0m16[0m:    /// If two [0m[1m[31mcrate[0ms share an `.rs` file in common,
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m66[0m:[0m47[0m:    /// The set of cfgs activated for a given [0m[1m[31mcrate[0m, like
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m69[0m:[0m32[0m:    /// Target triple for this [0m[1m[31mCrate[0m.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m78[0m:[0m21[0m:    /// Whether the [0m[1m[31mcrate[0m is a proc-macro [0m[1m[31mcrate[0m.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m80[0m:[0m24[0m:    /// For proc-macro [0m[1m[31mcrate[0ms, path to compiled
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m86[0m:[0m20[0m:    /// Index of a [0m[1m[31mcrate[0m in the `[0m[1m[31mcrate[0ms` array.
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m87[0m:[0m5[0m:    [0m[1m[31mcrate[0m: number;
[0m[35meditors/code/src/rust_project.ts[0m:[0m[32m89[0m:[0m17[0m:    /// `extern [0m[1m[31mcrate[0m name` declaration.
[0m[35mlib/lsp-server/src/req_queue.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ErrorCode, Request, RequestId, Response, ResponseError};
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m3[0m:[0m3005[0m:macro_rules! __ra_macro_fixture2 {($name :  ident :  type =$ty :  ty ,  n =$n :  expr )=>{# [ doc =  " Stack-allocated arbitrary-precision (up to certain limit) integer." ]# [ doc =  "" ]# [ doc =  " This is backed by a fixed-size array of given type (\\\"digit\\\")." ]# [ doc =  " While the array is not very large (normally some hundred bytes)," ]# [ doc =  " copying it recklessly may result in the performance hit." ]# [ doc =  " Thus this is intentionally not `Copy`." ]# [ doc =  "" ]# [ doc =  " All operations available to bignums panic in the case of overflows." ]# [ doc =  " The caller is responsible to use large enough bignum types." ] pub  struct $name {# [ doc =  " One plus the offset to the maximum \\\"digit\\\" in use." ]# [ doc =  " This does not decrease, so be aware of the computation order." ]# [ doc =  " `base[size..]` should be zero." ] size :  usize , # [ doc =  " Digits. `[a, b, c, ...]` represents `a + b*2^W + c*2^(2W) + ...`" ]# [ doc =  " where `W` is the number of bits in the digit type." ] base : [$ty ; $n ], } impl $name {# [ doc =  " Makes a bignum from one digit." ] pub  fn  from_small ( v : $ty )-> $name { let  mut  base = [ 0 ; $n ];  base [ 0 ]=  v ; $name { size :  1 ,  base :  base }}# [ doc =  " Makes a bignum from `u64` value." ] pub  fn  from_u64 ( mut  v :  u64 )-> $name { let  mut  base = [ 0 ; $n ];  let  mut  sz =  0 ;  while  v >  0 { base [ sz ]=  v  as $ty ;  v >>= <$ty >::  BITS ;  sz +=  1 ; }$name { size :  sz ,  base :  base }}# [ doc =  " Returns the internal digits as a slice `[a, b, c, ...]` such that the numeric" ]# [ doc =  " value is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in" ]# [ doc =  " the digit type." ] pub  fn  digits (&  self )-> & [$ty ]{&  self .  base [..  self .  size ]}# [ doc =  " Returns the `i`-th bit where bit 0 is the least significant one." ]# [ doc =  " In other words, the bit with weight `2^i`." ] pub  fn  get_bit (&  self ,  i :  usize )->  u8 { let  digitbits = <$ty >::  BITS  as  usize ;  let  d =  i /  digitbits ;  let  b =  i %  digitbits ; (( self .  base [ d ]>>  b )&  1 ) as  u8 }# [ doc =  " Returns `true` if the bignum is zero." ] pub  fn  is_zero (&  self )->  bool { self .  digits ().  iter ().  all (|&  v |  v ==  0 )}# [ doc =  " Returns the number of bits necessary to represent this value. Note that zero" ]# [ doc =  " is considered to need 0 bits." ] pub  fn  bit_length (&  self )->  usize { let  digits =  self .  digits ();  let  zeros =  digits .  iter ().  rev ().  take_while (|&&  x |  x ==  0 ).  count ();  let  end =  digits .  len ()-  zeros ;  let  nonzero = &  digits [..  end ];  if  nonzero .  is_empty (){ return  0 ; } let  digitbits = <$ty >::  BITS  as  usize ;  let  mut  i =  nonzero .  len ()*  digitbits -  1 ;  while  self .  get_bit ( i )==  0 { i -=  1 ; } i +  1 }# [ doc =  " Adds `other` to itself and returns its own mutable reference." ] pub  fn  add < 'a > (& 'a  mut  self ,  other : &$name )-> & 'a  mut $name { use  [0m[1m[31mcrate[0m ::  cmp ;  use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  let  mut  sz =  cmp ::  max ( self .  size ,  other .  size );  let  mut  carry =  false ;  for ( a ,  b ) in  self .  base [..  sz ].  iter_mut ().  zip (&  other .  base [..  sz ]){ let ( c ,  v )= (*  a ).  full_add (*  b ,  carry ); *  a =  v ;  carry =  c ; } if  carry { self .  base [ sz ]=  1 ;  sz +=  1 ; } self .  size =  sz ;  self } pub  fn  add_small (&  mut  self ,  other : $ty )-> &  mut $name { use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  let ( mut  carry ,  v )=  self .  base [ 0 ].  full_add ( other ,  false );  self .  base [ 0 ]=  v ;  let  mut  i =  1 ;  while  carry { let ( c ,  v )=  self .  base [ i ].  full_add ( 0 ,  carry );  self .  base [ i ]=  v ;  carry =  c ;  i +=  1 ; } if  i >  self .  size { self .  size =  i ; } self }# [ doc =  " Subtracts `other` from itself and returns its own mutable reference." ] pub  fn  sub < 'a > (& 'a  mut  self ,  other : &$name )-> & 'a  mut $name { use  [0m[1m[31mcrate[0m ::  cmp ;  use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  let  sz =  cmp ::  max ( self .  size ,  other .  size );  let  mut  noborrow =  true ;  for ( a ,  b ) in  self .  base [..  sz ].  iter_mut ().  zip (&  other .  base [..  sz ]){ let ( c ,  v )= (*  a ).  full_add (!*  b ,  noborrow ); *  a =  v ;  noborrow =  c ; } assert ! ( noborrow );  self .  size =  sz ;  self }# [ doc =  " Multiplies itself by a digit-sized `other` and returns its own" ]# [ doc =  " mutable reference." ] pub  fn  mul_small (&  mut  self ,  other : $ty )-> &  mut $name { use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  let  mut  sz =  self .  size ;  let  mut  carry =  0 ;  for  a  in &  mut  self .  base [..  sz ]{ let ( c ,  v )= (*  a ).  full_mul ( other ,  carry ); *  a =  v ;  carry =  c ; } if  carry >  0 { self .  base [ sz ]=  carry ;  sz +=  1 ; } self .  size =  sz ;  self }# [ doc =  " Multiplies itself by `2^bits` and returns its own mutable reference." ] pub  fn  mul_pow2 (&  mut  self ,  bits :  usize )-> &  mut $name { let  digitbits = <$ty >::  BITS  as  usize ;  let  digits =  bits /  digitbits ;  let  bits =  bits %  digitbits ;  assert ! ( digits < $n );  debug_assert ! ( self .  base [$n -  digits ..].  iter ().  all (|&  v |  v ==  0 ));  debug_assert ! ( bits ==  0 || ( self .  base [$n -  digits -  1 ]>> ( digitbits -  bits ))==  0 );  for  i  in ( 0 ..  self .  size ).  rev (){ self .  base [ i +  digits ]=  self .  base [ i ]; } for  i  in  0 ..  digits { self .  base [ i ]=  0 ; } let  mut  sz =  self .  size +  digits ;  if  bits >  0 { let  last =  sz ;  let  overflow =  self .  base [ last -  1 ]>> ( digitbits -  bits );  if  overflow >  0 { self .  base [ last ]=  overflow ;  sz +=  1 ; } for  i  in ( digits +  1 ..  last ).  rev (){ self .  base [ i ]= ( self .  base [ i ]<<  bits )| ( self .  base [ i -  1 ]>> ( digitbits -  bits )); } self .  base [ digits ]<<=  bits ; } self .  size =  sz ;  self }# [ doc =  " Multiplies itself by `5^e` and returns its own mutable reference." ] pub  fn  mul_pow5 (&  mut  self ,  mut  e :  usize )-> &  mut $name { use  [0m[1m[31mcrate[0m ::  mem ;  use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  SMALL_POW5 ;  let  table_index =  mem ::  size_of ::<$ty > ().  trailing_zeros () as  usize ;  let ( small_power ,  small_e )=  SMALL_POW5 [ table_index ];  let  small_power =  small_power  as $ty ;  while  e >=  small_e { self .  mul_small ( small_power );  e -=  small_e ; } let  mut  rest_power =  1 ;  for _  in  0 ..  e { rest_power *=  5 ; } self .  mul_small ( rest_power );  self }# [ doc =  " Multiplies itself by a number described by `other[0] + other[1] * 2^W +" ]# [ doc =  " other[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)" ]# [ doc =  " and returns its own mutable reference." ] pub  fn  mul_digits < 'a > (& 'a  mut  self ,  other : & [$ty ])-> & 'a  mut $name { fn  mul_inner ( ret : &  mut [$ty ; $n ],  aa : & [$ty ],  bb : & [$ty ])->  usize { use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  let  mut  retsz =  0 ;  for ( i , &  a ) in  aa .  iter ().  enumerate (){ if  a ==  0 { continue ; } let  mut  sz =  bb .  len ();  let  mut  carry =  0 ;  for ( j , &  b ) in  bb .  iter ().  enumerate (){ let ( c ,  v )=  a .  full_mul_add ( b ,  ret [ i +  j ],  carry );  ret [ i +  j ]=  v ;  carry =  c ; } if  carry >  0 { ret [ i +  sz ]=  carry ;  sz +=  1 ; } if  retsz <  i +  sz { retsz =  i +  sz ; }} retsz } let  mut  ret = [ 0 ; $n ];  let  retsz =  if  self .  size <  other .  len (){ mul_inner (&  mut  ret , &  self .  digits (),  other )} else { mul_inner (&  mut  ret ,  other , &  self .  digits ())};  self .  base =  ret ;  self .  size =  retsz ;  self }# [ doc =  " Divides itself by a digit-sized `other` and returns its own" ]# [ doc =  " mutable reference *and* the remainder." ] pub  fn  div_rem_small (&  mut  self ,  other : $ty )-> (&  mut $name , $ty ){ use  [0m[1m[31mcrate[0m ::  num ::  bignum ::  FullOps ;  assert ! ( other >  0 );  let  sz =  self .  size ;  let  mut  borrow =  0 ;  for  a  in  self .  base [..  sz ].  iter_mut ().  rev (){ let ( q ,  r )= (*  a ).  full_div_rem ( other ,  borrow ); *  a =  q ;  borrow =  r ; }( self ,  borrow )}# [ doc =  " Divide self by another bignum, overwriting `q` with the quotient and `r` with the" ]# [ doc =  " remainder." ] pub  fn  div_rem (&  self ,  d : &$name ,  q : &  mut $name ,  r : &  mut $name ){ assert ! (!  d .  is_zero ());  let  digitbits = <$ty >::  BITS  as  usize ;  for  digit  in &  mut  q .  base [..]{*  digit =  0 ; } for  digit  in &  mut  r .  base [..]{*  digit =  0 ; } r .  size =  d .  size ;  q .  size =  1 ;  let  mut  q_is_zero =  true ;  let  end =  self .  bit_length ();  for  i  in ( 0 ..  end ).  rev (){ r .  mul_pow2 ( 1 );  r .  base [ 0 ]|=  self .  get_bit ( i ) as $ty ;  if &*  r >=  d { r .  sub ( d );  let  digit_idx =  i /  digitbits ;  let  bit_idx =  i %  digitbits ;  if  q_is_zero { q .  size =  digit_idx +  1 ;  q_is_zero =  false ; } q .  base [ digit_idx ]|=  1 <<  bit_idx ; }} debug_assert ! ( q .  base [ q .  size ..].  iter ().  all (|&  d |  d ==  0 ));  debug_assert ! ( r .  base [ r .  size ..].  iter ().  all (|&  d |  d ==  0 )); }} impl  [0m[1m[31mcrate[0m ::  cmp ::  PartialEq  for $name { fn  eq (&  self ,  other : &$name )->  bool { self .  base [..]==  other .  base [..]}} impl  [0m[1m[31mcrate[0m ::  cmp ::  Eq  for $name {} impl  [0m[1m[31mcrate[0m ::  cmp ::  PartialOrd  for $name { fn  partial_cmp (&  self ,  other : &$name )->  [0m[1m[31mcrate[0m ::  option ::  Option <  [0m[1m[31mcrate[0m ::  cmp ::  Ordering > { [0m[1m[31mcrate[0m ::  option ::  Option ::  Some ( self .  cmp ( other ))}} impl  [0m[1m[31mcrate[0m ::  cmp ::  Ord  for $name { fn  cmp (&  self ,  other : &$name )->  [0m[1m[31mcrate[0m ::  cmp ::  Ordering { use  [0m[1m[31mcrate[0m ::  cmp ::  max ;  let  sz =  max ( self .  size ,  other .  size );  let  lhs =  self .  base [..  sz ].  iter ().  cloned ().  rev ();  let  rhs =  other .  base [..  sz ].  iter ().  cloned ().  rev ();  lhs .  cmp ( rhs )}} impl  [0m[1m[31mcrate[0m ::  clone ::  Clone  for $name { fn  clone (&  self )->  Self { Self { size :  self .  size ,  base :  self .  base }}} impl  [0m[1m[31mcrate[0m ::  fmt ::  Debug  for $name { fn  fmt (&  self ,  f : &  mut  [0m[1m[31mcrate[0m ::  fmt ::  Formatter < '_ >)->  [0m[1m[31mcrate[0m ::  fmt ::  Result { let  sz =  if  self .  size <  1 { 1 } else { self .  size };  let  digitlen = <$ty >::  BITS  as  usize /  4 ;  write ! ( f ,  "{:#x}" ,  self .  base [ sz -  1 ])?;  for &  v  in  self .  base [..  sz -  1 ].  iter ().  rev (){ write ! ( f ,  "_{:01$x}" ,  v ,  digitlen )?; } [0m[1m[31mcrate[0m ::  result ::  Result ::  Ok (())}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m20[0m:[0m389[0m:macro_rules! __ra_macro_fixture19 {($Float :  ident =>$($Int :  ident )+ )=>{# [ unstable ( feature =  "convert_float_to_int" ,  issue =  "67057" )] impl  private ::  Sealed  for $Float {}$(# [ unstable ( feature =  "convert_float_to_int" ,  issue =  "67057" )] impl  FloatToInt <$Int >  for $Float {# [ doc ( hidden )]# [ inline ] unsafe  fn  to_int_unchecked ( self )-> $Int { unsafe { [0m[1m[31mcrate[0m ::  intrinsics ::  float_to_int_unchecked ( self )}}})+ }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m65[0m:[0m1247[0m:macro_rules! __ra_macro_fixture64 {($cfg_cas :  meta , $cfg_align :  meta , $stable :  meta , $stable_cxchg :  meta , $stable_debug :  meta , $stable_access :  meta , $stable_from :  meta , $stable_nand :  meta , $const_stable :  meta , $stable_init_const :  meta , $s_int_type :  literal , $int_ref :  expr , $extra_feature :  expr , $min_fn :  ident , $max_fn :  ident , $align :  expr , $atomic_new :  expr , $int_type :  ident $atomic_type :  ident $atomic_init :  ident )=>{# [ doc =  " An integer type which can be safely shared between threads." ]# [ doc =  "" ]# [ doc =  " This type has the same in-memory representation as the underlying" ]# [ doc =  " integer type, [`" ]# [ doc = $s_int_type ]# [ doc =  " `](" ]# [ doc = $int_ref ]# [ doc =  " ). For more about the differences between atomic types and" ]# [ doc =  " non-atomic types as well as information about the portability of" ]# [ doc =  " this type, please see the [module-level documentation]." ]# [ doc =  "" ]# [ doc =  " **Note:** This type is only available on platforms that support" ]# [ doc =  " atomic loads and stores of [`" ]# [ doc = $s_int_type ]# [ doc =  " `](" ]# [ doc = $int_ref ]# [ doc =  " )." ]# [ doc =  "" ]# [ doc =  " [module-level documentation]: [0m[1m[31mcrate[0m::sync::atomic" ]# [$stable ]# [ repr ( C ,  align ($align ))] pub  struct $atomic_type { v :  UnsafeCell <$int_type >, }# [ doc =  " An atomic integer initialized to `0`." ]# [$stable_init_const ]# [ rustc_deprecated ( since =  "1.34.0" ,  reason =  "the `new` function is now preferred" ,  suggestion = $atomic_new , )] pub  const $atomic_init : $atomic_type = $atomic_type ::  new ( 0 ); # [$stable ] impl  Default  for $atomic_type {# [ inline ] fn  default ()->  Self { Self ::  new ( Default ::  default ())}}# [$stable_from ] impl  From <$int_type >  for $atomic_type { doc_comment ! { concat ! ( "Converts an `" ,  stringify ! ($int_type ),  "` into an `" ,  stringify ! ($atomic_type ),  "`." ), # [ inline ] fn  from ( v : $int_type )->  Self { Self ::  new ( v )}}}# [$stable_debug ] impl  fmt ::  Debug  for $atomic_type { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { fmt ::  Debug ::  fmt (&  self .  load ( Ordering ::  SeqCst ),  f )}}# [$stable ] unsafe  impl  Sync  for $atomic_type {} impl $atomic_type { doc_comment ! { concat ! ( "Creates a new atomic integer.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nlet atomic_forty_two = " ,  stringify ! ($atomic_type ),  "::new(42);\n```" ), # [ inline ]# [$stable ]# [$const_stable ] pub  const  fn  new ( v : $int_type )->  Self { Self { v :  UnsafeCell ::  new ( v )}}} doc_comment ! { concat ! ( "Returns a mutable reference to the underlying integer.\n\nThis is safe because the mutable reference guarantees that no other threads are\nconcurrently accessing the atomic data.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet mut some_var = " ,  stringify ! ($atomic_type ),  "::new(10);\nassert_eq!(*some_var.get_mut(), 10);\n*some_var.get_mut() = 5;\nassert_eq!(some_var.load(Ordering::SeqCst), 5);\n```" ), # [ inline ]# [$stable_access ] pub  fn  get_mut (&  mut  self )-> &  mut $int_type { self .  v .  get_mut ()}} doc_comment ! { concat ! ( "Get atomic access to a `&mut " ,  stringify ! ($int_type ),  "`.\n\n" ,  if_not_8_bit ! {$int_type ,  concat ! ( "**Note:** This function is only available on targets where `" ,  stringify ! ($int_type ),  "` has an alignment of " , $align ,  " bytes." )},  "\n\n# Examples\n\n```\n#![feature(atomic_from_mut)]\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet mut some_int = 123;\nlet a = " ,  stringify ! ($atomic_type ),  "::from_mut(&mut some_int);\na.store(100, Ordering::Relaxed);\nassert_eq!(some_int, 100);\n```\n                " ), # [ inline ]# [$cfg_align ]# [ unstable ( feature =  "atomic_from_mut" ,  issue =  "76314" )] pub  fn  from_mut ( v : &  mut $int_type )-> &  Self { use  [0m[1m[31mcrate[0m ::  mem ::  align_of ;  let []= [();  align_of ::<  Self > ()-  align_of ::<$int_type > ()];  unsafe {&* ( v  as *  mut $int_type  as *  mut  Self )}}} doc_comment ! { concat ! ( "Consumes the atomic and returns the contained value.\n\nThis is safe because passing `self` by value guarantees that no other threads are\nconcurrently accessing the atomic data.\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\nassert_eq!(some_var.into_inner(), 5);\n```" ), # [ inline ]# [$stable_access ]# [ rustc_const_unstable ( feature =  "const_cell_into_inner" ,  issue =  "78729" )] pub  const  fn  into_inner ( self )-> $int_type { self .  v .  into_inner ()}} doc_comment ! { concat ! ( "Loads a value from the atomic integer.\n\n`load` takes an [`Ordering`] argument which describes the memory ordering of this operation.\nPossible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n\n# Panics\n\nPanics if `order` is [`Release`] or [`AcqRel`].\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.load(Ordering::Relaxed), 5);\n```" ), # [ inline ]# [$stable ] pub  fn  load (&  self ,  order :  Ordering )-> $int_type { unsafe { atomic_load ( self .  v .  get (),  order )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer.\n\n`store` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n\n# Panics\n\nPanics if `order` is [`Acquire`] or [`AcqRel`].\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nsome_var.store(10, Ordering::Relaxed);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable ] pub  fn  store (&  self ,  val : $int_type ,  order :  Ordering ){ unsafe { atomic_store ( self .  v .  get (),  val ,  order ); }}} doc_comment ! { concat ! ( "Stores a value into the atomic integer, returning the previous value.\n\n`swap` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  swap (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_swap ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nThe return value is always the previous value. If it is equal to `current`, then the\nvalue was updated.\n\n`compare_and_swap` also takes an [`Ordering`] argument which describes the memory\nordering of this operation. Notice that even when using [`AcqRel`], the operation\nmight fail and hence just perform an `Acquire` load, but not have `Release` semantics.\nUsing [`Acquire`] makes the store part of this operation [`Relaxed`] if it\nhappens, and using [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.compare_and_swap(5, 10, Ordering::Relaxed), 5);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  compare_and_swap (&  self ,  current : $int_type ,  new : $int_type ,  order :  Ordering )-> $int_type { match  self .  compare_exchange ( current ,  new ,  order ,  strongest_failure_ordering ( order )){ Ok ( x )=> x ,  Err ( x )=> x , }}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nThe return value is a result indicating whether the new value was written and\ncontaining the previous value. On success this value is guaranteed to be equal to\n`current`.\n\n`compare_exchange` takes two [`Ordering`] arguments to describe the memory\nordering of this operation. The first describes the required ordering if the\noperation succeeds while the second describes the required ordering when the\noperation fails. Using [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the successful load\n[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet some_var = " ,  stringify ! ($atomic_type ),  "::new(5);\n\nassert_eq!(some_var.compare_exchange(5, 10,\n                                     Ordering::Acquire,\n                                     Ordering::Relaxed),\n           Ok(5));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n\nassert_eq!(some_var.compare_exchange(6, 12,\n                                     Ordering::SeqCst,\n                                     Ordering::Acquire),\n           Err(10));\nassert_eq!(some_var.load(Ordering::Relaxed), 10);\n```" ), # [ inline ]# [$stable_cxchg ]# [$cfg_cas ] pub  fn  compare_exchange (&  self ,  current : $int_type ,  new : $int_type ,  success :  Ordering ,  failure :  Ordering )->  Result <$int_type , $int_type > { unsafe { atomic_compare_exchange ( self .  v .  get (),  current ,  new ,  success ,  failure )}}} doc_comment ! { concat ! ( "Stores a value into the atomic integer if the current value is the same as\nthe `current` value.\n\nUnlike [`" ,  stringify ! ($atomic_type ),  "::compare_exchange`], this function is allowed to spuriously fail even\nwhen the comparison succeeds, which can result in more efficient code on some\nplatforms. The return value is a result indicating whether the new value was\nwritten and containing the previous value.\n\n`compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\nordering of this operation. The first describes the required ordering if the\noperation succeeds while the second describes the required ordering when the\noperation fails. Using [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the successful load\n[`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet val = " ,  stringify ! ($atomic_type ),  "::new(4);\n\nlet mut old = val.load(Ordering::Relaxed);\nloop {\n    let new = old * 2;\n    match val.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n        Ok(_) => break,\n        Err(x) => old = x,\n    }\n}\n```" ), # [ inline ]# [$stable_cxchg ]# [$cfg_cas ] pub  fn  compare_exchange_weak (&  self ,  current : $int_type ,  new : $int_type ,  success :  Ordering ,  failure :  Ordering )->  Result <$int_type , $int_type > { unsafe { atomic_compare_exchange_weak ( self .  v .  get (),  current ,  new ,  success ,  failure )}}} doc_comment ! { concat ! ( "Adds to the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_add` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0);\nassert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_add (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_add ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Subtracts from the current value, returning the previous value.\n\nThis operation wraps around on overflow.\n\n`fetch_sub` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(20);\nassert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\nassert_eq!(foo.load(Ordering::SeqCst), 10);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_sub (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_sub ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"and\" with the current value.\n\nPerforms a bitwise \"and\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_and` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_and (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_and ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"nand\" with the current value.\n\nPerforms a bitwise \"nand\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_nand` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "\nuse std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0x13);\nassert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\nassert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n```" ), # [ inline ]# [$stable_nand ]# [$cfg_cas ] pub  fn  fetch_nand (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_nand ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"or\" with the current value.\n\nPerforms a bitwise \"or\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_or` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_or (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_or ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Bitwise \"xor\" with the current value.\n\nPerforms a bitwise \"xor\" operation on the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_xor` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(0b101101);\nassert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\nassert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n```" ), # [ inline ]# [$stable ]# [$cfg_cas ] pub  fn  fetch_xor (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe { atomic_xor ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Fetches the value, and applies a function to it that returns an optional\nnew value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n`Err(previous_value)`.\n\nNote: This may call the function multiple times if the value has been changed from other threads in\nthe meantime, as long as the function returns `Some(_)`, but the function will have been applied\nonly once to the stored value.\n\n`fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\nThe first describes the required ordering for when the operation finally succeeds while the second\ndescribes the required ordering for loads. These correspond to the success and failure orderings of\n[`" ,  stringify ! ($atomic_type ),  "::compare_exchange`] respectively.\n\nUsing [`Acquire`] as success ordering makes the store part\nof this operation [`Relaxed`], and using [`Release`] makes the final successful load\n[`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\nand must be equivalent to or weaker than the success ordering.\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```rust\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet x = " ,  stringify ! ($atomic_type ),  "::new(7);\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\nassert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\nassert_eq!(x.load(Ordering::SeqCst), 9);\n```" ), # [ inline ]# [ stable ( feature =  "no_more_cas" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_update <  F > (&  self ,  set_order :  Ordering ,  fetch_order :  Ordering ,  mut  f :  F )->  Result <$int_type , $int_type >  where  F :  FnMut ($int_type )->  Option <$int_type > { let  mut  prev =  self .  load ( fetch_order );  while  let  Some ( next )=  f ( prev ){ match  self .  compare_exchange_weak ( prev ,  next ,  set_order ,  fetch_order ){ x @  Ok (_)=> return  x ,  Err ( next_prev )=> prev =  next_prev }} Err ( prev )}} doc_comment ! { concat ! ( "Maximum with the current value.\n\nFinds the maximum of the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_max` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nassert_eq!(foo.fetch_max(42, Ordering::SeqCst), 23);\nassert_eq!(foo.load(Ordering::SeqCst), 42);\n```\n\nIf you want to obtain the maximum value in one step, you can use the following:\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nlet bar = 42;\nlet max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\nassert!(max_foo == 42);\n```" ), # [ inline ]# [ stable ( feature =  "atomic_min_max" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_max (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe {$max_fn ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Minimum with the current value.\n\nFinds the minimum of the current value and the argument `val`, and\nsets the new value to the result.\n\nReturns the previous value.\n\n`fetch_min` takes an [`Ordering`] argument which describes the memory ordering\nof this operation. All ordering modes are possible. Note that using\n[`Acquire`] makes the store part of this operation [`Relaxed`], and\nusing [`Release`] makes the load part [`Relaxed`].\n\n**Note**: This method is only available on platforms that support atomic\noperations on [`" , $s_int_type ,  "`](" , $int_ref ,  ").\n\n# Examples\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nassert_eq!(foo.fetch_min(42, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 23);\nassert_eq!(foo.fetch_min(22, Ordering::Relaxed), 23);\nassert_eq!(foo.load(Ordering::Relaxed), 22);\n```\n\nIf you want to obtain the minimum value in one step, you can use the following:\n\n```\n" , $extra_feature ,  "use std::sync::atomic::{" ,  stringify ! ($atomic_type ),  ", Ordering};\n\nlet foo = " ,  stringify ! ($atomic_type ),  "::new(23);\nlet bar = 12;\nlet min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\nassert_eq!(min_foo, 12);\n```" ), # [ inline ]# [ stable ( feature =  "atomic_min_max" ,  since =  "1.45.0" )]# [$cfg_cas ] pub  fn  fetch_min (&  self ,  val : $int_type ,  order :  Ordering )-> $int_type { unsafe {$min_fn ( self .  v .  get (),  val ,  order )}}} doc_comment ! { concat ! ( "Returns a mutable pointer to the underlying integer.\n\nDoing non-atomic reads and writes on the resulting integer can be a data race.\nThis method is mostly useful for FFI, where the function signature may use\n`*mut " ,  stringify ! ($int_type ),  "` instead of `&" ,  stringify ! ($atomic_type ),  "`.\n\nReturning an `*mut` pointer from a shared reference to this atomic is safe because the\natomic types work with interior mutability. All modifications of an atomic change the value\nthrough a shared reference, and can do so safely as long as they use atomic operations. Any\nuse of the returned raw pointer requires an `unsafe` block and still has to uphold the same\nrestriction: operations on it must be atomic.\n\n# Examples\n\n```ignore (extern-declaration)\n# fn main() {\n" , $extra_feature ,  "use std::sync::atomic::" ,  stringify ! ($atomic_type ),  ";\n\nextern {\n    fn my_atomic_op(arg: *mut " ,  stringify ! ($int_type ),  ");\n}\n\nlet mut atomic = " ,  stringify ! ($atomic_type ),  "::new(1);\n" ,  "unsafe {\n    my_atomic_op(atomic.as_mut_ptr());\n}\n# }\n```" ), # [ inline ]# [ unstable ( feature =  "atomic_mut_ptr" ,  reason =  "recently added" ,  issue =  "66893" )] pub  fn  as_mut_ptr (&  self )-> *  mut $int_type { self .  v .  get ()}}}}}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m73[0m:[0m470[0m:macro_rules! __ra_macro_fixture72 {($($t :  ident ),*  as $u :  ident  via $conv_fn :  ident  named $name :  ident )=>{ fn $name ( mut  n : $u ,  is_nonnegative :  bool ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  mut  buf = [ MaybeUninit ::<  u8 >::  uninit ();  39 ];  let  mut  curr =  buf .  len () as  isize ;  let  buf_ptr =  MaybeUninit ::  slice_as_mut_ptr (&  mut  buf );  let  lut_ptr =  DEC_DIGITS_LUT .  as_ptr ();  unsafe { assert ! ( [0m[1m[31mcrate[0m ::  mem ::  size_of ::<$u > ()>=  2 );  while  n >=  10000 { let  rem = ( n %  10000 ) as  isize ;  n /=  10000 ;  let  d1 = ( rem /  100 )<<  1 ;  let  d2 = ( rem %  100 )<<  1 ;  curr -=  4 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 );  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d2 ),  buf_ptr .  offset ( curr +  2 ),  2 ); } let  mut  n =  n  as  isize ;  if  n >=  100 { let  d1 = ( n %  100 )<<  1 ;  n /=  100 ;  curr -=  2 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 ); } if  n <  10 { curr -=  1 ; *  buf_ptr .  offset ( curr )= ( n  as  u8 )+  b'0' ; } else { let  d1 =  n <<  1 ;  curr -=  2 ;  ptr ::  copy_nonoverlapping ( lut_ptr .  offset ( d1 ),  buf_ptr .  offset ( curr ),  2 ); }} let  buf_slice =  unsafe { str ::  from_utf8_unchecked ( slice ::  from_raw_parts ( buf_ptr .  offset ( curr ),  buf .  len ()-  curr  as  usize ))};  f .  pad_integral ( is_nonnegative ,  "" ,  buf_slice )}$(# [ stable ( feature =  "rust1" ,  since =  "1.0.0" )] impl  fmt ::  Display  for $t {# [ allow ( unused_comparisons )] fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter < '_ >)->  fmt ::  Result { let  is_nonnegative = *  self >=  0 ;  let  n =  if  is_nonnegative { self .$conv_fn ()} else {(!  self .$conv_fn ()).  wrapping_add ( 1 )}; $name ( n ,  is_nonnegative ,  f )}})* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m107[0m:[0m976[0m:macro_rules! __ra_macro_fixture106 {('owned : $($oty :  ident ,)* 'interned : $($ity :  ident ,)* )=>{# [ repr ( C )]# [ allow ( non_snake_case )] pub  struct  HandleCounters {$($oty :  AtomicUsize ,)* $($ity :  AtomicUsize ,)* } impl  HandleCounters { extern  "C"  fn  get ()-> & 'static  Self { static  COUNTERS :  HandleCounters =  HandleCounters {$($oty :  AtomicUsize ::  new ( 1 ),)* $($ity :  AtomicUsize ::  new ( 1 ),)* }; &  COUNTERS }}# [ repr ( C )]# [ allow ( non_snake_case )] pub ( super ) struct  HandleStore <  S :  server ::  Types > {$($oty :  handle ::  OwnedStore <  S ::$oty >,)* $($ity :  handle ::  InternedStore <  S ::$ity >,)* } impl <  S :  server ::  Types >  HandleStore <  S > { pub ( super ) fn  new ( handle_counters : & 'static  HandleCounters )->  Self { HandleStore {$($oty :  handle ::  OwnedStore ::  new (&  handle_counters .$oty ),)* $($ity :  handle ::  InternedStore ::  new (&  handle_counters .$ity ),)* }}}$(# [ repr ( C )] pub ( [0m[1m[31mcrate[0m ) struct $oty ( handle ::  Handle );  impl !  Send  for $oty {} impl !  Sync  for $oty {} impl  Drop  for $oty { fn  drop (&  mut  self ){$oty ( self .  0 ).  drop (); }} impl <  S >  Encode <  S >  for $oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ let  handle =  self .  0 ;  mem ::  forget ( self );  handle .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  DecodeMut < '_ , '_ ,  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>)->  Self { s .$oty .  take ( handle ::  Handle ::  decode ( r , &  mut ()))}} impl <  S >  Encode <  S >  for &$oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  Decode < '_ , 's ,  HandleStore <  server ::  MarkedTypes <  S >>>  for & 's  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : & 's  HandleStore <  server ::  MarkedTypes <  S >>)->  Self {&  s .$oty [ handle ::  Handle ::  decode ( r , &  mut ())]}} impl <  S >  Encode <  S >  for &  mut $oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  DecodeMut < '_ , 's ,  HandleStore <  server ::  MarkedTypes <  S >>>  for & 's  mut  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : & 's  mut  HandleStore <  server ::  MarkedTypes <  S >> )->  Self {&  mut  s .$oty [ handle ::  Handle ::  decode ( r , &  mut ())]}} impl <  S :  server ::  Types >  Encode <  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$oty , $oty > { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>){ s .$oty .  alloc ( self ).  encode ( w ,  s ); }} impl <  S >  DecodeMut < '_ , '_ ,  S >  for $oty { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  S )->  Self {$oty ( handle ::  Handle ::  decode ( r ,  s ))}})* $(# [ repr ( C )]# [ derive ( Copy ,  Clone ,  PartialEq ,  Eq ,  Hash )] pub ( [0m[1m[31mcrate[0m ) struct $ity ( handle ::  Handle );  impl !  Send  for $ity {} impl !  Sync  for $ity {} impl <  S >  Encode <  S >  for $ity { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  DecodeMut < '_ , '_ ,  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$ity , $ity > { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>)->  Self { s .$ity .  copy ( handle ::  Handle ::  decode ( r , &  mut ()))}} impl <  S :  server ::  Types >  Encode <  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$ity , $ity > { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>){ s .$ity .  alloc ( self ).  encode ( w ,  s ); }} impl <  S >  DecodeMut < '_ , '_ ,  S >  for $ity { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  S )->  Self {$ity ( handle ::  Handle ::  decode ( r ,  s ))}})* }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m111[0m:[0m182[0m:macro_rules! __ra_macro_fixture110 {($($name :  ident {$(fn $method :  ident ($($arg :  ident : $arg_ty :  ty ),* $(,)?)$(-> $ret_ty :  ty )*;)* }),* $(,)?)=>{$(impl $name {$(pub ( [0m[1m[31mcrate[0m ) fn $method ($($arg : $arg_ty ),*)$(-> $ret_ty )* { Bridge ::  with (|  bridge | { let  mut  b =  bridge .  cached_buffer .  take ();  b .  clear ();  api_tags ::  Method ::$name ( api_tags ::$name ::$method ).  encode (&  mut  b , &  mut ());  reverse_encode ! ( b ; $($arg ),*);  b =  bridge .  dispatch .  call ( b );  let  r =  Result ::<_,  PanicMessage >::  decode (&  mut &  b [..], &  mut ());  bridge .  cached_buffer =  b ;  r .  unwrap_or_else (|  e |  panic ::  resume_unwind ( e .  into ()))})})* })* }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m116[0m:[0m131[0m:macro_rules! __ra_macro_fixture115 {($(if # [ cfg ($meta :  meta )]{$($tokens :  tt )* }) else *  else {$($tokens2 :  tt )* })=>{$[0m[1m[31mcrate[0m ::  cfg_if ! {@  __items (); $((($meta )($($tokens )*)), )* (()($($tokens2 )*)), }}; ( if # [ cfg ($i_met :  meta )]{$($i_tokens :  tt )* }$(else  if # [ cfg ($e_met :  meta )]{$($e_tokens :  tt )* })* )=>{$[0m[1m[31mcrate[0m ::  cfg_if ! {@  __items (); (($i_met )($($i_tokens )*)), $((($e_met )($($e_tokens )*)), )* (()()), }}; (@  __items ($($not :  meta ,)*); )=>{}; (@  __items ($($not :  meta ,)*); (($($m :  meta ),*)($($tokens :  tt )*)), $($rest :  tt )*)=>{# [ cfg ( all ($($m ,)*  not ( any ($($not ),*))))]$[0m[1m[31mcrate[0m ::  cfg_if ! {@  __identity $($tokens )* }$[0m[1m[31mcrate[0m ::  cfg_if ! {@  __items ($($not ,)* $($m ,)*); $($rest )* }}; (@  __identity $($tokens :  tt )*)=>{$($tokens )* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m118[0m:[0m154[0m:macro_rules! __ra_macro_fixture117 {()=>{}; ($(# [$attr :  meta ])* $vis :  vis  static $name :  ident : $t :  ty = $init :  expr ; $($rest :  tt )*)=>($[0m[1m[31mcrate[0m ::  __thread_local_inner ! ($(# [$attr ])* $vis $name , $t , $init ); $[0m[1m[31mcrate[0m ::  thread_local ! ($($rest )*); ); ($(# [$attr :  meta ])* $vis :  vis  static $name :  ident : $t :  ty = $init :  expr )=>($[0m[1m[31mcrate[0m ::  __thread_local_inner ! ($(# [$attr ])* $vis $name , $t , $init ); ); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m122[0m:[0m142[0m:macro_rules! __ra_macro_fixture121 {(@  key $t :  ty , $init :  expr )=>{{# [ inline ] fn  __init ()-> $t {$init } unsafe  fn  __getit ()-> $[0m[1m[31mcrate[0m ::  option ::  Option <& 'static $t > {# [ cfg ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" )))] static  __KEY : $[0m[1m[31mcrate[0m ::  thread ::  __StaticLocalKeyInner <$t > = $[0m[1m[31mcrate[0m ::  thread ::  __StaticLocalKeyInner ::  new (); # [ thread_local ]# [ cfg ( all ( target_thread_local ,  not ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" ))), ))] static  __KEY : $[0m[1m[31mcrate[0m ::  thread ::  __FastLocalKeyInner <$t > = $[0m[1m[31mcrate[0m ::  thread ::  __FastLocalKeyInner ::  new (); # [ cfg ( all ( not ( target_thread_local ),  not ( all ( target_arch =  "wasm32" ,  not ( target_feature =  "atomics" ))), ))] static  __KEY : $[0m[1m[31mcrate[0m ::  thread ::  __OsLocalKeyInner <$t > = $[0m[1m[31mcrate[0m ::  thread ::  __OsLocalKeyInner ::  new (); # [ allow ( unused_unsafe )] unsafe { __KEY .  get ( __init )}} unsafe {$[0m[1m[31mcrate[0m ::  thread ::  LocalKey ::  new ( __getit )}}}; ($(# [$attr :  meta ])* $vis :  vis $name :  ident , $t :  ty , $init :  expr )=>{$(# [$attr ])* $vis  const $name : $[0m[1m[31mcrate[0m ::  thread ::  LocalKey <$t > = $[0m[1m[31mcrate[0m ::  __thread_local_inner ! (@  key $t , $init ); }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m145[0m:[0m316[0m:macro_rules! __ra_macro_fixture144 {($($token :  tt  pub  struct $name :  ident /$len :  tt # [$doc :  meta ])*)=>{$(# [ repr ( C )]# [$doc ]# [ doc =  "" ]# [ doc =  " Don\\\'t try to remember the name of this type &mdash; use the" ]# [ doc =  " [`Token!`] macro instead." ]# [ doc =  "" ]# [ doc =  " [`Token!`]: [0m[1m[31mcrate[0m::token" ] pub  struct $name { pub  spans : [ Span ; $len ], }# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $name <  S :  IntoSpans < [ Span ; $len ]>> ( spans :  S )-> $name {$name { spans :  spans .  into_spans (), }} impl  std ::  default ::  Default  for $name { fn  default ()->  Self {$name { spans : [ Span ::  call_site (); $len ], }}}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Copy  for $name {}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $name { fn  clone (&  self )->  Self {*  self }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Debug  for $name { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { f .  write_str ( stringify ! ($name ))}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  cmp ::  Eq  for $name {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $name { fn  eq (&  self ,  _other : &$name )->  bool { true }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $name { fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}} impl_deref_if_len_is_1 ! ($name /$len ); )* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m146[0m:[0m289[0m:macro_rules! __ra_macro_fixture145 {($($token :  tt  pub  struct $name :  ident # [$doc :  meta ])*)=>{$(# [$doc ]# [ doc =  "" ]# [ doc =  " Don\\\'t try to remember the name of this type &mdash; use the" ]# [ doc =  " [`Token!`] macro instead." ]# [ doc =  "" ]# [ doc =  " [`Token!`]: [0m[1m[31mcrate[0m::token" ] pub  struct $name { pub  span :  Span , }# [ doc ( hidden )]# [ allow ( non_snake_case )] pub  fn $name <  S :  IntoSpans < [ Span ;  1 ]>> ( span :  S )-> $name {$name { span :  span .  into_spans ()[ 0 ], }} impl  std ::  default ::  Default  for $name { fn  default ()->  Self {$name { span :  Span ::  call_site (), }}}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Copy  for $name {}# [ cfg ( feature =  "clone-impls" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "clone-impls" )))] impl  Clone  for $name { fn  clone (&  self )->  Self {*  self }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Debug  for $name { fn  fmt (&  self ,  f : &  mut  fmt ::  Formatter )->  fmt ::  Result { f .  write_str ( stringify ! ($name ))}}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  cmp ::  Eq  for $name {}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  PartialEq  for $name { fn  eq (&  self ,  _other : &$name )->  bool { true }}# [ cfg ( feature =  "extra-traits" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "extra-traits" )))] impl  Hash  for $name { fn  hash <  H :  Hasher > (&  self ,  _state : &  mut  H ){}}# [ cfg ( feature =  "printing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "printing" )))] impl  ToTokens  for $name { fn  to_tokens (&  self ,  tokens : &  mut  TokenStream ){ printing ::  keyword ($token ,  self .  span ,  tokens ); }}# [ cfg ( feature =  "parsing" )]# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "parsing" )))] impl  Parse  for $name { fn  parse ( input :  ParseStream )->  Result <  Self > { Ok ($name { span :  parsing ::  keyword ( input , $token )?, })}}# [ cfg ( feature =  "parsing" )] impl  Token  for $name { fn  peek ( cursor :  Cursor )->  bool { parsing ::  peek_keyword ( cursor , $token )} fn  display ()-> & 'static  str { concat ! ( "`" , $token ,  "`" )}}# [ cfg ( feature =  "parsing" )] impl  private ::  Sealed  for $name {})* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m153[0m:[0m128[0m:macro_rules! __ra_macro_fixture152 {($ident :  ident )=>{# [ allow ( non_camel_case_types )] pub  struct $ident { pub  span : $[0m[1m[31mcrate[0m ::  __private ::  Span , }# [ doc ( hidden )]# [ allow ( dead_code ,  non_snake_case )] pub  fn $ident <  __S : $[0m[1m[31mcrate[0m ::  __private ::  IntoSpans < [$[0m[1m[31mcrate[0m ::  __private ::  Span ;  1 ]>> ( span :  __S , )-> $ident {$ident { span : $[0m[1m[31mcrate[0m ::  __private ::  IntoSpans ::  into_spans ( span )[ 0 ], }} impl $[0m[1m[31mcrate[0m ::  __private ::  Default  for $ident { fn  default ()->  Self {$ident { span : $[0m[1m[31mcrate[0m ::  __private ::  Span ::  call_site (), }}}$[0m[1m[31mcrate[0m ::  impl_parse_for_custom_keyword ! ($ident ); $[0m[1m[31mcrate[0m ::  impl_to_tokens_for_custom_keyword ! ($ident ); $[0m[1m[31mcrate[0m ::  impl_clone_for_custom_keyword ! ($ident ); $[0m[1m[31mcrate[0m ::  impl_extra_traits_for_custom_keyword ! ($ident ); }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m158[0m:[0m319[0m:macro_rules! __ra_macro_fixture157 {($($await_rule :  tt )*)=>{# [ doc =  " A type-macro that expands to the name of the Rust type representation of a" ]# [ doc =  " given token." ]# [ doc =  "" ]# [ doc =  " See the [token module] documentation for details and examples." ]# [ doc =  "" ]# [ doc =  " [token module]: [0m[1m[31mcrate[0m::token" ]# [ macro_export ] macro_rules !  Token {[ abstract ]=>{$[0m[1m[31mcrate[0m ::  token ::  Abstract }; [ as ]=>{$[0m[1m[31mcrate[0m ::  token ::  As }; [ async ]=>{$[0m[1m[31mcrate[0m ::  token ::  Async }; [ auto ]=>{$[0m[1m[31mcrate[0m ::  token ::  Auto }; $($await_rule =>{$[0m[1m[31mcrate[0m ::  token ::  Await };)* [ become ]=>{$[0m[1m[31mcrate[0m ::  token ::  Become }; [ box ]=>{$[0m[1m[31mcrate[0m ::  token ::  Box }; [ break ]=>{$[0m[1m[31mcrate[0m ::  token ::  Break }; [ const ]=>{$[0m[1m[31mcrate[0m ::  token ::  Const }; [ continue ]=>{$[0m[1m[31mcrate[0m ::  token ::  Continue }; [ [0m[1m[31mcrate[0m ]=>{$[0m[1m[31mcrate[0m ::  token ::  [0m[1m[31mCrate[0m }; [ default ]=>{$[0m[1m[31mcrate[0m ::  token ::  Default }; [ do ]=>{$[0m[1m[31mcrate[0m ::  token ::  Do }; [ dyn ]=>{$[0m[1m[31mcrate[0m ::  token ::  Dyn }; [ else ]=>{$[0m[1m[31mcrate[0m ::  token ::  Else }; [ enum ]=>{$[0m[1m[31mcrate[0m ::  token ::  Enum }; [ extern ]=>{$[0m[1m[31mcrate[0m ::  token ::  Extern }; [ final ]=>{$[0m[1m[31mcrate[0m ::  token ::  Final }; [ fn ]=>{$[0m[1m[31mcrate[0m ::  token ::  Fn }; [ for ]=>{$[0m[1m[31mcrate[0m ::  token ::  For }; [ if ]=>{$[0m[1m[31mcrate[0m ::  token ::  If }; [ impl ]=>{$[0m[1m[31mcrate[0m ::  token ::  Impl }; [ in ]=>{$[0m[1m[31mcrate[0m ::  token ::  In }; [ let ]=>{$[0m[1m[31mcrate[0m ::  token ::  Let }; [ loop ]=>{$[0m[1m[31mcrate[0m ::  token ::  Loop }; [ macro ]=>{$[0m[1m[31mcrate[0m ::  token ::  Macro }; [ match ]=>{$[0m[1m[31mcrate[0m ::  token ::  Match }; [ mod ]=>{$[0m[1m[31mcrate[0m ::  token ::  Mod }; [ move ]=>{$[0m[1m[31mcrate[0m ::  token ::  Move }; [ mut ]=>{$[0m[1m[31mcrate[0m ::  token ::  Mut }; [ override ]=>{$[0m[1m[31mcrate[0m ::  token ::  Override }; [ priv ]=>{$[0m[1m[31mcrate[0m ::  token ::  Priv }; [ pub ]=>{$[0m[1m[31mcrate[0m ::  token ::  Pub }; [ ref ]=>{$[0m[1m[31mcrate[0m ::  token ::  Ref }; [ return ]=>{$[0m[1m[31mcrate[0m ::  token ::  Return }; [ Self ]=>{$[0m[1m[31mcrate[0m ::  token ::  SelfType }; [ self ]=>{$[0m[1m[31mcrate[0m ::  token ::  SelfValue }; [ static ]=>{$[0m[1m[31mcrate[0m ::  token ::  Static }; [ struct ]=>{$[0m[1m[31mcrate[0m ::  token ::  Struct }; [ super ]=>{$[0m[1m[31mcrate[0m ::  token ::  Super }; [ trait ]=>{$[0m[1m[31mcrate[0m ::  token ::  Trait }; [ try ]=>{$[0m[1m[31mcrate[0m ::  token ::  Try }; [ type ]=>{$[0m[1m[31mcrate[0m ::  token ::  Type }; [ typeof ]=>{$[0m[1m[31mcrate[0m ::  token ::  Typeof }; [ union ]=>{$[0m[1m[31mcrate[0m ::  token ::  Union }; [ unsafe ]=>{$[0m[1m[31mcrate[0m ::  token ::  Unsafe }; [ unsized ]=>{$[0m[1m[31mcrate[0m ::  token ::  Unsized }; [ use ]=>{$[0m[1m[31mcrate[0m ::  token ::  Use }; [ virtual ]=>{$[0m[1m[31mcrate[0m ::  token ::  Virtual }; [ where ]=>{$[0m[1m[31mcrate[0m ::  token ::  Where }; [ while ]=>{$[0m[1m[31mcrate[0m ::  token ::  While }; [ yield ]=>{$[0m[1m[31mcrate[0m ::  token ::  Yield }; [+]=>{$[0m[1m[31mcrate[0m ::  token ::  Add }; [+=]=>{$[0m[1m[31mcrate[0m ::  token ::  AddEq }; [&]=>{$[0m[1m[31mcrate[0m ::  token ::  And }; [&&]=>{$[0m[1m[31mcrate[0m ::  token ::  AndAnd }; [&=]=>{$[0m[1m[31mcrate[0m ::  token ::  AndEq }; [@]=>{$[0m[1m[31mcrate[0m ::  token ::  At }; [!]=>{$[0m[1m[31mcrate[0m ::  token ::  Bang }; [^]=>{$[0m[1m[31mcrate[0m ::  token ::  Caret }; [^=]=>{$[0m[1m[31mcrate[0m ::  token ::  CaretEq }; [:]=>{$[0m[1m[31mcrate[0m ::  token ::  Colon }; [::]=>{$[0m[1m[31mcrate[0m ::  token ::  Colon2 }; [,]=>{$[0m[1m[31mcrate[0m ::  token ::  Comma }; [/]=>{$[0m[1m[31mcrate[0m ::  token ::  Div }; [/=]=>{$[0m[1m[31mcrate[0m ::  token ::  DivEq }; [$]=>{$[0m[1m[31mcrate[0m ::  token ::  Dollar }; [.]=>{$[0m[1m[31mcrate[0m ::  token ::  Dot }; [..]=>{$[0m[1m[31mcrate[0m ::  token ::  Dot2 }; [...]=>{$[0m[1m[31mcrate[0m ::  token ::  Dot3 }; [..=]=>{$[0m[1m[31mcrate[0m ::  token ::  DotDotEq }; [=]=>{$[0m[1m[31mcrate[0m ::  token ::  Eq }; [==]=>{$[0m[1m[31mcrate[0m ::  token ::  EqEq }; [>=]=>{$[0m[1m[31mcrate[0m ::  token ::  Ge }; [>]=>{$[0m[1m[31mcrate[0m ::  token ::  Gt }; [<=]=>{$[0m[1m[31mcrate[0m ::  token ::  Le }; [<]=>{$[0m[1m[31mcrate[0m ::  token ::  Lt }; [*=]=>{$[0m[1m[31mcrate[0m ::  token ::  MulEq }; [!=]=>{$[0m[1m[31mcrate[0m ::  token ::  Ne }; [|]=>{$[0m[1m[31mcrate[0m ::  token ::  Or }; [|=]=>{$[0m[1m[31mcrate[0m ::  token ::  OrEq }; [||]=>{$[0m[1m[31mcrate[0m ::  token ::  OrOr }; [#]=>{$[0m[1m[31mcrate[0m ::  token ::  Pound }; [?]=>{$[0m[1m[31mcrate[0m ::  token ::  Question }; [->]=>{$[0m[1m[31mcrate[0m ::  token ::  RArrow }; [<-]=>{$[0m[1m[31mcrate[0m ::  token ::  LArrow }; [%]=>{$[0m[1m[31mcrate[0m ::  token ::  Rem }; [%=]=>{$[0m[1m[31mcrate[0m ::  token ::  RemEq }; [=>]=>{$[0m[1m[31mcrate[0m ::  token ::  FatArrow }; [;]=>{$[0m[1m[31mcrate[0m ::  token ::  Semi }; [<<]=>{$[0m[1m[31mcrate[0m ::  token ::  Shl }; [<<=]=>{$[0m[1m[31mcrate[0m ::  token ::  ShlEq }; [>>]=>{$[0m[1m[31mcrate[0m ::  token ::  Shr }; [>>=]=>{$[0m[1m[31mcrate[0m ::  token ::  ShrEq }; [*]=>{$[0m[1m[31mcrate[0m ::  token ::  Star }; [-]=>{$[0m[1m[31mcrate[0m ::  token ::  Sub }; [-=]=>{$[0m[1m[31mcrate[0m ::  token ::  SubEq }; [~]=>{$[0m[1m[31mcrate[0m ::  token ::  Tilde }; [_]=>{$[0m[1m[31mcrate[0m ::  token ::  Underscore }; }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m161[0m:[0m65[0m:macro_rules! __ra_macro_fixture160 {($ident :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  token ::  CustomToken  for $ident { fn  peek ( cursor : $[0m[1m[31mcrate[0m ::  buffer ::  Cursor )-> $[0m[1m[31mcrate[0m ::  __private ::  bool { if  let  Some (( ident ,  _rest ))=  cursor .  ident (){ ident ==  stringify ! ($ident )} else { false }} fn  display ()-> & 'static $[0m[1m[31mcrate[0m ::  __private ::  str { concat ! ( "`" ,  stringify ! ($ident ),  "`" )}} impl $[0m[1m[31mcrate[0m ::  parse ::  Parse  for $ident { fn  parse ( input : $[0m[1m[31mcrate[0m ::  parse ::  ParseStream )-> $[0m[1m[31mcrate[0m ::  parse ::  Result <$ident > { input .  step (|  cursor | { if  let $[0m[1m[31mcrate[0m ::  __private ::  Some (( ident ,  rest ))=  cursor .  ident (){ if  ident ==  stringify ! ($ident ){ return $[0m[1m[31mcrate[0m ::  __private ::  Ok (($ident { span :  ident .  span ()},  rest )); }}$[0m[1m[31mcrate[0m ::  __private ::  Err ( cursor .  error ( concat ! ( "expected `" ,  stringify ! ($ident ),  "`" )))})}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m162[0m:[0m65[0m:macro_rules! __ra_macro_fixture161 {($ident :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  __private ::  ToTokens  for $ident { fn  to_tokens (&  self ,  tokens : &  mut $[0m[1m[31mcrate[0m ::  __private ::  TokenStream2 ){ let  ident = $[0m[1m[31mcrate[0m ::  Ident ::  new ( stringify ! ($ident ),  self .  span ); $[0m[1m[31mcrate[0m ::  __private ::  TokenStreamExt ::  append ( tokens ,  ident ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m163[0m:[0m65[0m:macro_rules! __ra_macro_fixture162 {($ident :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  __private ::  Copy  for $ident {} impl $[0m[1m[31mcrate[0m ::  __private ::  Clone  for $ident { fn  clone (&  self )->  Self {*  self }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m164[0m:[0m65[0m:macro_rules! __ra_macro_fixture163 {($ident :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  __private ::  Debug  for $ident { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  __private ::  Formatter )-> $[0m[1m[31mcrate[0m ::  __private ::  fmt ::  Result {$[0m[1m[31mcrate[0m ::  __private ::  Formatter ::  write_str ( f ,  concat ! ( "Keyword [" ,  stringify ! ($ident ),  "]" ), )}} impl $[0m[1m[31mcrate[0m ::  __private ::  Eq  for $ident {} impl $[0m[1m[31mcrate[0m ::  __private ::  PartialEq  for $ident { fn  eq (&  self ,  _other : &  Self )-> $[0m[1m[31mcrate[0m ::  __private ::  bool { true }} impl $[0m[1m[31mcrate[0m ::  __private ::  Hash  for $ident { fn  hash <  __H : $[0m[1m[31mcrate[0m ::  __private ::  Hasher > (&  self ,  _state : &  mut  __H ){}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m166[0m:[0m131[0m:macro_rules! __ra_macro_fixture165 {($name :  ident ::  Verbatim , $member :  ident )=>{}; ($name :  ident ::$variant :  ident ,  [0m[1m[31mcrate[0m ::  private )=>{}; ($name :  ident ::$variant :  ident , $member :  ident )=>{ impl  From <$member >  for $name { fn  from ( e : $member )-> $name {$name ::$variant ( e )}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m167[0m:[0m573[0m:macro_rules! __ra_macro_fixture166 {( do_not_generate_to_tokens $($foo :  tt )*)=>(); (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant =>{})$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident $member :  ident , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant ( _e )=> _e .  to_tokens ($tokens ),)$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {$variant :  ident  [0m[1m[31mcrate[0m ::  private , $($next :  tt )*})=>{ generate_to_tokens ! (($($arms )* $name ::$variant (_)=> unreachable ! (),)$tokens $name {$($next )* }); }; (($($arms :  tt )*)$tokens :  ident $name :  ident {})=>{# [ cfg_attr ( doc_cfg ,  doc ( cfg ( feature =  "printing" )))] impl ::  quote ::  ToTokens  for $name { fn  to_tokens (&  self , $tokens : &  mut ::  proc_macro2 ::  TokenStream ){ match  self {$($arms )* }}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m171[0m:[0m362[0m:macro_rules! __ra_macro_fixture170 {($(# [$attr :  meta ])* ($($vis :  tt )*) static  ref $N :  ident : $T :  ty = $e :  expr ; $($t :  tt )*)=>{ __lazy_static_internal ! (@  MAKE  TY , $(# [$attr ])*, ($($vis )*), $N );  __lazy_static_internal ! (@  TAIL , $N : $T = $e );  lazy_static ! ($($t )*); }; (@  TAIL , $N :  ident : $T :  ty = $e :  expr )=>{ impl $[0m[1m[31mcrate[0m ::  __Deref  for $N { type  Target = $T ;  fn  deref (&  self )-> &$T {# [ inline ( always )] fn  __static_ref_initialize ()-> $T {$e }# [ inline ( always )] fn  __stability ()-> & 'static $T { __lazy_static_create ! ( LAZY , $T );  LAZY .  get ( __static_ref_initialize )} __stability ()}} impl $[0m[1m[31mcrate[0m ::  LazyStatic  for $N { fn  initialize ( lazy : &  Self ){ let _ = &**  lazy ; }}}; (@  MAKE  TY , $(# [$attr :  meta ])*, ($($vis :  tt )*), $N :  ident )=>{# [ allow ( missing_copy_implementations )]# [ allow ( non_camel_case_types )]# [ allow ( dead_code )]$(# [$attr ])* $($vis )*  struct $N { __private_field : ()}# [ doc ( hidden )]$($vis )*  static $N : $N = $N { __private_field : ()}; }; ()=>()}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m173[0m:[0m383[0m:macro_rules! __ra_macro_fixture172 {( bool , $op :  expr , $record :  ident )=>{ impl_one_value ! ( normal ,  bool , $op , $record ); }; ($value_ty :  tt , $op :  expr , $record :  ident )=>{ impl_one_value ! ( normal , $value_ty , $op , $record );  impl_one_value ! ( nonzero , $value_ty , $op , $record ); }; ( normal , $value_ty :  tt , $op :  expr , $record :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  sealed ::  Sealed  for $value_ty {} impl $[0m[1m[31mcrate[0m ::  field ::  Value  for $value_ty { fn  record (&  self ,  key : &$[0m[1m[31mcrate[0m ::  field ::  Field ,  visitor : &  mut  dyn $[0m[1m[31mcrate[0m ::  field ::  Visit ){ visitor .$record ( key , $op (*  self ))}}}; ( nonzero , $value_ty :  tt , $op :  expr , $record :  ident )=>{# [ allow ( clippy ::  useless_attribute ,  unused )] use  num ::*;  impl $[0m[1m[31mcrate[0m ::  sealed ::  Sealed  for  ty_to_nonzero ! ($value_ty ){} impl $[0m[1m[31mcrate[0m ::  field ::  Value  for  ty_to_nonzero ! ($value_ty ){ fn  record (&  self ,  key : &$[0m[1m[31mcrate[0m ::  field ::  Field ,  visitor : &  mut  dyn $[0m[1m[31mcrate[0m ::  field ::  Visit ){ visitor .$record ( key , $op ( self .  get ()))}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m174[0m:[0m223[0m:macro_rules! __ra_macro_fixture173 {($(# [ doc $($doc :  tt )*])* # [ project = $proj_mut_ident :  ident ]# [ project_ref = $proj_ref_ident :  ident ]# [ project_replace = $proj_replace_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[$proj_mut_ident ][$proj_ref_ident ][$proj_replace_ident ]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project = $proj_mut_ident :  ident ]# [ project_ref = $proj_ref_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[$proj_mut_ident ][$proj_ref_ident ][]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project = $proj_mut_ident :  ident ]# [ project_replace = $proj_replace_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[$proj_mut_ident ][][$proj_replace_ident ]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project_ref = $proj_ref_ident :  ident ]# [ project_replace = $proj_replace_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[][$proj_ref_ident ][$proj_replace_ident ]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project = $proj_mut_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[$proj_mut_ident ][][]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project_ref = $proj_ref_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[][$proj_ref_ident ][]$(# [ doc $($doc )*])* $($tt )* }}; ($(# [ doc $($doc :  tt )*])* # [ project_replace = $proj_replace_ident :  ident ]$($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[][][$proj_replace_ident ]$(# [ doc $($doc )*])* $($tt )* }}; ($($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {[][][]$($tt )* }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m175[0m:[0m564[0m:macro_rules! __ra_macro_fixture174 {(@  struct => internal ; [$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?][$proj_vis :  vis ][$(# [$attrs :  meta ])* $vis :  vis  struct $ident :  ident ][$($def_generics :  tt )*][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )*)?]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident : $field_ty :  ty ),+ })=>{$(# [$attrs ])* $vis  struct $ident $($def_generics )* $(where $($where_clause )*)? {$($field_vis $field : $field_ty ),+ }$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_ty => named ; [$proj_vis ][$($proj_mut_ident )?][ make_proj_field_mut ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_ty => named ; [$proj_vis ][$($proj_ref_ident )?][ make_proj_field_ref ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_replace_ty => named ; [$proj_vis ][$($proj_replace_ident )?][ make_proj_field_replace ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}# [ allow ( explicit_outlives_requirements )]# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  unknown_clippy_lints )]# [ allow ( clippy ::  redundant_pub_[0m[1m[31mcrate[0m )]# [ allow ( clippy ::  used_underscore_binding )] const _: ()= {$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_ty => unnamed ; [$proj_vis ][$($proj_mut_ident )?][ Projection ][ make_proj_field_mut ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_ty => unnamed ; [$proj_vis ][$($proj_ref_ident )?][ ProjectionRef ][ make_proj_field_ref ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_replace_ty => unnamed ; [$proj_vis ][$($proj_replace_ident )?][ ProjectionReplace ][ make_proj_field_replace ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }} impl <$($impl_generics )*> $ident <$($ty_generics )*> $(where $($where_clause )*)? {$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_method ; [$proj_vis ][$($proj_mut_ident )?][ Projection ][ project  get_unchecked_mut  mut ][$($ty_generics )*]{$($(# [$pin ])? $field_vis $field ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_method ; [$proj_vis ][$($proj_ref_ident )?][ ProjectionRef ][ project_ref  get_ref ][$($ty_generics )*]{$($(# [$pin ])? $field_vis $field ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_replace_method ; [$proj_vis ][$($proj_replace_ident )?][ ProjectionReplace ][$($ty_generics )*]{$($(# [$pin ])? $field_vis $field ),+ }}}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_unpin_impl ; [$vis $ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_unpin_bound ; $(# [$pin ])? $field_ty )),+ }$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_drop_impl ; [$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]}# [ forbid ( safe_packed_borrows )] fn  __assert_not_repr_packed <$($impl_generics )*> ( this : &$ident <$($ty_generics )*>)$(where $($where_clause )*)? {$(let _ = &  this .$field ; )+ }}; }; (@  enum => internal ; [$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?][$proj_vis :  vis ][$(# [$attrs :  meta ])* $vis :  vis  enum $ident :  ident ][$($def_generics :  tt )*][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )*)?]{$($(# [$variant_attrs :  meta ])* $variant :  ident $({$($(# [$pin :  ident ])? $field :  ident : $field_ty :  ty ),+ })? ),+ })=>{$(# [$attrs ])* $vis  enum $ident $($def_generics )* $(where $($where_clause )*)? {$($(# [$variant_attrs ])* $variant $({$($field : $field_ty ),+ })? ),+ }$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_ty ; [$proj_vis ][$($proj_mut_ident )?][ make_proj_field_mut ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($variant $({$($(# [$pin ])? $field : $field_ty ),+ })? ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_ty ; [$proj_vis ][$($proj_ref_ident )?][ make_proj_field_ref ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($variant $({$($(# [$pin ])? $field : $field_ty ),+ })? ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_replace_ty ; [$proj_vis ][$($proj_replace_ident )?][ make_proj_field_replace ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]{$($variant $({$($(# [$pin ])? $field : $field_ty ),+ })? ),+ }}# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  unknown_clippy_lints )]# [ allow ( clippy ::  used_underscore_binding )] const _: ()= { impl <$($impl_generics )*> $ident <$($ty_generics )*> $(where $($where_clause )*)? {$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_method ; [$proj_vis ][$($proj_mut_ident )?][ project  get_unchecked_mut  mut ][$($ty_generics )*]{$($variant $({$($(# [$pin ])? $field ),+ })? ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_method ; [$proj_vis ][$($proj_ref_ident )?][ project_ref  get_ref ][$($ty_generics )*]{$($variant $({$($(# [$pin ])? $field ),+ })? ),+ }}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => make_proj_replace_method ; [$proj_vis ][$($proj_replace_ident )?][$($ty_generics )*]{$($variant $({$($(# [$pin ])? $field ),+ })? ),+ }}}$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_unpin_impl ; [$vis $ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]$($variant : ($($($[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_unpin_bound ; $(# [$pin ])? $field_ty )),+ )?)),+ }$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_drop_impl ; [$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]}}; }; (@  struct => make_proj_ty => unnamed ; [$proj_vis :  vis ][$_proj_ty_ident :  ident ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{}; (@  struct => make_proj_ty => unnamed ; [$proj_vis :  vis ][][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_ty => named ; [$proj_vis ][$proj_ty_ident ][$make_proj_field ][$ident ][$($impl_generics )*][$($ty_generics )*][$(where $($where_clause )*)?]$($field )* }}; (@  struct => make_proj_ty => named ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident : $field_ty :  ty ),+ })=>{# [ allow ( dead_code )]# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  unknown_clippy_lints )]# [ allow ( clippy ::  mut_mut )]# [ allow ( clippy ::  redundant_pub_[0m[1m[31mcrate[0m )]# [ allow ( clippy ::  ref_option_ref )]# [ allow ( clippy ::  type_repetition_in_bounds )]$proj_vis  struct $proj_ty_ident < '__pin , $($impl_generics )*>  where $ident <$($ty_generics )*>: '__pin $(, $($where_clause )*)? {$($field_vis $field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@$make_proj_field ; $(# [$pin ])? $field_ty )),+ }}; (@  struct => make_proj_ty => named ; [$proj_vis :  vis ][][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{}; (@  struct => make_proj_replace_ty => unnamed ; [$proj_vis :  vis ][$_proj_ty_ident :  ident ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{}; (@  struct => make_proj_replace_ty => unnamed ; [$proj_vis :  vis ][][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{}; (@  struct => make_proj_replace_ty => named ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident : $field_ty :  ty ),+ })=>{# [ allow ( dead_code )]# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  mut_mut )]# [ allow ( clippy ::  redundant_pub_[0m[1m[31mcrate[0m )]# [ allow ( clippy ::  type_repetition_in_bounds )]$proj_vis  struct $proj_ty_ident <$($impl_generics )*>  where $($($where_clause )*)? {$($field_vis $field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@$make_proj_field ; $(# [$pin ])? $field_ty )),+ }}; (@  struct => make_proj_replace_ty => named ; [$proj_vis :  vis ][][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{}; (@  enum => make_proj_ty ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]{$($variant :  ident $({$($(# [$pin :  ident ])? $field :  ident : $field_ty :  ty ),+ })? ),+ })=>{# [ allow ( dead_code )]# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  unknown_clippy_lints )]# [ allow ( clippy ::  mut_mut )]# [ allow ( clippy ::  redundant_pub_[0m[1m[31mcrate[0m )]# [ allow ( clippy ::  ref_option_ref )]# [ allow ( clippy ::  type_repetition_in_bounds )]$proj_vis  enum $proj_ty_ident < '__pin , $($impl_generics )*>  where $ident <$($ty_generics )*>: '__pin $(, $($where_clause )*)? {$($variant $({$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@$make_proj_field ; $(# [$pin ])? $field_ty )),+ })? ),+ }}; (@  enum => make_proj_ty ; [$proj_vis :  vis ][][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($variant :  tt )* )=>{}; (@  enum => make_proj_replace_ty ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]{$($variant :  ident $({$($(# [$pin :  ident ])? $field :  ident : $field_ty :  ty ),+ })? ),+ })=>{# [ allow ( dead_code )]# [ allow ( single_use_lifetimes )]# [ allow ( clippy ::  mut_mut )]# [ allow ( clippy ::  redundant_pub_[0m[1m[31mcrate[0m )]# [ allow ( clippy ::  type_repetition_in_bounds )]$proj_vis  enum $proj_ty_ident <$($impl_generics )*>  where $($($where_clause )*)? {$($variant $({$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@$make_proj_field ; $(# [$pin ])? $field_ty )),+ })? ),+ }}; (@  enum => make_proj_replace_ty ; [$proj_vis :  vis ][][$make_proj_field :  ident ][$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($variant :  tt )* )=>{}; (@  make_proj_replace_block ; [$($proj_path :  tt )+]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident ),+ })=>{ let  result = $($proj_path )* {$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_replace_field_proj ; $(# [$pin ])? $field )),+ }; {($($[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_unsafe_drop_in_place_guard ; $(# [$pin ])? $field ), )* ); } result }; (@  make_proj_replace_block ; [$($proj_path :  tt )+])=>{$($proj_path )* }; (@  struct => make_proj_method ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$_proj_ty_ident :  ident ][$method_ident :  ident $get_method :  ident $($mut :  ident )?][$($ty_generics :  tt )*]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident ),+ })=>{$proj_vis  fn $method_ident < '__pin > ( self : $[0m[1m[31mcrate[0m ::  __private ::  Pin <& '__pin $($mut )?  Self >, )-> $proj_ty_ident < '__pin , $($ty_generics )*> { unsafe { let  Self {$($field ),* }=  self .$get_method (); $proj_ty_ident {$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_unsafe_field_proj ; $(# [$pin ])? $field )),+ }}}}; (@  struct => make_proj_method ; [$proj_vis :  vis ][][$proj_ty_ident :  ident ][$method_ident :  ident $get_method :  ident $($mut :  ident )?][$($ty_generics :  tt )*]$($variant :  tt )* )=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => make_proj_method ; [$proj_vis ][$proj_ty_ident ][$proj_ty_ident ][$method_ident $get_method $($mut )?][$($ty_generics )*]$($variant )* }}; (@  struct => make_proj_replace_method ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$_proj_ty_ident :  ident ][$($ty_generics :  tt )*]{$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident ),+ })=>{$proj_vis  fn  project_replace ( self : $[0m[1m[31mcrate[0m ::  __private ::  Pin <&  mut  Self >,  replacement :  Self , )-> $proj_ty_ident <$($ty_generics )*> { unsafe { let  __self_ptr : *  mut  Self =  self .  get_unchecked_mut ();  let  __guard = $[0m[1m[31mcrate[0m ::  __private ::  UnsafeOverwriteGuard { target :  __self_ptr ,  value : $[0m[1m[31mcrate[0m ::  __private ::  ManuallyDrop ::  new ( replacement ), };  let  Self {$($field ),* }= &  mut *  __self_ptr ; $[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_proj_replace_block ; [$proj_ty_ident ]{$($(# [$pin ])? $field ),+ }}}}}; (@  struct => make_proj_replace_method ; [$proj_vis :  vis ][][$proj_ty_ident :  ident ][$($ty_generics :  tt )*]$($variant :  tt )* )=>{}; (@  enum => make_proj_method ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$method_ident :  ident $get_method :  ident $($mut :  ident )?][$($ty_generics :  tt )*]{$($variant :  ident $({$($(# [$pin :  ident ])? $field :  ident ),+ })? ),+ })=>{$proj_vis  fn $method_ident < '__pin > ( self : $[0m[1m[31mcrate[0m ::  __private ::  Pin <& '__pin $($mut )?  Self >, )-> $proj_ty_ident < '__pin , $($ty_generics )*> { unsafe { match  self .$get_method (){$(Self ::$variant $({$($field ),+ })? =>{$proj_ty_ident ::$variant $({$($field : $[0m[1m[31mcrate[0m ::  __pin_project_internal ! (@  make_unsafe_field_proj ; $(# [$pin ])? $field )),+ })? }),+ }}}}; (@  enum => make_proj_method ; [$proj_vis :  vis ][][$method_ident :  ident $get_method :  ident $($mut :  ident )?][$($ty_generics :  tt )*]$($variant :  tt )* )=>{}; (@  enum => make_proj_replace_method ; [$proj_vis :  vis ][$proj_ty_ident :  ident ][$($ty_generics :  tt )*]{$($variant :  ident $({$($(# [$pin :  ident ])? $field :  ident ),+ })? ),+ })=>{$proj_vis  fn  project_replace ( self : $[0m[1m[31mcrate[0m ::  __private ::  Pin <&  mut  Self >,  replacement :  Self , )-> $proj_ty_ident <$($ty_generics )*> { unsafe { let  __self_ptr : *  mut  Self =  self .  get_unchecked_mut ();  let  __guard = $[0m[1m[31mcrate[0m ::  __private ::  UnsafeOverwriteGuard { target :  __self_ptr ,  value : $[0m[1m[31mcrate[0m ::  __private ::  ManuallyDrop ::  new ( replacement ), };  match &  mut *  __self_ptr {$(Self ::$variant $({$($field ),+ })? =>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  make_proj_replace_block ; [$proj_ty_ident :: $variant ]$({$($(# [$pin ])? $field ),+ })? }}),+ }}}}; (@  enum => make_proj_replace_method ; [$proj_vis :  vis ][][$($ty_generics :  tt )*]$($variant :  tt )* )=>{}; (@  make_unpin_impl ; [$vis :  vis $ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?]$($field :  tt )* )=>{# [ allow ( non_snake_case )]$vis  struct  __Origin < '__pin , $($impl_generics )*> $(where $($where_clause )*)? { __dummy_lifetime : $[0m[1m[31mcrate[0m ::  __private ::  PhantomData <& '__pin ()>, $($field )* } impl < '__pin , $($impl_generics )*> $[0m[1m[31mcrate[0m ::  __private ::  Unpin  for $ident <$($ty_generics )*>  where  __Origin < '__pin , $($ty_generics )*>: $[0m[1m[31mcrate[0m ::  __private ::  Unpin $(, $($where_clause )*)? {}}; (@  make_drop_impl ; [$ident :  ident ][$($impl_generics :  tt )*][$($ty_generics :  tt )*][$(where $($where_clause :  tt )* )?])=>{ trait  MustNotImplDrop {}# [ allow ( clippy ::  drop_bounds ,  drop_bounds )] impl <  T : $[0m[1m[31mcrate[0m ::  __private ::  Drop >  MustNotImplDrop  for  T {} impl <$($impl_generics )*>  MustNotImplDrop  for $ident <$($ty_generics )*> $(where $($where_clause )*)? {}}; (@  make_unpin_bound ; # [ pin ]$field_ty :  ty )=>{$field_ty }; (@  make_unpin_bound ; $field_ty :  ty )=>{$[0m[1m[31mcrate[0m ::  __private ::  AlwaysUnpin <$field_ty > }; (@  make_unsafe_field_proj ; # [ pin ]$field :  ident )=>{$[0m[1m[31mcrate[0m ::  __private ::  Pin ::  new_unchecked ($field )}; (@  make_unsafe_field_proj ; $field :  ident )=>{$field }; (@  make_replace_field_proj ; # [ pin ]$field :  ident )=>{$[0m[1m[31mcrate[0m ::  __private ::  PhantomData }; (@  make_replace_field_proj ; $field :  ident )=>{$[0m[1m[31mcrate[0m ::  __private ::  ptr ::  read ($field )}; (@  make_unsafe_drop_in_place_guard ; # [ pin ]$field :  ident )=>{$[0m[1m[31mcrate[0m ::  __private ::  UnsafeDropInPlaceGuard ($field )}; (@  make_unsafe_drop_in_place_guard ; $field :  ident )=>{()}; (@  make_proj_field_mut ; # [ pin ]$field_ty :  ty )=>{$[0m[1m[31mcrate[0m ::  __private ::  Pin <& '__pin  mut ($field_ty )> }; (@  make_proj_field_mut ; $field_ty :  ty )=>{& '__pin  mut ($field_ty )}; (@  make_proj_field_ref ; # [ pin ]$field_ty :  ty )=>{$[0m[1m[31mcrate[0m ::  __private ::  Pin <& '__pin ($field_ty )> }; (@  make_proj_field_ref ; $field_ty :  ty )=>{& '__pin ($field_ty )}; (@  make_proj_field_replace ; # [ pin ]$field_ty :  ty )=>{$[0m[1m[31mcrate[0m ::  __private ::  PhantomData <$field_ty > }; (@  make_proj_field_replace ; $field_ty :  ty )=>{$field_ty }; ([$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?]$(# [$attrs :  meta ])*  pub  struct $ident :  ident $(< $($lifetime :  lifetime $(: $lifetime_bound :  lifetime )? ),* $(,)? $($generics :  ident $(: $generics_bound :  path )? $(: ?$generics_unsized_bound :  path )? $(: $generics_lifetime_bound :  lifetime )? $(= $generics_default :  ty )? ),* $(,)? >)? $(where $($where_clause_ty :  ty $(: $where_clause_bound :  path )? $(: ?$where_clause_unsized_bound :  path )? $(: $where_clause_lifetime_bound :  lifetime )? ),* $(,)? )? {$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident : $field_ty :  ty ),+ $(,)? })=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => internal ; [$($proj_mut_ident )?][$($proj_ref_ident )?][$($proj_replace_ident )?][ pub ( [0m[1m[31mcrate[0m )][$(# [$attrs ])*  pub  struct $ident ][$(< $($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? $(= $generics_default )? ),* >)?][$($($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? ),* )?][$($($lifetime ,)* $($generics ),* )?][$(where $($where_clause_ty $(: $where_clause_bound )? $(: ?$where_clause_unsized_bound )? $(: $where_clause_lifetime_bound )? ),* )?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}}; ([$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?]$(# [$attrs :  meta ])* $vis :  vis  struct $ident :  ident $(< $($lifetime :  lifetime $(: $lifetime_bound :  lifetime )? ),* $(,)? $($generics :  ident $(: $generics_bound :  path )? $(: ?$generics_unsized_bound :  path )? $(: $generics_lifetime_bound :  lifetime )? $(= $generics_default :  ty )? ),* $(,)? >)? $(where $($where_clause_ty :  ty $(: $where_clause_bound :  path )? $(: ?$where_clause_unsized_bound :  path )? $(: $where_clause_lifetime_bound :  lifetime )? ),* $(,)? )? {$($(# [$pin :  ident ])? $field_vis :  vis $field :  ident : $field_ty :  ty ),+ $(,)? })=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  struct => internal ; [$($proj_mut_ident )?][$($proj_ref_ident )?][$($proj_replace_ident )?][$vis ][$(# [$attrs ])* $vis  struct $ident ][$(< $($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? $(= $generics_default )? ),* >)?][$($($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? ),* )?][$($($lifetime ,)* $($generics ),* )?][$(where $($where_clause_ty $(: $where_clause_bound )? $(: ?$where_clause_unsized_bound )? $(: $where_clause_lifetime_bound )? ),* )?]{$($(# [$pin ])? $field_vis $field : $field_ty ),+ }}}; ([$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?]$(# [$attrs :  meta ])*  pub  enum $ident :  ident $(< $($lifetime :  lifetime $(: $lifetime_bound :  lifetime )? ),* $(,)? $($generics :  ident $(: $generics_bound :  path )? $(: ?$generics_unsized_bound :  path )? $(: $generics_lifetime_bound :  lifetime )? $(= $generics_default :  ty )? ),* $(,)? >)? $(where $($where_clause_ty :  ty $(: $where_clause_bound :  path )? $(: ?$where_clause_unsized_bound :  path )? $(: $where_clause_lifetime_bound :  lifetime )? ),* $(,)? )? {$($(# [$variant_attrs :  meta ])* $variant :  ident $({$($(# [$pin :  ident ])? $field :  ident : $field_ty :  ty ),+ $(,)? })? ),+ $(,)? })=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => internal ; [$($proj_mut_ident )?][$($proj_ref_ident )?][$($proj_replace_ident )?][ pub ( [0m[1m[31mcrate[0m )][$(# [$attrs ])*  pub  enum $ident ][$(< $($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? $(= $generics_default )? ),* >)?][$($($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? ),* )?][$($($lifetime ,)* $($generics ),* )?][$(where $($where_clause_ty $(: $where_clause_bound )? $(: ?$where_clause_unsized_bound )? $(: $where_clause_lifetime_bound )? ),* )?]{$($(# [$variant_attrs ])* $variant $({$($(# [$pin ])? $field : $field_ty ),+ })? ),+ }}}; ([$($proj_mut_ident :  ident )?][$($proj_ref_ident :  ident )?][$($proj_replace_ident :  ident )?]$(# [$attrs :  meta ])* $vis :  vis  enum $ident :  ident $(< $($lifetime :  lifetime $(: $lifetime_bound :  lifetime )? ),* $(,)? $($generics :  ident $(: $generics_bound :  path )? $(: ?$generics_unsized_bound :  path )? $(: $generics_lifetime_bound :  lifetime )? $(= $generics_default :  ty )? ),* $(,)? >)? $(where $($where_clause_ty :  ty $(: $where_clause_bound :  path )? $(: ?$where_clause_unsized_bound :  path )? $(: $where_clause_lifetime_bound :  lifetime )? ),* $(,)? )? {$($(# [$variant_attrs :  meta ])* $variant :  ident $({$($(# [$pin :  ident ])? $field :  ident : $field_ty :  ty ),+ $(,)? })? ),+ $(,)? })=>{$[0m[1m[31mcrate[0m ::  __pin_project_internal ! {@  enum => internal ; [$($proj_mut_ident )?][$($proj_ref_ident )?][$($proj_replace_ident )?][$vis ][$(# [$attrs ])* $vis  enum $ident ][$(< $($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? $(= $generics_default )? ),* >)?][$($($lifetime $(: $lifetime_bound )? ,)* $($generics $(: $generics_bound )? $(: ?$generics_unsized_bound )? $(: $generics_lifetime_bound )? ),* )?][$($($lifetime ,)* $($generics ),* )?][$(where $($where_clause_ty $(: $where_clause_bound )? $(: ?$where_clause_unsized_bound )? $(: $where_clause_lifetime_bound )? ),* )?]{$($(# [$variant_attrs ])* $variant $({$($(# [$pin ])? $field : $field_ty ),+ })? ),+ }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m263[0m:[0m225[0m:macro_rules! __ra_macro_fixture262 {($name :  ident , $ty_int :  ty , $max :  expr , $bytes :  expr , $read :  ident , $write :  ident )=>{ mod $name {# [ allow ( unused_imports )] use  super :: { qc_sized ,  Wi128 };  use  [0m[1m[31mcrate[0m :: { BigEndian ,  ByteOrder ,  LittleEndian ,  NativeEndian , }; # [ test ] fn  big_endian (){ fn  prop ( n : $ty_int )->  bool { let  mut  buf = [ 0 ;  16 ];  BigEndian ::$write (&  mut  buf ,  n .  clone (), $bytes );  n ==  BigEndian ::$read (&  buf [..$bytes ], $bytes )} qc_sized ( prop  as  fn ($ty_int )->  bool , $max ); }# [ test ] fn  little_endian (){ fn  prop ( n : $ty_int )->  bool { let  mut  buf = [ 0 ;  16 ];  LittleEndian ::$write (&  mut  buf ,  n .  clone (), $bytes );  n ==  LittleEndian ::$read (&  buf [..$bytes ], $bytes )} qc_sized ( prop  as  fn ($ty_int )->  bool , $max ); }# [ test ] fn  native_endian (){ fn  prop ( n : $ty_int )->  bool { let  mut  buf = [ 0 ;  16 ];  NativeEndian ::$write (&  mut  buf ,  n .  clone (), $bytes );  n ==  NativeEndian ::$read (&  buf [..$bytes ], $bytes )} qc_sized ( prop  as  fn ($ty_int )->  bool , $max ); }}}; ($name :  ident , $ty_int :  ty , $max :  expr , $read :  ident , $write :  ident )=>{ mod $name {# [ allow ( unused_imports )] use  super :: { qc_sized ,  Wi128 };  use  [0m[1m[31mcrate[0m :: { BigEndian ,  ByteOrder ,  LittleEndian ,  NativeEndian , };  use  core ::  mem ::  size_of ; # [ test ] fn  big_endian (){ fn  prop ( n : $ty_int )->  bool { let  bytes =  size_of ::<$ty_int > ();  let  mut  buf = [ 0 ;  16 ];  BigEndian ::$write (&  mut  buf [ 16 -  bytes ..],  n .  clone ());  n ==  BigEndian ::$read (&  buf [ 16 -  bytes ..])} qc_sized ( prop  as  fn ($ty_int )->  bool , $max -  1 ); }# [ test ] fn  little_endian (){ fn  prop ( n : $ty_int )->  bool { let  bytes =  size_of ::<$ty_int > ();  let  mut  buf = [ 0 ;  16 ];  LittleEndian ::$write (&  mut  buf [..  bytes ],  n .  clone ());  n ==  LittleEndian ::$read (&  buf [..  bytes ])} qc_sized ( prop  as  fn ($ty_int )->  bool , $max -  1 ); }# [ test ] fn  native_endian (){ fn  prop ( n : $ty_int )->  bool { let  bytes =  size_of ::<$ty_int > ();  let  mut  buf = [ 0 ;  16 ];  NativeEndian ::$write (&  mut  buf [..  bytes ],  n .  clone ());  n ==  NativeEndian ::$read (&  buf [..  bytes ])} qc_sized ( prop  as  fn ($ty_int )->  bool , $max -  1 ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m264[0m:[0m153[0m:macro_rules! __ra_macro_fixture263 {($name :  ident , $maximally_small :  expr , $zero :  expr , $read :  ident , $write :  ident )=>{ mod $name { use  [0m[1m[31mcrate[0m :: { BigEndian ,  ByteOrder ,  LittleEndian ,  NativeEndian , }; # [ test ]# [ should_panic ] fn  read_big_endian (){ let  buf = [ 0 ; $maximally_small ];  BigEndian ::$read (&  buf ); }# [ test ]# [ should_panic ] fn  read_little_endian (){ let  buf = [ 0 ; $maximally_small ];  LittleEndian ::$read (&  buf ); }# [ test ]# [ should_panic ] fn  read_native_endian (){ let  buf = [ 0 ; $maximally_small ];  NativeEndian ::$read (&  buf ); }# [ test ]# [ should_panic ] fn  write_big_endian (){ let  mut  buf = [ 0 ; $maximally_small ];  BigEndian ::$write (&  mut  buf , $zero ); }# [ test ]# [ should_panic ] fn  write_little_endian (){ let  mut  buf = [ 0 ; $maximally_small ];  LittleEndian ::$write (&  mut  buf , $zero ); }# [ test ]# [ should_panic ] fn  write_native_endian (){ let  mut  buf = [ 0 ; $maximally_small ];  NativeEndian ::$write (&  mut  buf , $zero ); }}}; ($name :  ident , $maximally_small :  expr , $read :  ident )=>{ mod $name { use  [0m[1m[31mcrate[0m :: { BigEndian ,  ByteOrder ,  LittleEndian ,  NativeEndian , }; # [ test ]# [ should_panic ] fn  read_big_endian (){ let  buf = [ 0 ; $maximally_small ];  BigEndian ::$read (&  buf , $maximally_small +  1 ); }# [ test ]# [ should_panic ] fn  read_little_endian (){ let  buf = [ 0 ; $maximally_small ];  LittleEndian ::$read (&  buf , $maximally_small +  1 ); }# [ test ]# [ should_panic ] fn  read_native_endian (){ let  buf = [ 0 ; $maximally_small ];  NativeEndian ::$read (&  buf , $maximally_small +  1 ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m265[0m:[0m150[0m:macro_rules! __ra_macro_fixture264 {($name :  ident , $read :  ident , $write :  ident , $num_bytes :  expr , $numbers :  expr )=>{ mod $name { use  [0m[1m[31mcrate[0m :: { BigEndian ,  ByteOrder ,  LittleEndian ,  NativeEndian , }; # [ test ]# [ should_panic ] fn  read_big_endian (){ let  bytes = [ 0 ; $num_bytes ];  let  mut  numbers = $numbers ;  BigEndian ::$read (&  bytes , &  mut  numbers ); }# [ test ]# [ should_panic ] fn  read_little_endian (){ let  bytes = [ 0 ; $num_bytes ];  let  mut  numbers = $numbers ;  LittleEndian ::$read (&  bytes , &  mut  numbers ); }# [ test ]# [ should_panic ] fn  read_native_endian (){ let  bytes = [ 0 ; $num_bytes ];  let  mut  numbers = $numbers ;  NativeEndian ::$read (&  bytes , &  mut  numbers ); }# [ test ]# [ should_panic ] fn  write_big_endian (){ let  mut  bytes = [ 0 ; $num_bytes ];  let  numbers = $numbers ;  BigEndian ::$write (&  numbers , &  mut  bytes ); }# [ test ]# [ should_panic ] fn  write_little_endian (){ let  mut  bytes = [ 0 ; $num_bytes ];  let  numbers = $numbers ;  LittleEndian ::$write (&  numbers , &  mut  bytes ); }# [ test ]# [ should_panic ] fn  write_native_endian (){ let  mut  bytes = [ 0 ; $num_bytes ];  let  numbers = $numbers ;  NativeEndian ::$write (&  numbers , &  mut  bytes ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m273[0m:[0m6658[0m:macro_rules! __ra_macro_fixture272 {($name :  ident , $regex_mod :  ident , $only_utf8 :  expr )=>{ pub  mod $name { use  super ::  RegexOptions ;  use  error ::  Error ;  use  exec ::  ExecBuilder ;  use $regex_mod ::  Regex ; # [ doc =  " A configurable builder for a regular expression." ]# [ doc =  "" ]# [ doc =  " A builder can be used to configure how the regex is built, for example, by" ]# [ doc =  " setting the default flags (which can be overridden in the expression" ]# [ doc =  " itself) or setting various limits." ]# [ derive ( Debug )] pub  struct  RegexBuilder ( RegexOptions );  impl  RegexBuilder {# [ doc =  " Create a new regular expression builder with the given pattern." ]# [ doc =  "" ]# [ doc =  " If the pattern is invalid, then an error will be returned when" ]# [ doc =  " `build` is called." ] pub  fn  new ( pattern : &  str )->  RegexBuilder { let  mut  builder =  RegexBuilder ( RegexOptions ::  default ());  builder .  0 .  pats .  push ( pattern .  to_owned ());  builder }# [ doc =  " Consume the builder and compile the regular expression." ]# [ doc =  "" ]# [ doc =  " Note that calling `as_str` on the resulting `Regex` will produce the" ]# [ doc =  " pattern given to `new` verbatim. Notably, it will not incorporate any" ]# [ doc =  " of the flags set on this builder." ] pub  fn  build (&  self )->  Result <  Regex ,  Error > { ExecBuilder ::  new_options ( self .  0 .  clone ()).  only_utf8 ($only_utf8 ).  build ().  map ( Regex ::  from )}# [ doc =  " Set the value for the case insensitive (`i`) flag." ]# [ doc =  "" ]# [ doc =  " When enabled, letters in the pattern will match both upper case and" ]# [ doc =  " lower case variants." ] pub  fn  case_insensitive (&  mut  self ,  yes :  bool , )-> &  mut  RegexBuilder { self .  0 .  case_insensitive =  yes ;  self }# [ doc =  " Set the value for the multi-line matching (`m`) flag." ]# [ doc =  "" ]# [ doc =  " When enabled, `^` matches the beginning of lines and `$` matches the" ]# [ doc =  " end of lines." ]# [ doc =  "" ]# [ doc =  " By default, they match beginning/end of the input." ] pub  fn  multi_line (&  mut  self ,  yes :  bool )-> &  mut  RegexBuilder { self .  0 .  multi_line =  yes ;  self }# [ doc =  " Set the value for the any character (`s`) flag, where in `.` matches" ]# [ doc =  " anything when `s` is set and matches anything except for new line when" ]# [ doc =  " it is not set (the default)." ]# [ doc =  "" ]# [ doc =  " N.B. \\\"matches anything\\\" means \\\"any byte\\\" when Unicode is disabled and" ]# [ doc =  " means \\\"any valid UTF-8 encoding of any Unicode scalar value\\\" when" ]# [ doc =  " Unicode is enabled." ] pub  fn  dot_matches_new_line (&  mut  self ,  yes :  bool , )-> &  mut  RegexBuilder { self .  0 .  dot_matches_new_line =  yes ;  self }# [ doc =  " Set the value for the greedy swap (`U`) flag." ]# [ doc =  "" ]# [ doc =  " When enabled, a pattern like `a*` is lazy (tries to find shortest" ]# [ doc =  " match) and `a*?` is greedy (tries to find longest match)." ]# [ doc =  "" ]# [ doc =  " By default, `a*` is greedy and `a*?` is lazy." ] pub  fn  swap_greed (&  mut  self ,  yes :  bool )-> &  mut  RegexBuilder { self .  0 .  swap_greed =  yes ;  self }# [ doc =  " Set the value for the ignore whitespace (`x`) flag." ]# [ doc =  "" ]# [ doc =  " When enabled, whitespace such as new lines and spaces will be ignored" ]# [ doc =  " between expressions of the pattern, and `#` can be used to start a" ]# [ doc =  " comment until the next new line." ] pub  fn  ignore_whitespace (&  mut  self ,  yes :  bool , )-> &  mut  RegexBuilder { self .  0 .  ignore_whitespace =  yes ;  self }# [ doc =  " Set the value for the Unicode (`u`) flag." ]# [ doc =  "" ]# [ doc =  " Enabled by default. When disabled, character classes such as `\\\\w` only" ]# [ doc =  " match ASCII word characters instead of all Unicode word characters." ] pub  fn  unicode (&  mut  self ,  yes :  bool )-> &  mut  RegexBuilder { self .  0 .  unicode =  yes ;  self }# [ doc =  " Whether to support octal syntax or not." ]# [ doc =  "" ]# [ doc =  " Octal syntax is a little-known way of uttering Unicode codepoints in" ]# [ doc =  " a regular expression. For example, `a`, `\\\\x61`, `\\\\u0061` and" ]# [ doc =  " `\\\\141` are all equivalent regular expressions, where the last example" ]# [ doc =  " shows octal syntax." ]# [ doc =  "" ]# [ doc =  " While supporting octal syntax isn\\\'t in and of itself a problem, it does" ]# [ doc =  " make good error messages harder. That is, in PCRE based regex engines," ]# [ doc =  " syntax like `\\\\0` invokes a backreference, which is explicitly" ]# [ doc =  " unsupported in Rust\\\'s regex engine. However, many users expect it to" ]# [ doc =  " be supported. Therefore, when octal support is disabled, the error" ]# [ doc =  " message will explicitly mention that backreferences aren\\\'t supported." ]# [ doc =  "" ]# [ doc =  " Octal syntax is disabled by default." ] pub  fn  octal (&  mut  self ,  yes :  bool )-> &  mut  RegexBuilder { self .  0 .  octal =  yes ;  self }# [ doc =  " Set the approximate size limit of the compiled regular expression." ]# [ doc =  "" ]# [ doc =  " This roughly corresponds to the number of bytes occupied by a single" ]# [ doc =  " compiled program. If the program exceeds this number, then a" ]# [ doc =  " compilation error is returned." ] pub  fn  size_limit (&  mut  self ,  limit :  usize , )-> &  mut  RegexBuilder { self .  0 .  size_limit =  limit ;  self }# [ doc =  " Set the approximate size of the cache used by the DFA." ]# [ doc =  "" ]# [ doc =  " This roughly corresponds to the number of bytes that the DFA will" ]# [ doc =  " use while searching." ]# [ doc =  "" ]# [ doc =  " Note that this is a *per thread* limit. There is no way to set a global" ]# [ doc =  " limit. In particular, if a regex is used from multiple threads" ]# [ doc =  " simultaneously, then each thread may use up to the number of bytes" ]# [ doc =  " specified here." ] pub  fn  dfa_size_limit (&  mut  self ,  limit :  usize , )-> &  mut  RegexBuilder { self .  0 .  dfa_size_limit =  limit ;  self }# [ doc =  " Set the nesting limit for this parser." ]# [ doc =  "" ]# [ doc =  " The nesting limit controls how deep the abstract syntax tree is allowed" ]# [ doc =  " to be. If the AST exceeds the given limit (e.g., with too many nested" ]# [ doc =  " groups), then an error is returned by the parser." ]# [ doc =  "" ]# [ doc =  " The purpose of this limit is to act as a heuristic to prevent stack" ]# [ doc =  " overflow for consumers that do structural induction on an `Ast` using" ]# [ doc =  " explicit recursion. While this [0m[1m[31mcrate[0m never does this (instead using" ]# [ doc =  " constant stack space and moving the call stack to the heap), other" ]# [ doc =  " [0m[1m[31mcrate[0ms may." ]# [ doc =  "" ]# [ doc =  " This limit is not checked until the entire Ast is parsed. Therefore," ]# [ doc =  " if callers want to put a limit on the amount of heap space used, then" ]# [ doc =  " they should impose a limit on the length, in bytes, of the concrete" ]# [ doc =  " pattern string. In particular, this is viable since this parser" ]# [ doc =  " implementation will limit itself to heap space proportional to the" ]# [ doc =  " length of the pattern string." ]# [ doc =  "" ]# [ doc =  " Note that a nest limit of `0` will return a nest limit error for most" ]# [ doc =  " patterns but not all. For example, a nest limit of `0` permits `a` but" ]# [ doc =  " not `ab`, since `ab` requires a concatenation, which results in a nest" ]# [ doc =  " depth of `1`. In general, a nest limit is not something that manifests" ]# [ doc =  " in an obvious way in the concrete syntax, therefore, it should not be" ]# [ doc =  " used in a granular way." ] pub  fn  nest_limit (&  mut  self ,  limit :  u32 )-> &  mut  RegexBuilder { self .  0 .  nest_limit =  limit ;  self }}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m274[0m:[0m5610[0m:macro_rules! __ra_macro_fixture273 {($name :  ident , $regex_mod :  ident , $only_utf8 :  expr )=>{ pub  mod $name { use  super ::  RegexOptions ;  use  error ::  Error ;  use  exec ::  ExecBuilder ;  use  re_set ::$regex_mod ::  RegexSet ; # [ doc =  " A configurable builder for a set of regular expressions." ]# [ doc =  "" ]# [ doc =  " A builder can be used to configure how the regexes are built, for example," ]# [ doc =  " by setting the default flags (which can be overridden in the expression" ]# [ doc =  " itself) or setting various limits." ]# [ derive ( Debug )] pub  struct  RegexSetBuilder ( RegexOptions );  impl  RegexSetBuilder {# [ doc =  " Create a new regular expression builder with the given pattern." ]# [ doc =  "" ]# [ doc =  " If the pattern is invalid, then an error will be returned when" ]# [ doc =  " `build` is called." ] pub  fn  new <  I ,  S > ( patterns :  I )->  RegexSetBuilder  where  S :  AsRef <  str >,  I :  IntoIterator <  Item =  S >, { let  mut  builder =  RegexSetBuilder ( RegexOptions ::  default ());  for  pat  in  patterns { builder .  0 .  pats .  push ( pat .  as_ref ().  to_owned ()); } builder }# [ doc =  " Consume the builder and compile the regular expressions into a set." ] pub  fn  build (&  self )->  Result <  RegexSet ,  Error > { ExecBuilder ::  new_options ( self .  0 .  clone ()).  only_utf8 ($only_utf8 ).  build ().  map ( RegexSet ::  from )}# [ doc =  " Set the value for the case insensitive (`i`) flag." ] pub  fn  case_insensitive (&  mut  self ,  yes :  bool , )-> &  mut  RegexSetBuilder { self .  0 .  case_insensitive =  yes ;  self }# [ doc =  " Set the value for the multi-line matching (`m`) flag." ] pub  fn  multi_line (&  mut  self ,  yes :  bool , )-> &  mut  RegexSetBuilder { self .  0 .  multi_line =  yes ;  self }# [ doc =  " Set the value for the any character (`s`) flag, where in `.` matches" ]# [ doc =  " anything when `s` is set and matches anything except for new line when" ]# [ doc =  " it is not set (the default)." ]# [ doc =  "" ]# [ doc =  " N.B. \\\"matches anything\\\" means \\\"any byte\\\" for `regex::bytes::RegexSet`" ]# [ doc =  " expressions and means \\\"any Unicode scalar value\\\" for `regex::RegexSet`" ]# [ doc =  " expressions." ] pub  fn  dot_matches_new_line (&  mut  self ,  yes :  bool , )-> &  mut  RegexSetBuilder { self .  0 .  dot_matches_new_line =  yes ;  self }# [ doc =  " Set the value for the greedy swap (`U`) flag." ] pub  fn  swap_greed (&  mut  self ,  yes :  bool , )-> &  mut  RegexSetBuilder { self .  0 .  swap_greed =  yes ;  self }# [ doc =  " Set the value for the ignore whitespace (`x`) flag." ] pub  fn  ignore_whitespace (&  mut  self ,  yes :  bool , )-> &  mut  RegexSetBuilder { self .  0 .  ignore_whitespace =  yes ;  self }# [ doc =  " Set the value for the Unicode (`u`) flag." ] pub  fn  unicode (&  mut  self ,  yes :  bool )-> &  mut  RegexSetBuilder { self .  0 .  unicode =  yes ;  self }# [ doc =  " Whether to support octal syntax or not." ]# [ doc =  "" ]# [ doc =  " Octal syntax is a little-known way of uttering Unicode codepoints in" ]# [ doc =  " a regular expression. For example, `a`, `\\\\x61`, `\\\\u0061` and" ]# [ doc =  " `\\\\141` are all equivalent regular expressions, where the last example" ]# [ doc =  " shows octal syntax." ]# [ doc =  "" ]# [ doc =  " While supporting octal syntax isn\\\'t in and of itself a problem, it does" ]# [ doc =  " make good error messages harder. That is, in PCRE based regex engines," ]# [ doc =  " syntax like `\\\\0` invokes a backreference, which is explicitly" ]# [ doc =  " unsupported in Rust\\\'s regex engine. However, many users expect it to" ]# [ doc =  " be supported. Therefore, when octal support is disabled, the error" ]# [ doc =  " message will explicitly mention that backreferences aren\\\'t supported." ]# [ doc =  "" ]# [ doc =  " Octal syntax is disabled by default." ] pub  fn  octal (&  mut  self ,  yes :  bool )-> &  mut  RegexSetBuilder { self .  0 .  octal =  yes ;  self }# [ doc =  " Set the approximate size limit of the compiled regular expression." ]# [ doc =  "" ]# [ doc =  " This roughly corresponds to the number of bytes occupied by a single" ]# [ doc =  " compiled program. If the program exceeds this number, then a" ]# [ doc =  " compilation error is returned." ] pub  fn  size_limit (&  mut  self ,  limit :  usize , )-> &  mut  RegexSetBuilder { self .  0 .  size_limit =  limit ;  self }# [ doc =  " Set the approximate size of the cache used by the DFA." ]# [ doc =  "" ]# [ doc =  " This roughly corresponds to the number of bytes that the DFA will" ]# [ doc =  " use while searching." ]# [ doc =  "" ]# [ doc =  " Note that this is a *per thread* limit. There is no way to set a global" ]# [ doc =  " limit. In particular, if a regex is used from multiple threads" ]# [ doc =  " simultaneously, then each thread may use up to the number of bytes" ]# [ doc =  " specified here." ] pub  fn  dfa_size_limit (&  mut  self ,  limit :  usize , )-> &  mut  RegexSetBuilder { self .  0 .  dfa_size_limit =  limit ;  self }# [ doc =  " Set the nesting limit for this parser." ]# [ doc =  "" ]# [ doc =  " The nesting limit controls how deep the abstract syntax tree is allowed" ]# [ doc =  " to be. If the AST exceeds the given limit (e.g., with too many nested" ]# [ doc =  " groups), then an error is returned by the parser." ]# [ doc =  "" ]# [ doc =  " The purpose of this limit is to act as a heuristic to prevent stack" ]# [ doc =  " overflow for consumers that do structural induction on an `Ast` using" ]# [ doc =  " explicit recursion. While this [0m[1m[31mcrate[0m never does this (instead using" ]# [ doc =  " constant stack space and moving the call stack to the heap), other" ]# [ doc =  " [0m[1m[31mcrate[0ms may." ]# [ doc =  "" ]# [ doc =  " This limit is not checked until the entire Ast is parsed. Therefore," ]# [ doc =  " if callers want to put a limit on the amount of heap space used, then" ]# [ doc =  " they should impose a limit on the length, in bytes, of the concrete" ]# [ doc =  " pattern string. In particular, this is viable since this parser" ]# [ doc =  " implementation will limit itself to heap space proportional to the" ]# [ doc =  " length of the pattern string." ]# [ doc =  "" ]# [ doc =  " Note that a nest limit of `0` will return a nest limit error for most" ]# [ doc =  " patterns but not all. For example, a nest limit of `0` permits `a` but" ]# [ doc =  " not `ab`, since `ab` requires a concatenation, which results in a nest" ]# [ doc =  " depth of `1`. In general, a nest limit is not something that manifests" ]# [ doc =  " in an obvious way in the concrete syntax, therefore, it should not be" ]# [ doc =  " used in a granular way." ] pub  fn  nest_limit (&  mut  self ,  limit :  u32 , )-> &  mut  RegexSetBuilder { self .  0 .  nest_limit =  limit ;  self }}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m297[0m:[0m77[0m:macro_rules! __ra_macro_fixture296 {($name :  ident )=>{ impl $name { pub ( [0m[1m[31mcrate[0m ) fn  expand_tt (&  self ,  invocation : &  str )->  tt ::  Subtree { self .  try_expand_tt ( invocation ).  unwrap ()} fn  try_expand_tt (&  self ,  invocation : &  str )->  Result <  tt ::  Subtree ,  ExpandError > { let  source_file =  ast ::  SourceFile ::  parse ( invocation ).  tree ();  let  macro_invocation =  source_file .  syntax ().  descendants ().  find_map ( ast ::  MacroCall ::  cast ).  unwrap ();  let ( invocation_tt , _)=  ast_to_token_tree (&  macro_invocation .  token_tree ().  unwrap ()).  ok_or_else (||  ExpandError ::  ConversionError )?;  self .  rules .  expand (&  invocation_tt ).  result ()}# [ allow ( unused )] fn  assert_expand_err (&  self ,  invocation : &  str ,  err : &  ExpandError ){ assert_eq ! ( self .  try_expand_tt ( invocation ).  as_ref (),  Err ( err )); }# [ allow ( unused )] fn  expand_items (&  self ,  invocation : &  str )->  SyntaxNode { let  expanded =  self .  expand_tt ( invocation );  token_tree_to_syntax_node (&  expanded ,  FragmentKind ::  Items ).  unwrap ().  0 .  syntax_node ()}# [ allow ( unused )] fn  expand_statements (&  self ,  invocation : &  str )->  SyntaxNode { let  expanded =  self .  expand_tt ( invocation );  token_tree_to_syntax_node (&  expanded ,  FragmentKind ::  Statements ).  unwrap ().  0 .  syntax_node ()}# [ allow ( unused )] fn  expand_expr (&  self ,  invocation : &  str )->  SyntaxNode { let  expanded =  self .  expand_tt ( invocation );  token_tree_to_syntax_node (&  expanded ,  FragmentKind ::  Expr ).  unwrap ().  0 .  syntax_node ()}# [ allow ( unused )] fn  assert_expand_tt (&  self ,  invocation : &  str ,  expected : &  str ){ let  expansion =  self .  expand_tt ( invocation );  assert_eq ! ( expansion .  to_string (),  expected ); }# [ allow ( unused )] fn  assert_expand (&  self ,  invocation : &  str ,  expected : &  str ){ let  expansion =  self .  expand_tt ( invocation );  let  actual =  format ! ( "{:?}" ,  expansion );  test_utils ::  assert_eq_text ! (&  expected .  trim (), &  actual .  trim ()); } fn  assert_expand_items (&  self ,  invocation : &  str ,  expected : &  str )-> &$name { self .  assert_expansion ( FragmentKind ::  Items ,  invocation ,  expected );  self }# [ allow ( unused )] fn  assert_expand_statements (&  self ,  invocation : &  str ,  expected : &  str )-> &$name { self .  assert_expansion ( FragmentKind ::  Statements ,  invocation ,  expected );  self } fn  assert_expansion (&  self ,  kind :  FragmentKind ,  invocation : &  str ,  expected : &  str ){ let  expanded =  self .  expand_tt ( invocation );  assert_eq ! ( expanded .  to_string (),  expected );  let  expected =  expected .  replace ( "$[0m[1m[31mcrate[0m" ,  "C_C__C" );  let  expected = { let  wrapped =  format ! ( "wrap_macro!( {} )" ,  expected );  let  wrapped =  ast ::  SourceFile ::  parse (&  wrapped );  let  wrapped =  wrapped .  tree ().  syntax ().  descendants ().  find_map ( ast ::  TokenTree ::  cast ).  unwrap ();  let  mut  wrapped =  ast_to_token_tree (&  wrapped ).  unwrap ().  0 ;  wrapped .  delimiter =  None ;  wrapped };  let  expanded_tree =  token_tree_to_syntax_node (&  expanded ,  kind ).  unwrap ().  0 .  syntax_node ();  let  expanded_tree =  debug_dump_ignore_spaces (&  expanded_tree ).  trim ().  to_string ();  let  expected_tree =  token_tree_to_syntax_node (&  expected ,  kind ).  unwrap ().  0 .  syntax_node ();  let  expected_tree =  debug_dump_ignore_spaces (&  expected_tree ).  trim ().  to_string ();  let  expected_tree =  expected_tree .  replace ( "C_C__C" ,  "$[0m[1m[31mcrate[0m" );  assert_eq ! ( expanded_tree ,  expected_tree ,  "\nleft:\n{}\nright:\n{}" ,  expanded_tree ,  expected_tree , ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m324[0m:[0m160[0m:macro_rules! __ra_macro_fixture323 {($BitFlags :  ident : $T :  ty {$($(# [$attr :  ident $($args :  tt )*])* $Flag :  ident = $value :  expr ; )+ })=>{ impl $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Debug  for $BitFlags { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Formatter )-> $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Result {# [ allow ( non_snake_case )] trait  __BitFlags {$(# [ inline ] fn $Flag (&  self )->  bool { false })+ } impl  __BitFlags  for $BitFlags {$(__impl_bitflags ! {# [ allow ( deprecated )]# [ inline ]$(? # [$attr $($args )*])*  fn $Flag (&  self )->  bool { if  Self ::$Flag .  bits ==  0 &&  self .  bits !=  0 { false } else { self .  bits &  Self ::$Flag .  bits ==  Self ::$Flag .  bits }}})+ } let  mut  first =  true ; $(if <$BitFlags  as  __BitFlags >::$Flag ( self ){ if !  first { f .  write_str ( " | " )?; } first =  false ;  f .  write_str ( __bitflags_stringify ! ($Flag ))?; })+  let  extra_bits =  self .  bits & !$BitFlags ::  all ().  bits ();  if  extra_bits !=  0 { if !  first { f .  write_str ( " | " )?; } first =  false ;  f .  write_str ( "0x" )?; $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  LowerHex ::  fmt (&  extra_bits ,  f )?; } if  first { f .  write_str ( "(empty)" )?; } Ok (())}} impl $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Binary  for $BitFlags { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Formatter )-> $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Result {$[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Binary ::  fmt (&  self .  bits ,  f )}} impl $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Octal  for $BitFlags { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Formatter )-> $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Result {$[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Octal ::  fmt (&  self .  bits ,  f )}} impl $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  LowerHex  for $BitFlags { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Formatter )-> $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Result {$[0m[1m[31mcrate[0m ::  _core ::  fmt ::  LowerHex ::  fmt (&  self .  bits ,  f )}} impl $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  UpperHex  for $BitFlags { fn  fmt (&  self ,  f : &  mut $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Formatter )-> $[0m[1m[31mcrate[0m ::  _core ::  fmt ::  Result {$[0m[1m[31mcrate[0m ::  _core ::  fmt ::  UpperHex ::  fmt (&  self .  bits ,  f )}}# [ allow ( dead_code )] impl $BitFlags {$($(# [$attr $($args )*])*  pub  const $Flag : $BitFlags = $BitFlags { bits : $value }; )+  __fn_bitflags ! {# [ doc =  " Returns an empty set of flags" ]# [ inline ] pub  const  fn  empty ()-> $BitFlags {$BitFlags { bits :  0 }}} __fn_bitflags ! {# [ doc =  " Returns the set containing all flags." ]# [ inline ] pub  const  fn  all ()-> $BitFlags {# [ allow ( non_snake_case )] trait  __BitFlags {$(const $Flag : $T =  0 ; )+ } impl  __BitFlags  for $BitFlags {$(__impl_bitflags ! {# [ allow ( deprecated )]$(? # [$attr $($args )*])*  const $Flag : $T =  Self ::$Flag .  bits ; })+ }$BitFlags { bits : $(<$BitFlags  as  __BitFlags >::$Flag )|+ }}} __fn_bitflags ! {# [ doc =  " Returns the raw value of the flags currently stored." ]# [ inline ] pub  const  fn  bits (&  self )-> $T { self .  bits }}# [ doc =  " Convert from underlying bit representation, unless that" ]# [ doc =  " representation contains bits that do not correspond to a flag." ]# [ inline ] pub  fn  from_bits ( bits : $T )-> $[0m[1m[31mcrate[0m ::  _core ::  option ::  Option <$BitFlags > { if ( bits & !$BitFlags ::  all ().  bits ())==  0 {$[0m[1m[31mcrate[0m ::  _core ::  option ::  Option ::  Some ($BitFlags { bits })} else {$[0m[1m[31mcrate[0m ::  _core ::  option ::  Option ::  None }} __fn_bitflags ! {# [ doc =  " Convert from underlying bit representation, dropping any bits" ]# [ doc =  " that do not correspond to flags." ]# [ inline ] pub  const  fn  from_bits_truncate ( bits : $T )-> $BitFlags {$BitFlags { bits :  bits & $BitFlags ::  all ().  bits }}} __fn_bitflags ! {# [ doc =  " Convert from underlying bit representation, preserving all" ]# [ doc =  " bits (even those not corresponding to a defined flag)." ]# [ inline ] pub  const  unsafe  fn  from_bits_unchecked ( bits : $T )-> $BitFlags {$BitFlags { bits }}} __fn_bitflags ! {# [ doc =  " Returns `true` if no flags are currently stored." ]# [ inline ] pub  const  fn  is_empty (&  self )->  bool { self .  bits ()== $BitFlags ::  empty ().  bits ()}} __fn_bitflags ! {# [ doc =  " Returns `true` if all flags are currently set." ]# [ inline ] pub  const  fn  is_all (&  self )->  bool { self .  bits == $BitFlags ::  all ().  bits }} __fn_bitflags ! {# [ doc =  " Returns `true` if there are flags common to both `self` and `other`." ]# [ inline ] pub  const  fn  intersects (&  self ,  other : $BitFlags )->  bool {!$BitFlags { bits :  self .  bits &  other .  bits }.  is_empty ()}} __fn_bitflags ! {# [ doc =  " Returns `true` all of the flags in `other` are contained within `self`." ]# [ inline ] pub  const  fn  contains (&  self ,  other : $BitFlags )->  bool {( self .  bits &  other .  bits )==  other .  bits }}# [ doc =  " Inserts the specified flags in-place." ]# [ inline ] pub  fn  insert (&  mut  self ,  other : $BitFlags ){ self .  bits |=  other .  bits ; }# [ doc =  " Removes the specified flags in-place." ]# [ inline ] pub  fn  remove (&  mut  self ,  other : $BitFlags ){ self .  bits &= !  other .  bits ; }# [ doc =  " Toggles the specified flags in-place." ]# [ inline ] pub  fn  toggle (&  mut  self ,  other : $BitFlags ){ self .  bits ^=  other .  bits ; }# [ doc =  " Inserts or removes the specified flags depending on the passed value." ]# [ inline ] pub  fn  set (&  mut  self ,  other : $BitFlags ,  value :  bool ){ if  value { self .  insert ( other ); } else { self .  remove ( other ); }}} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitOr  for $BitFlags { type  Output = $BitFlags ; # [ doc =  " Returns the union of the two sets of flags." ]# [ inline ] fn  bitor ( self ,  other : $BitFlags )-> $BitFlags {$BitFlags { bits :  self .  bits |  other .  bits }}} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitOrAssign  for $BitFlags {# [ doc =  " Adds the set of flags." ]# [ inline ] fn  bitor_assign (&  mut  self ,  other : $BitFlags ){ self .  bits |=  other .  bits ; }} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitXor  for $BitFlags { type  Output = $BitFlags ; # [ doc =  " Returns the left flags, but with all the right flags toggled." ]# [ inline ] fn  bitxor ( self ,  other : $BitFlags )-> $BitFlags {$BitFlags { bits :  self .  bits ^  other .  bits }}} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitXorAssign  for $BitFlags {# [ doc =  " Toggles the set of flags." ]# [ inline ] fn  bitxor_assign (&  mut  self ,  other : $BitFlags ){ self .  bits ^=  other .  bits ; }} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitAnd  for $BitFlags { type  Output = $BitFlags ; # [ doc =  " Returns the intersection between the two sets of flags." ]# [ inline ] fn  bitand ( self ,  other : $BitFlags )-> $BitFlags {$BitFlags { bits :  self .  bits &  other .  bits }}} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  BitAndAssign  for $BitFlags {# [ doc =  " Disables all flags disabled in the set." ]# [ inline ] fn  bitand_assign (&  mut  self ,  other : $BitFlags ){ self .  bits &=  other .  bits ; }} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  Sub  for $BitFlags { type  Output = $BitFlags ; # [ doc =  " Returns the set difference of the two sets of flags." ]# [ inline ] fn  sub ( self ,  other : $BitFlags )-> $BitFlags {$BitFlags { bits :  self .  bits & !  other .  bits }}} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  SubAssign  for $BitFlags {# [ doc =  " Disables all flags enabled in the set." ]# [ inline ] fn  sub_assign (&  mut  self ,  other : $BitFlags ){ self .  bits &= !  other .  bits ; }} impl $[0m[1m[31mcrate[0m ::  _core ::  ops ::  Not  for $BitFlags { type  Output = $BitFlags ; # [ doc =  " Returns the complement of this set of flags." ]# [ inline ] fn  not ( self )-> $BitFlags {$BitFlags { bits : !  self .  bits }& $BitFlags ::  all ()}} impl $[0m[1m[31mcrate[0m ::  _core ::  iter ::  Extend <$BitFlags >  for $BitFlags { fn  extend <  T : $[0m[1m[31mcrate[0m ::  _core ::  iter ::  IntoIterator <  Item =$BitFlags >> (&  mut  self ,  iterator :  T ){ for  item  in  iterator { self .  insert ( item )}}} impl $[0m[1m[31mcrate[0m ::  _core ::  iter ::  FromIterator <$BitFlags >  for $BitFlags { fn  from_iter <  T : $[0m[1m[31mcrate[0m ::  _core ::  iter ::  IntoIterator <  Item =$BitFlags >> ( iterator :  T )-> $BitFlags { let  mut  result =  Self ::  empty ();  result .  extend ( iterator );  result }}}; ($(# [$filtered :  meta ])* ? # [ cfg $($cfgargs :  tt )*]$(? # [$rest :  ident $($restargs :  tt )*])*  fn $($item :  tt )* )=>{ __impl_bitflags ! {$(# [$filtered ])* # [ cfg $($cfgargs )*]$(? # [$rest $($restargs )*])*  fn $($item )* }}; ($(# [$filtered :  meta ])* ? # [$next :  ident $($nextargs :  tt )*]$(? # [$rest :  ident $($restargs :  tt )*])*  fn $($item :  tt )* )=>{ __impl_bitflags ! {$(# [$filtered ])* $(? # [$rest $($restargs )*])*  fn $($item )* }}; ($(# [$filtered :  meta ])*  fn $($item :  tt )* )=>{$(# [$filtered ])*  fn $($item )* }; ($(# [$filtered :  meta ])* ? # [ cfg $($cfgargs :  tt )*]$(? # [$rest :  ident $($restargs :  tt )*])*  const $($item :  tt )* )=>{ __impl_bitflags ! {$(# [$filtered ])* # [ cfg $($cfgargs )*]$(? # [$rest $($restargs )*])*  const $($item )* }}; ($(# [$filtered :  meta ])* ? # [$next :  ident $($nextargs :  tt )*]$(? # [$rest :  ident $($restargs :  tt )*])*  const $($item :  tt )* )=>{ __impl_bitflags ! {$(# [$filtered ])* $(? # [$rest $($restargs )*])*  const $($item )* }}; ($(# [$filtered :  meta ])*  const $($item :  tt )* )=>{$(# [$filtered ])*  const $($item )* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m347[0m:[0m64[0m:macro_rules! __ra_macro_fixture346 {($name :  ident )=>{ impl $[0m[1m[31mcrate[0m ::  salsa ::  InternKey  for $name { fn  from_intern_id ( v : $[0m[1m[31mcrate[0m ::  salsa ::  InternId )->  Self {$name ( v )} fn  as_intern_id (&  self )-> $[0m[1m[31mcrate[0m ::  salsa ::  InternId { self .  0 }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m353[0m:[0m247[0m:macro_rules! __ra_macro_fixture352 {([$derives :  ident $($derive_t :  tt )*]=>$(# [$($attrs :  tt )*])* $inner :  path )=>{# [ proc_macro_derive ($derives $($derive_t )*)]# [ allow ( non_snake_case )]$(# [$($attrs )*])*  pub  fn $derives ( i : $[0m[1m[31mcrate[0m ::  macros ::  TokenStream )-> $[0m[1m[31mcrate[0m ::  macros ::  TokenStream { match $[0m[1m[31mcrate[0m ::  macros ::  parse ::<$[0m[1m[31mcrate[0m ::  macros ::  DeriveInput > ( i ){ Ok ( p )=>{ match $[0m[1m[31mcrate[0m ::  Structure ::  try_new (&  p ){ Ok ( s )=>$[0m[1m[31mcrate[0m ::  MacroResult ::  into_stream ($inner ( s )),  Err ( e )=> e .  to_compile_error ().  into (), }} Err ( e )=> e .  to_compile_error ().  into (), }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m356[0m:[0m77[0m:macro_rules! __ra_macro_fixture355 {($t :  ty )=>{ impl <  I :  Interner > $[0m[1m[31mcrate[0m ::  fold ::  Fold <  I >  for $t { type  Result =  Self ;  fn  fold_with < 'i > ( self ,  _folder : &  mut  dyn ($[0m[1m[31mcrate[0m ::  fold ::  Folder < 'i ,  I >),  _outer_binder :  DebruijnIndex , )-> ::  chalk_ir ::  Fallible <  Self ::  Result >  where  I : 'i , { Ok ( self )}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m357[0m:[0m80[0m:macro_rules! __ra_macro_fixture356 {($t :  ident )=>{ impl <  I :  Interner > $[0m[1m[31mcrate[0m ::  fold ::  Fold <  I >  for $t <  I > { type  Result = $t <  I >;  fn  fold_with < 'i > ( self ,  _folder : &  mut  dyn ($[0m[1m[31mcrate[0m ::  fold ::  Folder < 'i ,  I >),  _outer_binder :  DebruijnIndex , )-> ::  chalk_ir ::  Fallible <  Self ::  Result >  where  I : 'i , { Ok ( self )}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m359[0m:[0m77[0m:macro_rules! __ra_macro_fixture358 {($t :  ty )=>{ impl <  I :  Interner > $[0m[1m[31mcrate[0m ::  visit ::  Visit <  I >  for $t { fn  visit_with < 'i ,  B > (&  self ,  _visitor : &  mut  dyn ($[0m[1m[31mcrate[0m ::  visit ::  Visitor < 'i ,  I ,  BreakTy =  B >),  _outer_binder :  DebruijnIndex , )->  ControlFlow <  B >  where  I : 'i , { ControlFlow ::  CONTINUE }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m360[0m:[0m80[0m:macro_rules! __ra_macro_fixture359 {($t :  ident )=>{ impl <  I :  Interner > $[0m[1m[31mcrate[0m ::  visit ::  Visit <  I >  for $t <  I > { fn  visit_with < 'i ,  B > (&  self ,  _visitor : &  mut  dyn ($[0m[1m[31mcrate[0m ::  visit ::  Visitor < 'i ,  I ,  BreakTy =  B >),  _outer_binder :  DebruijnIndex , )->  ControlFlow <  B >  where  I : 'i , { ControlFlow ::  CONTINUE }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m365[0m:[0m151[0m:macro_rules! __ra_macro_fixture364 {($(# [$attrs :  meta ])* $vis :  vis  static $name :  ident : $ty :  ty )=>($(# [$attrs ])* $vis  static $name : $[0m[1m[31mcrate[0m ::  ScopedKey <$ty > = $[0m[1m[31mcrate[0m ::  ScopedKey { inner : { thread_local ! ( static  FOO : ::  std ::  cell ::  Cell <  usize > = {::  std ::  cell ::  Cell ::  new ( 0 )}); &  FOO },  _marker : ::  std ::  marker ::  PhantomData , }; )}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m377[0m:[0m995[0m:macro_rules! __ra_macro_fixture376 {('owned : $($oty :  ident ,)* 'interned : $($ity :  ident ,)* )=>{# [ repr ( C )]# [ allow ( non_snake_case )] pub  struct  HandleCounters {$($oty :  AtomicUsize ,)* $($ity :  AtomicUsize ,)* } impl  HandleCounters { extern  "C"  fn  get ()-> & 'static  Self { static  COUNTERS :  HandleCounters =  HandleCounters {$($oty :  AtomicUsize ::  new ( 1 ),)* $($ity :  AtomicUsize ::  new ( 1 ),)* }; &  COUNTERS }}# [ repr ( C )]# [ allow ( non_snake_case )] pub ( super ) struct  HandleStore <  S :  server ::  Types > {$($oty :  handle ::  OwnedStore <  S ::$oty >,)* $($ity :  handle ::  InternedStore <  S ::$ity >,)* } impl <  S :  server ::  Types >  HandleStore <  S > { pub ( super ) fn  new ( handle_counters : & 'static  HandleCounters )->  Self { HandleStore {$($oty :  handle ::  OwnedStore ::  new (&  handle_counters .$oty ),)* $($ity :  handle ::  InternedStore ::  new (&  handle_counters .$ity ),)* }}}$(# [ repr ( C )] pub  struct $oty ( pub ( [0m[1m[31mcrate[0m ) handle ::  Handle );  impl  Drop  for $oty { fn  drop (&  mut  self ){$oty ( self .  0 ).  drop (); }} impl <  S >  Encode <  S >  for $oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ let  handle =  self .  0 ;  mem ::  forget ( self );  handle .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  DecodeMut < '_ , '_ ,  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>)->  Self { s .$oty .  take ( handle ::  Handle ::  decode ( r , &  mut ()))}} impl <  S >  Encode <  S >  for &$oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl < 's ,  S :  server ::  Types ,>  Decode < '_ , 's ,  HandleStore <  server ::  MarkedTypes <  S >>>  for & 's  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : & 's  HandleStore <  server ::  MarkedTypes <  S >>)->  Self {&  s .$oty [ handle ::  Handle ::  decode ( r , &  mut ())]}} impl <  S >  Encode <  S >  for &  mut $oty { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl < 's ,  S :  server ::  Types >  DecodeMut < '_ , 's ,  HandleStore <  server ::  MarkedTypes <  S >>>  for & 's  mut  Marked <  S ::$oty , $oty > { fn  decode ( r : &  mut  Reader < '_ >,  s : & 's  mut  HandleStore <  server ::  MarkedTypes <  S >> )->  Self {&  mut  s .$oty [ handle ::  Handle ::  decode ( r , &  mut ())]}} impl <  S :  server ::  Types >  Encode <  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$oty , $oty > { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>){ s .$oty .  alloc ( self ).  encode ( w ,  s ); }} impl <  S >  DecodeMut < '_ , '_ ,  S >  for $oty { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  S )->  Self {$oty ( handle ::  Handle ::  decode ( r ,  s ))}})* $(# [ repr ( C )]# [ derive ( Copy ,  Clone ,  PartialEq ,  Eq ,  Hash )] pub ( [0m[1m[31mcrate[0m ) struct $ity ( handle ::  Handle );  impl <  S >  Encode <  S >  for $ity { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  S ){ self .  0 .  encode ( w ,  s ); }} impl <  S :  server ::  Types >  DecodeMut < '_ , '_ ,  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$ity , $ity > { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>)->  Self { s .$ity .  copy ( handle ::  Handle ::  decode ( r , &  mut ()))}} impl <  S :  server ::  Types >  Encode <  HandleStore <  server ::  MarkedTypes <  S >>>  for  Marked <  S ::$ity , $ity > { fn  encode ( self ,  w : &  mut  Writer ,  s : &  mut  HandleStore <  server ::  MarkedTypes <  S >>){ s .$ity .  alloc ( self ).  encode ( w ,  s ); }} impl <  S >  DecodeMut < '_ , '_ ,  S >  for $ity { fn  decode ( r : &  mut  Reader < '_ >,  s : &  mut  S )->  Self {$ity ( handle ::  Handle ::  decode ( r ,  s ))}})* }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m381[0m:[0m203[0m:macro_rules! __ra_macro_fixture380 {($($name :  ident {$(fn $method :  ident ($($arg :  ident : $arg_ty :  ty ),* $(,)?)$(-> $ret_ty :  ty )*;)* }),* $(,)?)=>{$(impl $name {# [ allow ( unused )]$(pub ( [0m[1m[31mcrate[0m ) fn $method ($($arg : $arg_ty ),*)$(-> $ret_ty )* { panic ! ( "hello" ); })* })* }}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m386[0m:[0m99[0m:macro_rules! __ra_macro_fixture385 {($(($ident :  ident , $string :  literal )),*$(,)?)=>{$(pub ( [0m[1m[31mcrate[0m ) const $ident :  SemanticTokenType =  SemanticTokenType ::  new ($string );)*  pub ( [0m[1m[31mcrate[0m ) const  SUPPORTED_TYPES : & [ SemanticTokenType ]= & [ SemanticTokenType ::  COMMENT ,  SemanticTokenType ::  KEYWORD ,  SemanticTokenType ::  STRING ,  SemanticTokenType ::  NUMBER ,  SemanticTokenType ::  REGEXP ,  SemanticTokenType ::  OPERATOR ,  SemanticTokenType ::  NAMESPACE ,  SemanticTokenType ::  TYPE ,  SemanticTokenType ::  STRUCT ,  SemanticTokenType ::  CLASS ,  SemanticTokenType ::  INTERFACE ,  SemanticTokenType ::  ENUM ,  SemanticTokenType ::  ENUM_MEMBER ,  SemanticTokenType ::  TYPE_PARAMETER ,  SemanticTokenType ::  FUNCTION ,  SemanticTokenType ::  METHOD ,  SemanticTokenType ::  PROPERTY ,  SemanticTokenType ::  MACRO ,  SemanticTokenType ::  VARIABLE ,  SemanticTokenType ::  PARAMETER , $($ident ),* ]; }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m387[0m:[0m99[0m:macro_rules! __ra_macro_fixture386 {($(($ident :  ident , $string :  literal )),*$(,)?)=>{$(pub ( [0m[1m[31mcrate[0m ) const $ident :  SemanticTokenModifier =  SemanticTokenModifier ::  new ($string );)*  pub ( [0m[1m[31mcrate[0m ) const  SUPPORTED_MODIFIERS : & [ SemanticTokenModifier ]= & [ SemanticTokenModifier ::  DOCUMENTATION ,  SemanticTokenModifier ::  DECLARATION ,  SemanticTokenModifier ::  DEFINITION ,  SemanticTokenModifier ::  STATIC ,  SemanticTokenModifier ::  ABSTRACT ,  SemanticTokenModifier ::  DEPRECATED ,  SemanticTokenModifier ::  READONLY , $($ident ),* ]; }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m396[0m:[0m296[0m:macro_rules! __ra_macro_fixture395 {($I :  ident , $U :  ident )=>{ mod $I { mod  ceil { use  num_integer ::  Average ; # [ test ] fn  same_sign (){ assert_eq ! (( 14  as $I ).  average_ceil (&  16 ),  15  as $I );  assert_eq ! (( 14  as $I ).  average_ceil (&  17 ),  16  as $I );  let  max = $[0m[1m[31mcrate[0m ::  std ::$I ::  MAX ;  assert_eq ! (( max -  3 ).  average_ceil (& ( max -  1 )),  max -  2 );  assert_eq ! (( max -  3 ).  average_ceil (& ( max -  2 )),  max -  2 ); }# [ test ] fn  different_sign (){ assert_eq ! (( 14  as $I ).  average_ceil (&-  4 ),  5  as $I );  assert_eq ! (( 14  as $I ).  average_ceil (&-  5 ),  5  as $I );  let  min = $[0m[1m[31mcrate[0m ::  std ::$I ::  MIN ;  let  max = $[0m[1m[31mcrate[0m ::  std ::$I ::  MAX ;  assert_eq ! ( min .  average_ceil (&  max ),  0  as $I ); }} mod  floor { use  num_integer ::  Average ; # [ test ] fn  same_sign (){ assert_eq ! (( 14  as $I ).  average_floor (&  16 ),  15  as $I );  assert_eq ! (( 14  as $I ).  average_floor (&  17 ),  15  as $I );  let  max = $[0m[1m[31mcrate[0m ::  std ::$I ::  MAX ;  assert_eq ! (( max -  3 ).  average_floor (& ( max -  1 )),  max -  2 );  assert_eq ! (( max -  3 ).  average_floor (& ( max -  2 )),  max -  3 ); }# [ test ] fn  different_sign (){ assert_eq ! (( 14  as $I ).  average_floor (&-  4 ),  5  as $I );  assert_eq ! (( 14  as $I ).  average_floor (&-  5 ),  4  as $I );  let  min = $[0m[1m[31mcrate[0m ::  std ::$I ::  MIN ;  let  max = $[0m[1m[31mcrate[0m ::  std ::$I ::  MAX ;  assert_eq ! ( min .  average_floor (&  max ), -  1  as $I ); }}} mod $U { mod  ceil { use  num_integer ::  Average ; # [ test ] fn  bounded (){ assert_eq ! (( 14  as $U ).  average_ceil (&  16 ),  15  as $U );  assert_eq ! (( 14  as $U ).  average_ceil (&  17 ),  16  as $U ); }# [ test ] fn  overflow (){ let  max = $[0m[1m[31mcrate[0m ::  std ::$U ::  MAX ;  assert_eq ! (( max -  3 ).  average_ceil (& ( max -  1 )),  max -  2 );  assert_eq ! (( max -  3 ).  average_ceil (& ( max -  2 )),  max -  2 ); }} mod  floor { use  num_integer ::  Average ; # [ test ] fn  bounded (){ assert_eq ! (( 14  as $U ).  average_floor (&  16 ),  15  as $U );  assert_eq ! (( 14  as $U ).  average_floor (&  17 ),  15  as $U ); }# [ test ] fn  overflow (){ let  max = $[0m[1m[31mcrate[0m ::  std ::$U ::  MAX ;  assert_eq ! (( max -  3 ).  average_floor (& ( max -  1 )),  max -  2 );  assert_eq ! (( max -  3 ).  average_floor (& ( max -  2 )),  max -  3 ); }}}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m403[0m:[0m69[0m:macro_rules! __ra_macro_fixture402 {($T :  ident )=>{ mod $T { use  [0m[1m[31mcrate[0m :: { run_bench ,  GcdOld };  use  num_integer ::  Integer ;  use  test ::  Bencher ; # [ bench ] fn  bench_gcd ( b : &  mut  Bencher ){ run_bench ( b , $T ::  gcd ); }# [ bench ] fn  bench_gcd_old ( b : &  mut  Bencher ){ run_bench ( b , $T ::  gcd_old ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m413[0m:[0m71[0m:macro_rules! __ra_macro_fixture412 {($($arg :  tt )*)=>{{ let  res = $[0m[1m[31mcrate[0m ::  fmt ::  format ($[0m[1m[31mcrate[0m ::  __export ::  format_args ! ($($arg )*));  res }}}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m414[0m:[0m92[0m:macro_rules! __ra_macro_fixture413 {($dst :  expr , $($arg :  tt )*)=>($dst .  write_fmt ($[0m[1m[31mcrate[0m ::  format_args ! ($($arg )*)))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m415[0m:[0m61[0m:macro_rules! __ra_macro_fixture414 {($dst :  expr $(,)?)=>($[0m[1m[31mcrate[0m ::  write ! ($dst ,  "\n" )); ($dst :  expr , $($arg :  tt )*)=>($dst .  write_fmt ($[0m[1m[31mcrate[0m ::  format_args_nl ! ($($arg )*))); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m422[0m:[0m189[0m:macro_rules! __ra_macro_fixture421 {($func :  ident <$l :  tt , $v :  ident > ($($arg :  ident : $ty :  ty ),*))=>{# [ inline ] fn $func <$v > ( self , $($arg : $ty ,)*  visitor : $v )-> $[0m[1m[31mcrate[0m ::  __private ::  Result <$v ::  Value ,  Self ::  Error >  where $v : $[0m[1m[31mcrate[0m ::  de ::  Visitor <$l >, {$(let _ = $arg ; )*  self .  deserialize_any ( visitor )}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m440[0m:[0m43[0m:macro_rules! __ra_macro_fixture439 {()=>($[0m[1m[31mcrate[0m ::  vec ::  Vec ::  new ()); ($elem :  expr ; $n :  expr )=>($[0m[1m[31mcrate[0m ::  vec ::  from_elem ($elem , $n )); ($($x :  expr ),+ $(,)?)=>(< [_]>::  into_vec ( box [$($x ),+])); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m441[0m:[0m570[0m:macro_rules! __ra_macro_fixture440 {($left :  expr , $right :  expr $(,)?)=>({ match (&$left , &$right ){( left_val ,  right_val )=>{ if ! (*  left_val == *  right_val ){ panic ! ( r#"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`"# , &*  left_val , &*  right_val )}}}}); ($left :  expr , $right :  expr , $($arg :  tt )+)=>({ match (& ($left ), & ($right )){( left_val ,  right_val )=>{ if ! (*  left_val == *  right_val ){ panic ! ( r#"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`: {}"# , &*  left_val , &*  right_val , $[0m[1m[31mcrate[0m ::  format_args ! ($($arg )+))}}}}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m442[0m:[0m44[0m:macro_rules! __ra_macro_fixture441 {()=>({$[0m[1m[31mcrate[0m ::  panic ! ( "explicit panic" )}); ($msg :  expr $(,)?)=>({$[0m[1m[31mcrate[0m ::  rt ::  begin_panic ($msg )}); ($fmt :  expr , $($arg :  tt )+)=>({$[0m[1m[31mcrate[0m ::  rt ::  begin_panic_fmt (&$[0m[1m[31mcrate[0m ::  format_args ! ($fmt , $($arg )+))}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m455[0m:[0m79[0m:macro_rules! __ra_macro_fixture454 {()=>{ fn  __rayon_private__ (&  self )->  [0m[1m[31mcrate[0m ::  private ::  PrivateMarker { [0m[1m[31mcrate[0m ::  private ::  PrivateMarker }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m456[0m:[0m79[0m:macro_rules! __ra_macro_fixture455 {()=>{ fn  __rayon_private__ (&  self )->  [0m[1m[31mcrate[0m ::  private ::  PrivateMarker { [0m[1m[31mcrate[0m ::  private ::  PrivateMarker }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m459[0m:[0m159[0m:macro_rules! __ra_macro_fixture458 {()=>{# [ doc =  " This trait is private; this method exists to make it" ]# [ doc =  " impossible to implement outside the [0m[1m[31mcrate[0m." ]# [ doc ( hidden )] fn  __rayon_private__ (&  self )->  [0m[1m[31mcrate[0m ::  private ::  PrivateMarker ; }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m461[0m:[0m207[0m:macro_rules! __ra_macro_fixture460 {($ident :  ident )=>{# [ no_mangle ] static $ident :  std ::  sync ::  atomic ::  AtomicUsize =  std ::  sync ::  atomic ::  AtomicUsize ::  new ( 0 );  let  _checker = $[0m[1m[31mcrate[0m ::  mark ::  MarkChecker ::  new (&$ident ); }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m462[0m:[0m114[0m:macro_rules! __ra_macro_fixture461 {( target : $target :  expr , $($arg :  tt )+)=>( log ! ( target : $target , $[0m[1m[31mcrate[0m ::  Level ::  Debug , $($arg )+)); ($($arg :  tt )+)=>( log ! ($[0m[1m[31mcrate[0m ::  Level ::  Debug , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m463[0m:[0m43[0m:macro_rules! __ra_macro_fixture462 {()=>($[0m[1m[31mcrate[0m ::  eprint ! ( "\n" )); ($($arg :  tt )*)=>({$[0m[1m[31mcrate[0m ::  io ::  _eprint ($[0m[1m[31mcrate[0m ::  format_args_nl ! ($($arg )*)); })}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m464[0m:[0m114[0m:macro_rules! __ra_macro_fixture463 {( target : $target :  expr , $($arg :  tt )+)=>( log ! ( target : $target , $[0m[1m[31mcrate[0m ::  Level ::  Warn , $($arg )+)); ($($arg :  tt )+)=>( log ! ($[0m[1m[31mcrate[0m ::  Level ::  Warn , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m465[0m:[0m133[0m:macro_rules! __ra_macro_fixture464 {( target : $target :  expr , $lvl :  expr , $($arg :  tt )+)=>({ let  lvl = $lvl ;  if  lvl <= $[0m[1m[31mcrate[0m ::  STATIC_MAX_LEVEL &&  lvl <= $[0m[1m[31mcrate[0m ::  max_level (){$[0m[1m[31mcrate[0m ::  __private_api_log ( __log_format_args ! ($($arg )+),  lvl , & ($target ,  __log_module_path ! (),  __log_file ! (),  __log_line ! ()), ); }}); ($lvl :  expr , $($arg :  tt )+)=>( log ! ( target :  __log_module_path ! (), $lvl , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m470[0m:[0m392[0m:macro_rules! __ra_macro_fixture469 {($left :  expr , $right :  expr )=>{ assert_eq_text ! ($left , $right ,)}; ($left :  expr , $right :  expr , $($tt :  tt )*)=>{{ let  left = $left ;  let  right = $right ;  if  left !=  right { if  left .  trim ()==  right .  trim (){ std ::  eprintln ! ( "Left:\n{:?}\n\nRight:\n{:?}\n\nWhitespace difference\n" ,  left ,  right ); } else { let  diff = $[0m[1m[31mcrate[0m ::  __diff ( left ,  right );  std ::  eprintln ! ( "Left:\n{}\n\nRight:\n{}\n\nDiff:\n{}\n" ,  left ,  right , $[0m[1m[31mcrate[0m ::  format_diff ( diff )); } std ::  eprintln ! ($($tt )*);  panic ! ( "text differs" ); }}}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m471[0m:[0m58[0m:macro_rules! __ra_macro_fixture470 {($($arg :  tt )*)=>($[0m[1m[31mcrate[0m ::  io ::  _eprint ($[0m[1m[31mcrate[0m ::  format_args ! ($($arg )*))); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m472[0m:[0m562[0m:macro_rules! __ra_macro_fixture471 {($left :  expr , $right :  expr $(,)?)=>({ match (&$left , &$right ){( left_val ,  right_val )=>{ if *  left_val == *  right_val { panic ! ( r#"assertion failed: `(left != right)`\n  left: `{:?}`,\n right: `{:?}`"# , &*  left_val , &*  right_val )}}}}); ($left :  expr , $right :  expr , $($arg :  tt )+)=>({ match (& ($left ), & ($right )){( left_val ,  right_val )=>{ if *  left_val == *  right_val { panic ! ( r#"assertion failed: `(left != right)`\n  left: `{:?}`,\n right: `{:?}`: {}"# , &*  left_val , &*  right_val , $[0m[1m[31mcrate[0m ::  format_args ! ($($arg )+))}}}}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m473[0m:[0m62[0m:macro_rules! __ra_macro_fixture472 {[[$data :  literal ]]=>{$[0m[1m[31mcrate[0m ::  Expect { position : $[0m[1m[31mcrate[0m ::  Position { file :  file ! (),  line :  line ! (),  column :  column ! (), },  data : $data , }}; [[]]=>{$[0m[1m[31mcrate[0m ::  expect ! [[ "" ]]}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m474[0m:[0m49[0m:macro_rules! __ra_macro_fixture473 {( self )=>{$[0m[1m[31mcrate[0m ::  name ::  known ::  SELF_PARAM }; ( Self )=>{$[0m[1m[31mcrate[0m ::  name ::  known ::  SELF_TYPE }; ('static )=>{$[0m[1m[31mcrate[0m ::  name ::  known ::  STATIC_LIFETIME }; ($ident :  ident )=>{$[0m[1m[31mcrate[0m ::  name ::  known ::$ident }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m475[0m:[0m127[0m:macro_rules! __ra_macro_fixture474 {()=>({ panic ! ( "internal error: entered unreachable code" )}); ($msg :  expr $(,)?)=>({$[0m[1m[31mcrate[0m ::  unreachable ! ( "{}" , $msg )}); ($fmt :  expr , $($arg :  tt )*)=>({ panic ! ($[0m[1m[31mcrate[0m ::  concat ! ( "internal error: entered unreachable code: " , $fmt ), $($arg )*)}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m476[0m:[0m114[0m:macro_rules! __ra_macro_fixture475 {( target : $target :  expr , $($arg :  tt )+)=>( log ! ( target : $target , $[0m[1m[31mcrate[0m ::  Level ::  Error , $($arg )+)); ($($arg :  tt )+)=>( log ! ($[0m[1m[31mcrate[0m ::  Level ::  Error , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m477[0m:[0m114[0m:macro_rules! __ra_macro_fixture476 {( target : $target :  expr , $($arg :  tt )+)=>( log ! ( target : $target , $[0m[1m[31mcrate[0m ::  Level ::  Trace , $($arg )+)); ($($arg :  tt )+)=>( log ! ($[0m[1m[31mcrate[0m ::  Level ::  Trace , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m480[0m:[0m81[0m:macro_rules! __ra_macro_fixture479 {($start :  ident $(:: $seg :  ident )*)=>({$[0m[1m[31mcrate[0m ::  __known_path ! ($start $(:: $seg )*); $[0m[1m[31mcrate[0m ::  path ::  ModPath ::  from_segments ($[0m[1m[31mcrate[0m ::  path ::  PathKind ::  Abs ,  vec ! [$[0m[1m[31mcrate[0m ::  path ::  __name ! [$start ], $($[0m[1m[31mcrate[0m ::  path ::  __name ! [$seg ],)* ])}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m503[0m:[0m4104[0m:macro_rules! __ra_macro_fixture502 {(@  array [$($elems :  expr ,)*])=>{ json_internal_vec ! [$($elems ,)*]}; (@  array [$($elems :  expr ),*])=>{ json_internal_vec ! [$($elems ),*]}; (@  array [$($elems :  expr ,)*] null $($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ( null )]$($rest )*)}; (@  array [$($elems :  expr ,)*] true $($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ( true )]$($rest )*)}; (@  array [$($elems :  expr ,)*] false $($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ( false )]$($rest )*)}; (@  array [$($elems :  expr ,)*][$($array :  tt )*]$($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ([$($array )*])]$($rest )*)}; (@  array [$($elems :  expr ,)*]{$($map :  tt )*}$($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ({$($map )*})]$($rest )*)}; (@  array [$($elems :  expr ,)*]$next :  expr , $($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ($next ),]$($rest )*)}; (@  array [$($elems :  expr ,)*]$last :  expr )=>{ json_internal ! (@  array [$($elems ,)*  json_internal ! ($last )])}; (@  array [$($elems :  expr ),*], $($rest :  tt )*)=>{ json_internal ! (@  array [$($elems ,)*]$($rest )*)}; (@  array [$($elems :  expr ),*]$unexpected :  tt $($rest :  tt )*)=>{ json_unexpected ! ($unexpected )}; (@  object $object :  ident ()()())=>{}; (@  object $object :  ident [$($key :  tt )+]($value :  expr ), $($rest :  tt )*)=>{ let _ = $object .  insert (($($key )+).  into (), $value );  json_internal ! (@  object $object ()($($rest )*)($($rest )*)); }; (@  object $object :  ident [$($key :  tt )+]($value :  expr )$unexpected :  tt $($rest :  tt )*)=>{ json_unexpected ! ($unexpected ); }; (@  object $object :  ident [$($key :  tt )+]($value :  expr ))=>{ let _ = $object .  insert (($($key )+).  into (), $value ); }; (@  object $object :  ident ($($key :  tt )+)(:  null $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ( null ))$($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(:  true $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ( true ))$($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(:  false $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ( false ))$($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(: [$($array :  tt )*]$($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ([$($array )*]))$($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(: {$($map :  tt )*}$($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ({$($map )*}))$($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(: $value :  expr , $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ($value )), $($rest )*); }; (@  object $object :  ident ($($key :  tt )+)(: $value :  expr )$copy :  tt )=>{ json_internal ! (@  object $object [$($key )+]( json_internal ! ($value ))); }; (@  object $object :  ident ($($key :  tt )+)(:)$copy :  tt )=>{ json_internal ! (); }; (@  object $object :  ident ($($key :  tt )+)()$copy :  tt )=>{ json_internal ! (); }; (@  object $object :  ident ()(: $($rest :  tt )*)($colon :  tt $($copy :  tt )*))=>{ json_unexpected ! ($colon ); }; (@  object $object :  ident ($($key :  tt )*)(, $($rest :  tt )*)($comma :  tt $($copy :  tt )*))=>{ json_unexpected ! ($comma ); }; (@  object $object :  ident ()(($key :  expr ): $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object ($key )(: $($rest )*)(: $($rest )*)); }; (@  object $object :  ident ($($key :  tt )*)(: $($unexpected :  tt )+)$copy :  tt )=>{ json_expect_expr_comma ! ($($unexpected )+); }; (@  object $object :  ident ($($key :  tt )*)($tt :  tt $($rest :  tt )*)$copy :  tt )=>{ json_internal ! (@  object $object ($($key )* $tt )($($rest )*)($($rest )*)); }; ( null )=>{$[0m[1m[31mcrate[0m ::  Value ::  Null }; ( true )=>{$[0m[1m[31mcrate[0m ::  Value ::  Bool ( true )}; ( false )=>{$[0m[1m[31mcrate[0m ::  Value ::  Bool ( false )}; ([])=>{$[0m[1m[31mcrate[0m ::  Value ::  Array ( json_internal_vec ! [])}; ([$($tt :  tt )+ ])=>{$[0m[1m[31mcrate[0m ::  Value ::  Array ( json_internal ! (@  array []$($tt )+))}; ({})=>{$[0m[1m[31mcrate[0m ::  Value ::  Object ($[0m[1m[31mcrate[0m ::  Map ::  new ())}; ({$($tt :  tt )+ })=>{$[0m[1m[31mcrate[0m ::  Value ::  Object ({ let  mut  object = $[0m[1m[31mcrate[0m ::  Map ::  new ();  json_internal ! (@  object  object ()($($tt )+)($($tt )+));  object })}; ($other :  expr )=>{$[0m[1m[31mcrate[0m ::  to_value (&$other ).  unwrap ()}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m506[0m:[0m61[0m:macro_rules! __ra_macro_fixture505 {($($tokens :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! ($($tokens )* )}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m507[0m:[0m71[0m:macro_rules! __ra_macro_fixture506 {(@  list ()($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($head )*)()())}; (@  list ( default =>$($tail :  tt )*)($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ( default ()=>$($tail )*)($($head )*))}; (@  list ( default -> $($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "expected `=>` after `default` case, found `->`" )}; (@  list ( default $args :  tt -> $($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "expected `=>` after `default` case, found `->`" )}; (@  list ( recv ($($args :  tt )*)=>$($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "expected `->` after `recv` case, found `=>`" )}; (@  list ( send ($($args :  tt )*)=>$($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "expected `->` after `send` operation, found `=>`" )}; (@  list ($case :  ident $args :  tt -> $res :  tt -> $($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "expected `=>`, found `->`" )}; (@  list ($case :  ident $args :  tt $(-> $res :  pat )* =>$body :  block ; $($tail :  tt )*)($($head :  tt )*))=>{ compile_error ! ( "did you mean to put a comma instead of the semicolon after `}`?" )}; (@  list ($case :  ident ($($args :  tt )*)$(-> $res :  pat )* =>$body :  expr , $($tail :  tt )*)($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ($($tail )*)($($head )* $case ($($args )*)$(-> $res )* =>{$body },))}; (@  list ($case :  ident ($($args :  tt )*)$(-> $res :  pat )* =>$body :  block $($tail :  tt )*)($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ($($tail )*)($($head )* $case ($($args )*)$(-> $res )* =>{$body },))}; (@  list ($case :  ident ($($args :  tt )*)$(-> $res :  pat )* =>$body :  expr )($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ()($($head )* $case ($($args )*)$(-> $res )* =>{$body },))}; (@  list ($case :  ident ($($args :  tt )*)$(-> $res :  pat )* =>$body :  expr ,)($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ()($($head )* $case ($($args )*)$(-> $res )* =>{$body },))}; (@  list ($($tail :  tt )*)($($head :  tt )*))=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error1 $($tail )*)}; (@  list_error1  recv $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error2  recv $($tail )*)}; (@  list_error1  send $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error2  send $($tail )*)}; (@  list_error1  default $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error2  default $($tail )*)}; (@  list_error1 $t :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected one of `recv`, `send`, or `default`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  list_error1 $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error2 $($tail )*); }; (@  list_error2 $case :  ident )=>{ compile_error ! ( concat ! ( "missing argument list after `" ,  stringify ! ($case ),  "`" , ))}; (@  list_error2 $case :  ident =>$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "missing argument list after `" ,  stringify ! ($case ),  "`" , ))}; (@  list_error2 $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error3 $($tail )*)}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )*)=>{ compile_error ! ( concat ! ( "missing `=>` after `" ,  stringify ! ($case ),  "` case" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>)=>{ compile_error ! ( "expected expression after `=>`" )}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$body :  expr ; $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma instead of the semicolon after `" ,  stringify ! ($body ),  "`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* => recv ($($a :  tt )*)$($tail :  tt )*)=>{ compile_error ! ( "expected an expression after `=>`" )}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* => send ($($a :  tt )*)$($tail :  tt )*)=>{ compile_error ! ( "expected an expression after `=>`" )}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* => default ($($a :  tt )*)$($tail :  tt )*)=>{ compile_error ! ( "expected an expression after `=>`" )}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$f :  ident ($($a :  tt )*)$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma after `" ,  stringify ! ($f ),  "(" ,  stringify ! ($($a )*),  ")`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$f :  ident ! ($($a :  tt )*)$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma after `" ,  stringify ! ($f ),  "!(" ,  stringify ! ($($a )*),  ")`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$f :  ident ! [$($a :  tt )*]$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma after `" ,  stringify ! ($f ),  "![" ,  stringify ! ($($a )*),  "]`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$f :  ident ! {$($a :  tt )*}$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma after `" ,  stringify ! ($f ),  "!{" ,  stringify ! ($($a )*),  "}`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)$(-> $r :  pat )* =>$body :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "did you mean to put a comma after `" ,  stringify ! ($body ),  "`?" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)-> =>$($tail :  tt )*)=>{ compile_error ! ( "missing pattern after `->`" )}; (@  list_error3 $case :  ident ($($args :  tt )*)$t :  tt $(-> $r :  pat )* =>$($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected `->`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  list_error3 $case :  ident ($($args :  tt )*)-> $t :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected a pattern, found `" ,  stringify ! ($t ),  "`" , ))}; (@  list_error3  recv ($($args :  tt )*)$t :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected `->`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  list_error3  send ($($args :  tt )*)$t :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected `->`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  list_error3  recv $args :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected an argument list after `recv`, found `" ,  stringify ! ($args ),  "`" , ))}; (@  list_error3  send $args :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected an argument list after `send`, found `" ,  stringify ! ($args ),  "`" , ))}; (@  list_error3  default $args :  tt $($tail :  tt )*)=>{ compile_error ! ( concat ! ( "expected an argument list or `=>` after `default`, found `" ,  stringify ! ($args ),  "`" , ))}; (@  list_error3 $($tail :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list_error4 $($tail )*)}; (@  list_error4 $($tail :  tt )*)=>{ compile_error ! ( "invalid syntax" )}; (@  case ()$cases :  tt $default :  tt )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  init $cases $default )}; (@  case ( recv ($r :  expr )-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)($($cases )*  recv ($r )-> $res =>$body ,)$default )}; (@  case ( recv ($r :  expr ,)-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)($($cases )*  recv ($r )-> $res =>$body ,)$default )}; (@  case ( recv ($($args :  tt )*)-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{ compile_error ! ( concat ! ( "invalid argument list in `recv(" ,  stringify ! ($($args )*),  ")`" , ))}; (@  case ( recv $t :  tt $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{ compile_error ! ( concat ! ( "expected an argument list after `recv`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  case ( send ($s :  expr , $m :  expr )-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)($($cases )*  send ($s , $m )-> $res =>$body ,)$default )}; (@  case ( send ($s :  expr , $m :  expr ,)-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)($($cases )*  send ($s , $m )-> $res =>$body ,)$default )}; (@  case ( send ($($args :  tt )*)-> $res :  pat =>$body :  tt , $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{ compile_error ! ( concat ! ( "invalid argument list in `send(" ,  stringify ! ($($args )*),  ")`" , ))}; (@  case ( send $t :  tt $($tail :  tt )*)($($cases :  tt )*)$default :  tt )=>{ compile_error ! ( concat ! ( "expected an argument list after `send`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  case ( default ()=>$body :  tt , $($tail :  tt )*)$cases :  tt ())=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)$cases ( default ()=>$body ,))}; (@  case ( default ($timeout :  expr )=>$body :  tt , $($tail :  tt )*)$cases :  tt ())=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)$cases ( default ($timeout )=>$body ,))}; (@  case ( default ($timeout :  expr ,)=>$body :  tt , $($tail :  tt )*)$cases :  tt ())=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  case ($($tail )*)$cases ( default ($timeout )=>$body ,))}; (@  case ( default $($tail :  tt )*)$cases :  tt ($($def :  tt )+))=>{ compile_error ! ( "there can be only one `default` case in a `select!` block" )}; (@  case ( default ($($args :  tt )*)=>$body :  tt , $($tail :  tt )*)$cases :  tt $default :  tt )=>{ compile_error ! ( concat ! ( "invalid argument list in `default(" ,  stringify ! ($($args )*),  ")`" , ))}; (@  case ( default $t :  tt $($tail :  tt )*)$cases :  tt $default :  tt )=>{ compile_error ! ( concat ! ( "expected an argument list or `=>` after `default`, found `" ,  stringify ! ($t ),  "`" , ))}; (@  case ($case :  ident $($tail :  tt )*)$cases :  tt $default :  tt )=>{ compile_error ! ( concat ! ( "expected one of `recv`, `send`, or `default`, found `" ,  stringify ! ($case ),  "`" , ))}; (@  init ( recv ($r :  expr )-> $res :  pat =>$recv_body :  tt ,)( default ()=>$default_body :  tt ,))=>{{ match $r { ref  _r =>{ let  _r : &$[0m[1m[31mcrate[0m ::  Receiver <_> =  _r ;  match  _r .  try_recv (){::  std ::  result ::  Result ::  Err ($[0m[1m[31mcrate[0m ::  TryRecvError ::  Empty )=>{$default_body } _res =>{ let  _res =  _res .  map_err (|_| $[0m[1m[31mcrate[0m ::  RecvError );  let $res =  _res ; $recv_body }}}}}}; (@  init ( recv ($r :  expr )-> $res :  pat =>$body :  tt ,)())=>{{ match $r { ref  _r =>{ let  _r : &$[0m[1m[31mcrate[0m ::  Receiver <_> =  _r ;  let  _res =  _r .  recv ();  let $res =  _res ; $body }}}}; (@  init ( recv ($r :  expr )-> $res :  pat =>$recv_body :  tt ,)( default ($timeout :  expr )=>$default_body :  tt ,))=>{{ match $r { ref  _r =>{ let  _r : &$[0m[1m[31mcrate[0m ::  Receiver <_> =  _r ;  match  _r .  recv_timeout ($timeout ){::  std ::  result ::  Result ::  Err ($[0m[1m[31mcrate[0m ::  RecvTimeoutError ::  Timeout )=>{$default_body } _res =>{ let  _res =  _res .  map_err (|_| $[0m[1m[31mcrate[0m ::  RecvError );  let $res =  _res ; $recv_body }}}}}}; (@  init ($($cases :  tt )*)$default :  tt )=>{{ const  _LEN :  usize = $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  count ($($cases )*));  let  _handle : &$[0m[1m[31mcrate[0m ::  internal ::  SelectHandle = &$[0m[1m[31mcrate[0m ::  never ::< ()> (); # [ allow ( unused_mut )] let  mut  _sel = [( _handle ,  0 , ::  std ::  ptr ::  null ());  _LEN ]; $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  add  _sel ($($cases )*)$default (( 0usize  _oper0 )( 1usize  _oper1 )( 2usize  _oper2 )( 3usize  _oper3 )( 4usize  _oper4 )( 5usize  _oper5 )( 6usize  _oper6 )( 7usize  _oper7 )( 8usize  _oper8 )( 9usize  _oper9 )( 10usize  _oper10 )( 11usize  _oper11 )( 12usize  _oper12 )( 13usize  _oper13 )( 14usize  _oper14 )( 15usize  _oper15 )( 16usize  _oper16 )( 17usize  _oper17 )( 18usize  _oper18 )( 19usize  _oper19 )( 20usize  _oper20 )( 21usize  _oper21 )( 22usize  _oper22 )( 23usize  _oper23 )( 24usize  _oper24 )( 25usize  _oper25 )( 26usize  _oper26 )( 27usize  _oper27 )( 28usize  _oper28 )( 29usize  _oper29 )( 30usize  _oper30 )( 31usize  _oper31 ))())}}; (@  count ())=>{ 0 }; (@  count ($oper :  ident $args :  tt -> $res :  pat =>$body :  tt , $($cases :  tt )*))=>{ 1 + $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  count ($($cases )*))}; (@  add $sel :  ident ()()$labels :  tt $cases :  tt )=>{{ let  _oper : $[0m[1m[31mcrate[0m ::  SelectedOperation < '_ > = { let  _oper = $[0m[1m[31mcrate[0m ::  internal ::  select (&  mut $sel );  unsafe {::  std ::  mem ::  transmute ( _oper )}}; $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! {@  complete $sel  _oper $cases }}}; (@  add $sel :  ident ()( default ()=>$body :  tt ,)$labels :  tt $cases :  tt )=>{{ let  _oper : ::  std ::  option ::  Option <$[0m[1m[31mcrate[0m ::  SelectedOperation < '_ >> = { let  _oper = $[0m[1m[31mcrate[0m ::  internal ::  try_select (&  mut $sel );  unsafe {::  std ::  mem ::  transmute ( _oper )}};  match  _oper { None =>{{$sel }; $body } Some ( _oper )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! {@  complete $sel  _oper $cases }}}}}; (@  add $sel :  ident ()( default ($timeout :  expr )=>$body :  tt ,)$labels :  tt $cases :  tt )=>{{ let  _oper : ::  std ::  option ::  Option <$[0m[1m[31mcrate[0m ::  SelectedOperation < '_ >> = { let  _oper = $[0m[1m[31mcrate[0m ::  internal ::  select_timeout (&  mut $sel , $timeout );  unsafe {::  std ::  mem ::  transmute ( _oper )}};  match  _oper {::  std ::  option ::  Option ::  None =>{{$sel }; $body }::  std ::  option ::  Option ::  Some ( _oper )=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! {@  complete $sel  _oper $cases }}}}}; (@  add $sel :  ident $input :  tt $default :  tt ()$cases :  tt )=>{ compile_error ! ( "too many operations in a `select!` block" )}; (@  add $sel :  ident ( recv ($r :  expr )-> $res :  pat =>$body :  tt , $($tail :  tt )*)$default :  tt (($i :  tt $var :  ident )$($labels :  tt )*)($($cases :  tt )*))=>{{ match $r { ref  _r =>{ let $var : &$[0m[1m[31mcrate[0m ::  Receiver <_> =  unsafe { let  _r : &$[0m[1m[31mcrate[0m ::  Receiver <_> =  _r ;  unsafe  fn  unbind < 'a ,  T > ( x : &  T )-> & 'a  T {::  std ::  mem ::  transmute ( x )} unbind ( _r )}; $sel [$i ]= ($var , $i , $var  as *  const $[0m[1m[31mcrate[0m ::  Receiver <_>  as *  const  u8 ); $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  add $sel ($($tail )*)$default ($($labels )*)($($cases )* [$i ] recv ($var )-> $res =>$body ,))}}}}; (@  add $sel :  ident ( send ($s :  expr , $m :  expr )-> $res :  pat =>$body :  tt , $($tail :  tt )*)$default :  tt (($i :  tt $var :  ident )$($labels :  tt )*)($($cases :  tt )*))=>{{ match $s { ref  _s =>{ let $var : &$[0m[1m[31mcrate[0m ::  Sender <_> =  unsafe { let  _s : &$[0m[1m[31mcrate[0m ::  Sender <_> =  _s ;  unsafe  fn  unbind < 'a ,  T > ( x : &  T )-> & 'a  T {::  std ::  mem ::  transmute ( x )} unbind ( _s )}; $sel [$i ]= ($var , $i , $var  as *  const $[0m[1m[31mcrate[0m ::  Sender <_>  as *  const  u8 ); $[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  add $sel ($($tail )*)$default ($($labels )*)($($cases )* [$i ] send ($var , $m )-> $res =>$body ,))}}}}; (@  complete $sel :  ident $oper :  ident ([$i :  tt ] recv ($r :  ident )-> $res :  pat =>$body :  tt , $($tail :  tt )*))=>{{ if $oper .  index ()== $i { let  _res = $oper .  recv ($r ); {$sel };  let $res =  _res ; $body } else {$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! {@  complete $sel $oper ($($tail )*)}}}}; (@  complete $sel :  ident $oper :  ident ([$i :  tt ] send ($s :  ident , $m :  expr )-> $res :  pat =>$body :  tt , $($tail :  tt )*))=>{{ if $oper .  index ()== $i { let  _res = $oper .  send ($s , $m ); {$sel };  let $res =  _res ; $body } else {$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! {@  complete $sel $oper ($($tail )*)}}}}; (@  complete $sel :  ident $oper :  ident ())=>{{ unreachable ! ( "internal error in crossbeam-channel: invalid case" )}}; (@$($tokens :  tt )*)=>{ compile_error ! ( concat ! ( "internal error in crossbeam-channel: " ,  stringify ! (@$($tokens )*), ))}; ()=>{ compile_error ! ( "empty `select!` block" )}; ($($case :  ident $(($($args :  tt )*))* =>$body :  expr $(,)*)*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ($($case $(($($args )*))* =>{$body },)*)())}; ($($tokens :  tt )*)=>{$[0m[1m[31mcrate[0m ::  crossbeam_channel_internal ! (@  list ($($tokens )*)())}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m508[0m:[0m75[0m:macro_rules! __ra_macro_fixture507 {($($tokens :  tt )*)=>{ return  Err ( [0m[1m[31mcrate[0m ::  errors ::  error ! ($($tokens )*))}}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m509[0m:[0m56[0m:macro_rules! __ra_macro_fixture508 {($fmt :  expr )=>{$[0m[1m[31mcrate[0m ::  SsrError ::  new ( format ! ($fmt ))}; ($fmt :  expr , $($arg :  tt )+)=>{$[0m[1m[31mcrate[0m ::  SsrError ::  new ( format ! ($fmt , $($arg )+))}}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m510[0m:[0m44[0m:macro_rules! __ra_macro_fixture509 {[;]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SEMICOLON }; [,]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  COMMA }; [ '(' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  L_PAREN }; [ ')' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  R_PAREN }; [ '{' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  L_CURLY }; [ '}' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  R_CURLY }; [ '[' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  L_BRACK }; [ ']' ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  R_BRACK }; [<]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  L_ANGLE }; [>]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  R_ANGLE }; [@]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AT }; [#]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  POUND }; [~]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  TILDE }; [?]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  QUESTION }; [$]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DOLLAR }; [&]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AMP }; [|]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PIPE }; [+]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PLUS }; [*]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  STAR }; [/]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SLASH }; [^]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  CARET }; [%]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PERCENT }; [_]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  UNDERSCORE }; [.]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DOT }; [..]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DOT2 }; [...]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DOT3 }; [..=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DOT2EQ }; [:]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  COLON }; [::]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  COLON2 }; [=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  EQ }; [==]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  EQ2 }; [=>]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  FAT_ARROW }; [!]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  BANG }; [!=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  NEQ }; [-]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MINUS }; [->]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  THIN_ARROW }; [<=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  LTEQ }; [>=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  GTEQ }; [+=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PLUSEQ }; [-=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MINUSEQ }; [|=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PIPEEQ }; [&=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AMPEQ }; [^=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  CARETEQ }; [/=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SLASHEQ }; [*=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  STAREQ }; [%=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PERCENTEQ }; [&&]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AMP2 }; [||]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PIPE2 }; [<<]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SHL }; [>>]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SHR }; [<<=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SHLEQ }; [>>=]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SHREQ }; [ as ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AS_KW }; [ async ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  ASYNC_KW }; [ await ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AWAIT_KW }; [ box ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  BOX_KW }; [ break ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  BREAK_KW }; [ const ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  CONST_KW }; [ continue ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  CONTINUE_KW }; [ [0m[1m[31mcrate[0m ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  [0m[1m[31mCRATE[0m_KW }; [ dyn ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DYN_KW }; [ else ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  ELSE_KW }; [ enum ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  ENUM_KW }; [ extern ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  EXTERN_KW }; [ false ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  FALSE_KW }; [ fn ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  FN_KW }; [ for ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  FOR_KW }; [ if ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  IF_KW }; [ impl ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  IMPL_KW }; [ in ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  IN_KW }; [ let ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  LET_KW }; [ loop ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  LOOP_KW }; [ macro ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MACRO_KW }; [ match ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MATCH_KW }; [ mod ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MOD_KW }; [ move ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MOVE_KW }; [ mut ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MUT_KW }; [ pub ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  PUB_KW }; [ ref ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  REF_KW }; [ return ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  RETURN_KW }; [ self ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SELF_KW }; [ static ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  STATIC_KW }; [ struct ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  STRUCT_KW }; [ super ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SUPER_KW }; [ trait ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  TRAIT_KW }; [ true ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  TRUE_KW }; [ try ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  TRY_KW }; [ type ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  TYPE_KW }; [ unsafe ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  UNSAFE_KW }; [ use ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  USE_KW }; [ where ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  WHERE_KW }; [ while ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  WHILE_KW }; [ yield ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  YIELD_KW }; [ auto ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  AUTO_KW }; [ default ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  DEFAULT_KW }; [ existential ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  EXISTENTIAL_KW }; [ union ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  UNION_KW }; [ raw ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  RAW_KW }; [ macro_rules ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  MACRO_RULES_KW }; [ lifetime_ident ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  LIFETIME_IDENT }; [ ident ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  IDENT }; [ shebang ]=>{$[0m[1m[31mcrate[0m ::  SyntaxKind ::  SHEBANG }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m513[0m:[0m43[0m:macro_rules! __ra_macro_fixture512 {()=>($[0m[1m[31mcrate[0m ::  print ! ( "\n" )); ($($arg :  tt )*)=>({$[0m[1m[31mcrate[0m ::  io ::  _print ($[0m[1m[31mcrate[0m ::  format_args_nl ! ($($arg )*)); })}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m514[0m:[0m152[0m:macro_rules! __ra_macro_fixture513 {($cmd :  tt )=>{{# [ cfg ( trick_rust_analyzer_into_highlighting_interpolated_bits )] format_args ! ($cmd );  use $[0m[1m[31mcrate[0m ::  Cmd  as  __CMD ;  let  cmd : $[0m[1m[31mcrate[0m ::  Cmd = $[0m[1m[31mcrate[0m ::  __cmd ! ( __CMD $cmd );  cmd }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m517[0m:[0m131[0m:macro_rules! __ra_macro_fixture516 {()=>( panic ! ( "not implemented" )); ($($arg :  tt )+)=>( panic ! ( "not implemented: {}" , $[0m[1m[31mcrate[0m ::  format_args ! ($($arg )+))); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m518[0m:[0m72[0m:macro_rules! __ra_macro_fixture517 {($cond :  expr )=>{{ let  cond = !$[0m[1m[31mcrate[0m ::  always ! (!$cond );  cond }}; ($cond :  expr , $fmt :  literal $($arg :  tt )*)=>{{ let  cond = !$[0m[1m[31mcrate[0m ::  always ! (!$cond , $fmt $($arg )*);  cond }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m519[0m:[0m57[0m:macro_rules! __ra_macro_fixture518 {($cond :  expr )=>{$[0m[1m[31mcrate[0m ::  always ! ($cond ,  "assertion failed: {}" ,  stringify ! ($cond ))}; ($cond :  expr , $fmt :  literal $($arg :  tt )*)=>{{ let  cond = $cond ;  if  cfg ! ( debug_assertions )|| $[0m[1m[31mcrate[0m ::  __FORCE { assert ! ( cond , $fmt $($arg )*); } if !  cond {$[0m[1m[31mcrate[0m ::  __log_error ! ($fmt $($arg )*); } cond }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m520[0m:[0m72[0m:macro_rules! __ra_macro_fixture519 {($msg :  literal $(,)?)=>{ return $[0m[1m[31mcrate[0m ::  private ::  Err ($[0m[1m[31mcrate[0m ::  anyhow ! ($msg ))}; ($err :  expr $(,)?)=>{ return $[0m[1m[31mcrate[0m ::  private ::  Err ($[0m[1m[31mcrate[0m ::  anyhow ! ($err ))}; ($fmt :  expr , $($arg :  tt )*)=>{ return $[0m[1m[31mcrate[0m ::  private ::  Err ($[0m[1m[31mcrate[0m ::  anyhow ! ($fmt , $($arg )*))}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m521[0m:[0m64[0m:macro_rules! __ra_macro_fixture520 {($msg :  literal $(,)?)=>{$[0m[1m[31mcrate[0m ::  private ::  new_adhoc ($msg )}; ($err :  expr $(,)?)=>({ use $[0m[1m[31mcrate[0m ::  private ::  kind ::*;  match $err { error =>(&  error ).  anyhow_kind ().  new ( error ), }}); ($fmt :  expr , $($arg :  tt )*)=>{$[0m[1m[31mcrate[0m ::  private ::  new_adhoc ( format ! ($fmt , $($arg )*))}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m522[0m:[0m114[0m:macro_rules! __ra_macro_fixture521 {( target : $target :  expr , $($arg :  tt )+)=>( log ! ( target : $target , $[0m[1m[31mcrate[0m ::  Level ::  Info , $($arg )+)); ($($arg :  tt )+)=>( log ! ($[0m[1m[31mcrate[0m ::  Level ::  Info , $($arg )+))}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m524[0m:[0m57[0m:macro_rules! __ra_macro_fixture523 {[$path :  expr ]=>{$[0m[1m[31mcrate[0m ::  ExpectFile { path :  std ::  path ::  PathBuf ::  from ($path ),  position :  file ! (), }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m528[0m:[0m58[0m:macro_rules! __ra_macro_fixture527 {($($arg :  tt )*)=>($[0m[1m[31mcrate[0m ::  io ::  _print ($[0m[1m[31mcrate[0m ::  format_args ! ($($arg )*))); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m530[0m:[0m58[0m:macro_rules! __ra_macro_fixture529 {($($tt :  tt )* )=>{$[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_subtree ($[0m[1m[31mcrate[0m ::  __quote ! ($($tt )*))}}
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m531[0m:[0m149[0m:macro_rules! __ra_macro_fixture530 {()=>{ Vec ::<  tt ::  TokenTree >::  new ()}; (@  SUBTREE $delim :  ident $($tt :  tt )* )=>{{ let  children = $[0m[1m[31mcrate[0m ::  __quote ! ($($tt )*);  tt ::  Subtree { delimiter :  Some ( tt ::  Delimiter { kind :  tt ::  DelimiterKind ::$delim ,  id :  tt ::  TokenId ::  unspecified (), }),  token_trees : $[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_tokens ( children ), }}}; (@  PUNCT $first :  literal )=>{{ vec ! [ tt ::  Leaf ::  Punct ( tt ::  Punct { char : $first ,  spacing :  tt ::  Spacing ::  Alone ,  id :  tt ::  TokenId ::  unspecified (), }).  into ()]}}; (@  PUNCT $first :  literal , $sec :  literal )=>{{ vec ! [ tt ::  Leaf ::  Punct ( tt ::  Punct { char : $first ,  spacing :  tt ::  Spacing ::  Joint ,  id :  tt ::  TokenId ::  unspecified (), }).  into (),  tt ::  Leaf ::  Punct ( tt ::  Punct { char : $sec ,  spacing :  tt ::  Spacing ::  Alone ,  id :  tt ::  TokenId ::  unspecified (), }).  into ()]}}; (# $first :  ident $($tail :  tt )* )=>{{ let  token = $[0m[1m[31mcrate[0m ::  quote ::  ToTokenTree ::  to_token ($first );  let  mut  tokens =  vec ! [ token .  into ()];  let  mut  tail_tokens = $[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_tokens ($[0m[1m[31mcrate[0m ::  __quote ! ($($tail )*));  tokens .  append (&  mut  tail_tokens );  tokens }}; (## $first :  ident $($tail :  tt )* )=>{{ let  mut  tokens = $first .  into_iter ().  map ($[0m[1m[31mcrate[0m ::  quote ::  ToTokenTree ::  to_token ).  collect ::<  Vec <  tt ::  TokenTree >> ();  let  mut  tail_tokens = $[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_tokens ($[0m[1m[31mcrate[0m ::  __quote ! ($($tail )*));  tokens .  append (&  mut  tail_tokens );  tokens }}; ({$($tt :  tt )* })=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  SUBTREE  Brace $($tt )*)}; ([$($tt :  tt )* ])=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  SUBTREE  Bracket $($tt )*)}; (($($tt :  tt )* ))=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  SUBTREE  Parenthesis $($tt )*)}; ($tt :  literal )=>{ vec ! [$[0m[1m[31mcrate[0m ::  quote ::  ToTokenTree ::  to_token ($tt ).  into ()]}; ($tt :  ident )=>{ vec ! [{ tt ::  Leaf ::  Ident ( tt ::  Ident { text :  stringify ! ($tt ).  into (),  id :  tt ::  TokenId ::  unspecified (), }).  into ()}]}; (-> )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  '-' ,  '>' )}; (& )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  '&' )}; (, )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  ',' )}; (: )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  ':' )}; (; )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  ';' )}; (:: )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  ':' ,  ':' )}; (. )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  '.' )}; (< )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  '<' )}; (> )=>{$[0m[1m[31mcrate[0m ::  __quote ! (@  PUNCT  '>' )}; ($first :  tt $($tail :  tt )+ )=>{{ let  mut  tokens = $[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_tokens ($[0m[1m[31mcrate[0m ::  __quote ! ($first ));  let  mut  tail_tokens = $[0m[1m[31mcrate[0m ::  quote ::  IntoTt ::  to_tokens ($[0m[1m[31mcrate[0m ::  __quote ! ($($tail )*));  tokens .  append (&  mut  tail_tokens );  tokens }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m535[0m:[0m43[0m:macro_rules! __ra_macro_fixture534 {()=>{$[0m[1m[31mcrate[0m ::  __private ::  TokenStream ::  new ()}; ($($tt :  tt )*)=>{{ let  mut  _s = $[0m[1m[31mcrate[0m ::  __private ::  TokenStream ::  new (); $[0m[1m[31mcrate[0m ::  quote_each_token ! ( _s $($tt )*);  _s }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m536[0m:[0m75[0m:macro_rules! __ra_macro_fixture535 {($tokens :  ident $($tts :  tt )*)=>{$[0m[1m[31mcrate[0m ::  quote_tokens_with_context ! ($tokens (@ @ @ @ @ @ $($tts )*)(@ @ @ @ @ $($tts )* @)(@ @ @ @ $($tts )* @ @)(@ @ @ $(($tts ))* @ @ @)(@ @ $($tts )* @ @ @ @)(@ $($tts )* @ @ @ @ @)($($tts )* @ @ @ @ @ @)); }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m537[0m:[0m176[0m:macro_rules! __ra_macro_fixture536 {($tokens :  ident ($($b3 :  tt )*)($($b2 :  tt )*)($($b1 :  tt )*)($($curr :  tt )*)($($a1 :  tt )*)($($a2 :  tt )*)($($a3 :  tt )*))=>{$($[0m[1m[31mcrate[0m ::  quote_token_with_context ! ($tokens $b3 $b2 $b1 $curr $a1 $a2 $a3 ); )* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m538[0m:[0m218[0m:macro_rules! __ra_macro_fixture537 {($tokens :  ident $b3 :  tt $b2 :  tt $b1 :  tt @ $a1 :  tt $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt $b2 :  tt $b1 :  tt (#)($($inner :  tt )* )* $a3 :  tt )=>{{ use $[0m[1m[31mcrate[0m ::  __private ::  ext ::*;  let  has_iter = $[0m[1m[31mcrate[0m ::  __private ::  ThereIsNoIteratorInRepetition ; $[0m[1m[31mcrate[0m ::  pounded_var_names ! ( quote_bind_into_iter ! ( has_iter )()$($inner )*);  let _: $[0m[1m[31mcrate[0m ::  __private ::  HasIterator =  has_iter ;  while  true {$[0m[1m[31mcrate[0m ::  pounded_var_names ! ( quote_bind_next_or_break ! ()()$($inner )*); $[0m[1m[31mcrate[0m ::  quote_each_token ! ($tokens $($inner )*); }}}; ($tokens :  ident $b3 :  tt $b2 :  tt # (($($inner :  tt )* ))* $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt # ($($inner :  tt )* )(*)$a1 :  tt $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt $b2 :  tt $b1 :  tt (#)($($inner :  tt )* )$sep :  tt *)=>{{ use $[0m[1m[31mcrate[0m ::  __private ::  ext ::*;  let  mut  _i =  0usize ;  let  has_iter = $[0m[1m[31mcrate[0m ::  __private ::  ThereIsNoIteratorInRepetition ; $[0m[1m[31mcrate[0m ::  pounded_var_names ! ( quote_bind_into_iter ! ( has_iter )()$($inner )*);  let _: $[0m[1m[31mcrate[0m ::  __private ::  HasIterator =  has_iter ;  while  true {$[0m[1m[31mcrate[0m ::  pounded_var_names ! ( quote_bind_next_or_break ! ()()$($inner )*);  if  _i >  0 {$[0m[1m[31mcrate[0m ::  quote_token ! ($tokens $sep ); } _i +=  1 ; $[0m[1m[31mcrate[0m ::  quote_each_token ! ($tokens $($inner )*); }}}; ($tokens :  ident $b3 :  tt $b2 :  tt # (($($inner :  tt )* ))$sep :  tt * $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt # ($($inner :  tt )* )($sep :  tt )* $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident # ($($inner :  tt )* )* (*)$a1 :  tt $a2 :  tt $a3 :  tt )=>{$[0m[1m[31mcrate[0m ::  quote_token ! ($tokens *); }; ($tokens :  ident # ($($inner :  tt )* )$sep :  tt (*)$a1 :  tt $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt $b2 :  tt $b1 :  tt (#)$var :  ident $a2 :  tt $a3 :  tt )=>{$[0m[1m[31mcrate[0m ::  ToTokens ::  to_tokens (&$var , &  mut $tokens ); }; ($tokens :  ident $b3 :  tt $b2 :  tt # ($var :  ident )$a1 :  tt $a2 :  tt $a3 :  tt )=>{}; ($tokens :  ident $b3 :  tt $b2 :  tt $b1 :  tt ($curr :  tt )$a1 :  tt $a2 :  tt $a3 :  tt )=>{$[0m[1m[31mcrate[0m ::  quote_token ! ($tokens $curr ); }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m539[0m:[0m80[0m:macro_rules! __ra_macro_fixture538 {($tokens :  ident ($($inner :  tt )* ))=>{$[0m[1m[31mcrate[0m ::  __private ::  push_group (&  mut $tokens , $[0m[1m[31mcrate[0m ::  __private ::  Delimiter ::  Parenthesis , $[0m[1m[31mcrate[0m ::  quote ! ($($inner )*), ); }; ($tokens :  ident [$($inner :  tt )* ])=>{$[0m[1m[31mcrate[0m ::  __private ::  push_group (&  mut $tokens , $[0m[1m[31mcrate[0m ::  __private ::  Delimiter ::  Bracket , $[0m[1m[31mcrate[0m ::  quote ! ($($inner )*), ); }; ($tokens :  ident {$($inner :  tt )* })=>{$[0m[1m[31mcrate[0m ::  __private ::  push_group (&  mut $tokens , $[0m[1m[31mcrate[0m ::  __private ::  Delimiter ::  Brace , $[0m[1m[31mcrate[0m ::  quote ! ($($inner )*), ); }; ($tokens :  ident +)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_add (&  mut $tokens ); }; ($tokens :  ident +=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_add_eq (&  mut $tokens ); }; ($tokens :  ident &)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_and (&  mut $tokens ); }; ($tokens :  ident &&)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_and_and (&  mut $tokens ); }; ($tokens :  ident &=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_and_eq (&  mut $tokens ); }; ($tokens :  ident @)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_at (&  mut $tokens ); }; ($tokens :  ident !)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_bang (&  mut $tokens ); }; ($tokens :  ident ^)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_caret (&  mut $tokens ); }; ($tokens :  ident ^=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_caret_eq (&  mut $tokens ); }; ($tokens :  ident :)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_colon (&  mut $tokens ); }; ($tokens :  ident ::)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_colon2 (&  mut $tokens ); }; ($tokens :  ident ,)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_comma (&  mut $tokens ); }; ($tokens :  ident /)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_div (&  mut $tokens ); }; ($tokens :  ident /=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_div_eq (&  mut $tokens ); }; ($tokens :  ident .)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_dot (&  mut $tokens ); }; ($tokens :  ident ..)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_dot2 (&  mut $tokens ); }; ($tokens :  ident ...)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_dot3 (&  mut $tokens ); }; ($tokens :  ident ..=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_dot_dot_eq (&  mut $tokens ); }; ($tokens :  ident =)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_eq (&  mut $tokens ); }; ($tokens :  ident ==)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_eq_eq (&  mut $tokens ); }; ($tokens :  ident >=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_ge (&  mut $tokens ); }; ($tokens :  ident >)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_gt (&  mut $tokens ); }; ($tokens :  ident <=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_le (&  mut $tokens ); }; ($tokens :  ident <)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_lt (&  mut $tokens ); }; ($tokens :  ident *=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_mul_eq (&  mut $tokens ); }; ($tokens :  ident !=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_ne (&  mut $tokens ); }; ($tokens :  ident |)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_or (&  mut $tokens ); }; ($tokens :  ident |=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_or_eq (&  mut $tokens ); }; ($tokens :  ident ||)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_or_or (&  mut $tokens ); }; ($tokens :  ident #)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_pound (&  mut $tokens ); }; ($tokens :  ident ?)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_question (&  mut $tokens ); }; ($tokens :  ident ->)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_rarrow (&  mut $tokens ); }; ($tokens :  ident <-)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_larrow (&  mut $tokens ); }; ($tokens :  ident %)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_rem (&  mut $tokens ); }; ($tokens :  ident %=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_rem_eq (&  mut $tokens ); }; ($tokens :  ident =>)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_fat_arrow (&  mut $tokens ); }; ($tokens :  ident ;)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_semi (&  mut $tokens ); }; ($tokens :  ident <<)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_shl (&  mut $tokens ); }; ($tokens :  ident <<=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_shl_eq (&  mut $tokens ); }; ($tokens :  ident >>)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_shr (&  mut $tokens ); }; ($tokens :  ident >>=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_shr_eq (&  mut $tokens ); }; ($tokens :  ident *)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_star (&  mut $tokens ); }; ($tokens :  ident -)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_sub (&  mut $tokens ); }; ($tokens :  ident -=)=>{$[0m[1m[31mcrate[0m ::  __private ::  push_sub_eq (&  mut $tokens ); }; ($tokens :  ident $ident :  ident )=>{$[0m[1m[31mcrate[0m ::  __private ::  push_ident (&  mut $tokens ,  stringify ! ($ident )); }; ($tokens :  ident $other :  tt )=>{$[0m[1m[31mcrate[0m ::  __private ::  parse (&  mut $tokens ,  stringify ! ($other )); }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m540[0m:[0m88[0m:macro_rules! __ra_macro_fixture539 {($call :  ident ! $extra :  tt $($tts :  tt )*)=>{$[0m[1m[31mcrate[0m ::  pounded_var_names_with_context ! ($call ! $extra (@ $($tts )*)($($tts )* @))}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m541[0m:[0m109[0m:macro_rules! __ra_macro_fixture540 {($call :  ident ! $extra :  tt ($($b1 :  tt )*)($($curr :  tt )*))=>{$($[0m[1m[31mcrate[0m ::  pounded_var_with_context ! ($call ! $extra $b1 $curr ); )* }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m542[0m:[0m103[0m:macro_rules! __ra_macro_fixture541 {($call :  ident ! $extra :  tt $b1 :  tt ($($inner :  tt )* ))=>{$[0m[1m[31mcrate[0m ::  pounded_var_names ! ($call ! $extra $($inner )*); }; ($call :  ident ! $extra :  tt $b1 :  tt [$($inner :  tt )* ])=>{$[0m[1m[31mcrate[0m ::  pounded_var_names ! ($call ! $extra $($inner )*); }; ($call :  ident ! $extra :  tt $b1 :  tt {$($inner :  tt )* })=>{$[0m[1m[31mcrate[0m ::  pounded_var_names ! ($call ! $extra $($inner )*); }; ($call :  ident ! ($($extra :  tt )*)# $var :  ident )=>{$[0m[1m[31mcrate[0m ::$call ! ($($extra )* $var ); }; ($call :  ident ! $extra :  tt $b1 :  tt $curr :  tt )=>{}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m544[0m:[0m106[0m:macro_rules! __ra_macro_fixture543 {($var :  ident )=>{ let $var =  match $var .  next (){ Some ( _x )=>$[0m[1m[31mcrate[0m ::  __private ::  RepInterp ( _x ),  None => break , }; }; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m545[0m:[0m56[0m:macro_rules! __ra_macro_fixture544 {($fmt :  expr )=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([::  std ::  option ::  Option ::  None , $fmt ])}; ($fmt :  expr , $($rest :  tt )*)=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([::  std ::  option ::  Option ::  None , $fmt ]$($rest )*)}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m546[0m:[0m76[0m:macro_rules! __ra_macro_fixture545 {([$span :  expr , $($fmt :  tt )*])=>{$[0m[1m[31mcrate[0m ::  __private ::  mk_ident (&  format ! ($($fmt )*), $span )}; ([$old :  expr , $($fmt :  tt )*] span = $span :  expr )=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([$old , $($fmt )*] span = $span ,)}; ([$old :  expr , $($fmt :  tt )*] span = $span :  expr , $($rest :  tt )*)=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([::  std ::  option ::  Option ::  Some ::<$[0m[1m[31mcrate[0m ::  __private ::  Span > ($span ), $($fmt )* ]$($rest )*)}; ([$span :  expr , $($fmt :  tt )*]$name :  ident = $arg :  expr )=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([$span , $($fmt )*]$name = $arg ,)}; ([$span :  expr , $($fmt :  tt )*]$name :  ident = $arg :  expr , $($rest :  tt )*)=>{ match $[0m[1m[31mcrate[0m ::  __private ::  IdentFragmentAdapter (&$arg ){ arg =>$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([$span .  or ( arg .  span ()), $($fmt )*, $name =  arg ]$($rest )*), }}; ([$span :  expr , $($fmt :  tt )*]$arg :  expr )=>{$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([$span , $($fmt )*]$arg ,)}; ([$span :  expr , $($fmt :  tt )*]$arg :  expr , $($rest :  tt )*)=>{ match $[0m[1m[31mcrate[0m ::  __private ::  IdentFragmentAdapter (&$arg ){ arg =>$[0m[1m[31mcrate[0m ::  format_ident_impl ! ([$span .  or ( arg .  span ()), $($fmt )*,  arg ]$($rest )*), }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m547[0m:[0m139[0m:macro_rules! __ra_macro_fixture546 {()=>( panic ! ( "not yet implemented" )); ($($arg :  tt )+)=>( panic ! ( "not yet implemented: {}" , $[0m[1m[31mcrate[0m ::  format_args ! ($($arg )+))); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m548[0m:[0m171[0m:macro_rules! __ra_macro_fixture547 {($($name :  expr ),+ $(,)?)=>{{ let  mut  v =  ArrayVec ::< [ LangItemTarget ;  2 ]>::  new (); $(v .  extend ( db .  lang_item ( cur_[0m[1m[31mcrate[0m , $name .  into ())); )+  v }}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m549[0m:[0m72[0m:macro_rules! __ra_macro_fixture548 {($ctor :  pat , $param :  pat )=>{ [0m[1m[31mcrate[0m ::  Ty ::  Apply ( [0m[1m[31mcrate[0m ::  ApplicationTy { ctor : $ctor ,  parameters : $param })}; ($ctor :  pat )=>{ ty_app ! ($ctor , _)}; }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m550[0m:[0m105[0m:macro_rules! __ra_macro_fixture549 {(@  one $x :  expr )=>( 1usize ); ($elem :  expr ; $n :  expr )=>({$[0m[1m[31mcrate[0m ::  SmallVec ::  from_elem ($elem , $n )}); ($($x :  expr ),*$(,)*)=>({ let  count =  0usize $(+ $[0m[1m[31mcrate[0m ::  smallvec ! (@  one $x ))*; # [ allow ( unused_mut )] let  mut  vec = $[0m[1m[31mcrate[0m ::  SmallVec ::  new ();  if  count <=  vec .  inline_size (){$(vec .  push ($x );)*  vec } else {$[0m[1m[31mcrate[0m ::  SmallVec ::  from_vec ($[0m[1m[31mcrate[0m ::  alloc ::  vec ! [$($x ,)*])}}); }
[0m[35mbench_data/numerous_macro_rules[0m:[0m[32m552[0m:[0m62[0m:macro_rules! __ra_macro_fixture551 {($($arg :  tt )*)=>( if $[0m[1m[31mcrate[0m ::  cfg ! ( debug_assertions ){$[0m[1m[31mcrate[0m ::  assert ! ($($arg )*); })}
[0m[35mdocs/dev/style.md[0m:[0m[32m31[0m:[0m60[0m:   Specifically, you add a `pub use` reexport from another [0m[1m[31mcrate[0m or you add a new line to the `[dependencies]` section of `Cargo.toml`.
[0m[35mdocs/dev/style.md[0m:[0m[32m32[0m:[0m83[0m:   A good example here would be adding reference search capability to the assists [0m[1m[31mcrate[0ms.
[0m[35mdocs/dev/style.md[0m:[0m[32m53[0m:[0m4[0m:## [0m[1m[31mCrate[0ms.io Dependencies
[0m[35mdocs/dev/style.md[0m:[0m[32m55[0m:[0m46[0m:We try to be very conservative with usage of [0m[1m[31mcrate[0ms.io dependencies.
[0m[35mdocs/dev/style.md[0m:[0m[32m56[0m:[0m26[0m:Don't use small "helper" [0m[1m[31mcrate[0ms (exception: `itertools` and `either` are allowed).
[0m[35mdocs/dev/style.md[0m:[0m[32m57[0m:[0m89[0m:If there's some general reusable bit of code you need, consider adding it to the `stdx` [0m[1m[31mcrate[0m.
[0m[35mdocs/dev/style.md[0m:[0m[32m612[0m:[0m84[0m:Avoid making a lot of code type parametric, *especially* on the boundaries between [0m[1m[31mcrate[0ms.
[0m[35mdocs/dev/style.md[0m:[0m[32m641[0m:[0m186[0m:**Rationale:** Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per [0m[1m[31mcrate[0m*.
[0m[35mdocs/dev/style.md[0m:[0m[32m651[0m:[0m19[0m:Use one `use` per [0m[1m[31mcrate[0m.
[0m[35mdocs/dev/style.md[0m:[0m[32m663[0m:[0m21[0m:// Second, external [0m[1m[31mcrate[0ms (both [0m[1m[31mcrate[0ms.io [0m[1m[31mcrate[0ms and other rust-analyzer [0m[1m[31mcrate[0ms).
[0m[35mdocs/dev/style.md[0m:[0m[32m664[0m:[0m5[0m:use [0m[1m[31mcrate[0m_foo::{ ... }
[0m[35mdocs/dev/style.md[0m:[0m[32m665[0m:[0m5[0m:use [0m[1m[31mcrate[0m_bar::{ ... }
[0m[35mdocs/dev/style.md[0m:[0m[32m667[0m:[0m17[0m:// Then current [0m[1m[31mcrate[0m.
[0m[35mdocs/dev/style.md[0m:[0m[32m668[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{}
[0m[35mdocs/dev/style.md[0m:[0m[32m670[0m:[0m55[0m:// Finally, parent and child modules, but prefer `use [0m[1m[31mcrate[0m::`.
[0m[35mdocs/dev/style.md[0m:[0m[32m675[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::x::Z;
[0m[35mdocs/dev/style.md[0m:[0m[32m680[0m:[0m13[0m:Grouping by [0m[1m[31mcrate[0m allows spotting unwanted dependencies easier.
[0m[35mdocs/dev/style.md[0m:[0m[32m731[0m:[0m13[0m:Prefer `use [0m[1m[31mcrate[0m::foo::bar` to `use super::bar` or `use self::bar::baz`.
[0m[35mdocs/dev/style.md[0m:[0m[32m746[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn frobnicate() {
[0m[35mdocs/dev/style.md[0m:[0m[32m763[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn frobnicate() {
[0m[35mdocs/dev/style.md[0m:[0m[32m859[0m:[0m1[0m:[0m[1m[31mcrate[0m  -> krate
[0m[35meditors/code/src/debug.ts[0m:[0m[32m154[0m:[0m26[0m:        // The LSP side: [0m[1m[31mcrate[0ms\rust-analyzer\src\main_loop\handlers.rs,
[0m[35meditors/code/src/main.ts[0m:[0m[32m152[0m:[0m16[0m:        shuffle[0m[1m[31mCrate[0mGraph: { enabled: commands.shuffle[0m[1m[31mCrate[0mGraph },
[0m[35meditors/code/src/main.ts[0m:[0m[32m165[0m:[0m13[0m:        view[0m[1m[31mCrate[0mGraph: { enabled: commands.view[0m[1m[31mCrate[0mGraph },
[0m[35meditors/code/src/main.ts[0m:[0m[32m166[0m:[0m17[0m:        viewFull[0m[1m[31mCrate[0mGraph: { enabled: commands.viewFull[0m[1m[31mCrate[0mGraph },
[0m[35mlib/lsp-server/src/stdio.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::Message;
[0m[35mlib/lsp-server/src/stdio.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn stdio_transport() -> (Sender<Message>, Receiver<Message>, IoThreads) {
[0m[35mlib/lsp-server/src/stdio.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_io_threads(
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m2[0m:[0m10[0m://! This [0m[1m[31mcrate[0m handles protocol handshaking and parsing messages, while you
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m22[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m227[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{Connection, Message, ProtocolError, RequestId};
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m251[0m:[0m28[0m:        let notification = [0m[1m[31mcrate[0m::Notification {
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m258[0m:[0m23[0m:        let request = [0m[1m[31mcrate[0m::Request {
[0m[35mlib/lsp-server/src/lib.rs[0m:[0m[32m273[0m:[0m13[0m:            [0m[1m[31mcrate[0m::Notification { method: Exit::METHOD.to_string(), params: to_value(()).unwrap() };
[0m[35meditors/code/src/commands.ts[0m:[0m[32m93[0m:[0m24[0m:export function shuffle[0m[1m[31mCrate[0mGraph(ctx: CtxInit): Cmd {
[0m[35meditors/code/src/commands.ts[0m:[0m[32m95[0m:[0m49[0m:        return ctx.client.sendRequest(ra.shuffle[0m[1m[31mCrate[0mGraph);
[0m[35meditors/code/src/commands.ts[0m:[0m[32m295[0m:[0m82[0m: * This function calculates the parent chain of a given file until it reaches it [0m[1m[31mcrate[0m root contained in ctx.dependencies.
[0m[35meditors/code/src/commands.ts[0m:[0m[32m296[0m:[0m131[0m: * This is need because the TreeView is Lazy, so at first it only has the root dependencies: For example if we have the following [0m[1m[31mcrate[0ms:
[0m[35meditors/code/src/commands.ts[0m:[0m[32m329[0m:[0m69[0m:            // this is an odd case that can happen when we change a [0m[1m[31mcrate[0m version but we'd still have
[0m[35meditors/code/src/commands.ts[0m:[0m[32m737[0m:[0m10[0m:function [0m[1m[31mcrate[0mGraph(ctx: CtxInit, full: boolean): Cmd {
[0m[35meditors/code/src/commands.ts[0m:[0m[32m742[0m:[0m28[0m:            "rust-analyzer.[0m[1m[31mcrate[0m-graph",
[0m[35meditors/code/src/commands.ts[0m:[0m[32m743[0m:[0m28[0m:            "rust-analyzer [0m[1m[31mcrate[0m graph",
[0m[35meditors/code/src/commands.ts[0m:[0m[32m755[0m:[0m53[0m:        const dot = await client.sendRequest(ra.view[0m[1m[31mCrate[0mGraph, params);
[0m[35meditors/code/src/commands.ts[0m:[0m[32m805[0m:[0m21[0m:export function view[0m[1m[31mCrate[0mGraph(ctx: CtxInit): Cmd {
[0m[35meditors/code/src/commands.ts[0m:[0m[32m806[0m:[0m12[0m:    return [0m[1m[31mcrate[0mGraph(ctx, false);
[0m[35meditors/code/src/commands.ts[0m:[0m[32m809[0m:[0m25[0m:export function viewFull[0m[1m[31mCrate[0mGraph(ctx: CtxInit): Cmd {
[0m[35meditors/code/src/commands.ts[0m:[0m[32m810[0m:[0m12[0m:    return [0m[1m[31mcrate[0mGraph(ctx, true);
[0m[35mdocs/dev/syntax.md[0m:[0m[32m12[0m:[0m101[0m:* [syntax](https://github.com/rust-lang/rust-analyzer/tree/36a70b7435c48837018c71576d7bb4e8f763f501/[0m[1m[31mcrate[0ms/syntax) [0m[1m[31mcrate[0m inside rust-analyzer which wraps `rowan` into rust-analyzer specific API.
[0m[35mdocs/dev/syntax.md[0m:[0m[32m13[0m:[0m40[0m:  Nothing in rust-analyzer except this [0m[1m[31mcrate[0m knows about `rowan`.
[0m[35mdocs/dev/syntax.md[0m:[0m[32m14[0m:[0m101[0m:* [parser](https://github.com/rust-lang/rust-analyzer/tree/36a70b7435c48837018c71576d7bb4e8f763f501/[0m[1m[31mcrate[0ms/parser) [0m[1m[31mcrate[0m parses input tokens into a `syntax` tree
[0m[35mdocs/dev/syntax.md[0m:[0m[32m447[0m:[0m31[0m:For these reasons, the parser [0m[1m[31mcrate[0m defines a callback interfaces for both input tokens and output trees.
[0m[35mdocs/dev/syntax.md[0m:[0m[32m483[0m:[0m74[0m:* The parser and the syntax tree are independent, they live in different [0m[1m[31mcrate[0ms neither of which depends on the other.
[0m[35mCargo.toml[0m:[0m[32m2[0m:[0m32[0m:members = ["xtask/", "lib/*", "[0m[1m[31mcrate[0ms/*"]
[0m[35mCargo.toml[0m:[0m[32m3[0m:[0m13[0m:exclude = ["[0m[1m[31mcrate[0ms/proc-macro-test/imp"]
[0m[35mCargo.toml[0m:[0m[32m31[0m:[0m9[0m:[patch.'[0m[1m[31mcrate[0ms-io']
[0m[35mCargo.toml[0m:[0m[32m48[0m:[0m9[0m:# local [0m[1m[31mcrate[0ms
[0m[35mCargo.toml[0m:[0m[32m49[0m:[0m23[0m:base-db = { path = "./[0m[1m[31mcrate[0ms/base-db", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m50[0m:[0m19[0m:cfg = { path = "./[0m[1m[31mcrate[0ms/cfg", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m51[0m:[0m24[0m:flycheck = { path = "./[0m[1m[31mcrate[0ms/flycheck", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m52[0m:[0m19[0m:hir = { path = "./[0m[1m[31mcrate[0ms/hir", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m53[0m:[0m23[0m:hir-def = { path = "./[0m[1m[31mcrate[0ms/hir-def", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m54[0m:[0m26[0m:hir-expand = { path = "./[0m[1m[31mcrate[0ms/hir-expand", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m55[0m:[0m22[0m:hir-ty = { path = "./[0m[1m[31mcrate[0ms/hir-ty", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m56[0m:[0m19[0m:ide = { path = "./[0m[1m[31mcrate[0ms/ide", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m57[0m:[0m27[0m:ide-assists = { path = "./[0m[1m[31mcrate[0ms/ide-assists", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m58[0m:[0m30[0m:ide-completion = { path = "./[0m[1m[31mcrate[0ms/ide-completion", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m59[0m:[0m22[0m:ide-db = { path = "./[0m[1m[31mcrate[0ms/ide-db", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m60[0m:[0m31[0m:ide-diagnostics = { path = "./[0m[1m[31mcrate[0ms/ide-diagnostics", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m61[0m:[0m23[0m:ide-ssr = { path = "./[0m[1m[31mcrate[0ms/ide-ssr", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m62[0m:[0m22[0m:intern = { path = "./[0m[1m[31mcrate[0ms/intern", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m63[0m:[0m21[0m:limit = { path = "./[0m[1m[31mcrate[0ms/limit", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m64[0m:[0m26[0m:load-cargo = { path = "./[0m[1m[31mcrate[0ms/load-cargo", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m65[0m:[0m19[0m:mbe = { path = "./[0m[1m[31mcrate[0ms/mbe", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m66[0m:[0m22[0m:parser = { path = "./[0m[1m[31mcrate[0ms/parser", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m67[0m:[0m21[0m:paths = { path = "./[0m[1m[31mcrate[0ms/paths", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m68[0m:[0m30[0m:proc-macro-api = { path = "./[0m[1m[31mcrate[0ms/proc-macro-api", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m69[0m:[0m30[0m:proc-macro-srv = { path = "./[0m[1m[31mcrate[0ms/proc-macro-srv", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m70[0m:[0m34[0m:proc-macro-srv-cli = { path = "./[0m[1m[31mcrate[0ms/proc-macro-srv-cli", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m71[0m:[0m23[0m:profile = { path = "./[0m[1m[31mcrate[0ms/profile", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m72[0m:[0m29[0m:project-model = { path = "./[0m[1m[31mcrate[0ms/project-model", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m73[0m:[0m25[0m:sourcegen = { path = "./[0m[1m[31mcrate[0ms/sourcegen", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m74[0m:[0m20[0m:stdx = { path = "./[0m[1m[31mcrate[0ms/stdx", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m75[0m:[0m22[0m:syntax = { path = "./[0m[1m[31mcrate[0ms/syntax", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m76[0m:[0m26[0m:test-utils = { path = "./[0m[1m[31mcrate[0ms/test-utils", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m77[0m:[0m25[0m:text-edit = { path = "./[0m[1m[31mcrate[0ms/text-edit", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m78[0m:[0m25[0m:toolchain = { path = "./[0m[1m[31mcrate[0ms/toolchain", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m79[0m:[0m18[0m:tt = { path = "./[0m[1m[31mcrate[0ms/tt", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m80[0m:[0m26[0m:vfs-notify = { path = "./[0m[1m[31mcrate[0ms/vfs-notify", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m81[0m:[0m19[0m:vfs = { path = "./[0m[1m[31mcrate[0ms/vfs", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m82[0m:[0m34[0m:rustc-dependencies = { path = "./[0m[1m[31mcrate[0ms/rustc-dependencies", version = "0.0.0" }
[0m[35mCargo.toml[0m:[0m[32m84[0m:[0m9[0m:# local [0m[1m[31mcrate[0ms that aren't published to [0m[1m[31mcrate[0ms.io. These should not have versions.
[0m[35mCargo.toml[0m:[0m[32m85[0m:[0m31[0m:proc-macro-test = { path = "./[0m[1m[31mcrate[0ms/proc-macro-test" }
[0m[35mCargo.toml[0m:[0m[32m87[0m:[0m11[0m:# In-tree [0m[1m[31mcrate[0ms that are published separately and follow semver. See lib/README.md
[0m[35mCargo.toml[0m:[0m[32m92[0m:[0m13[0m:# non-local [0m[1m[31mcrate[0ms
[0m[35mdocs/dev/guide.md[0m:[0m[32m43[0m:[0m81[0m:[`AnalysisHost`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/lib.rs#L265-L284
[0m[35mdocs/dev/guide.md[0m:[0m[32m44[0m:[0m77[0m:[`Analysis`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/lib.rs#L291-L478
[0m[35mdocs/dev/guide.md[0m:[0m[32m72[0m:[0m68[0m:[`Change`]: https://github.com/rust-lang/rust-analyzer/blob/master/[0m[1m[31mcrate[0ms/base_db/src/change.rs#L14-L89
[0m[35mdocs/dev/guide.md[0m:[0m[32m81[0m:[0m10[0m:The `set_[0m[1m[31mcrate[0m_graph` method allows us to control how the input files are partitioned
[0m[35mdocs/dev/guide.md[0m:[0m[32m82[0m:[0m27[0m:into compilation units -- [0m[1m[31mcrate[0ms. It also controls (in theory, not implemented
[0m[35mdocs/dev/guide.md[0m:[0m[32m83[0m:[0m20[0m:yet) `cfg` flags. `[0m[1m[31mCrate[0mGraph` is a directed acyclic graph of [0m[1m[31mcrate[0ms. Each [0m[1m[31mcrate[0m
[0m[35mdocs/dev/guide.md[0m:[0m[32m85[0m:[0m27[0m:dependency is a pair of a [0m[1m[31mcrate[0m and a name. It is possible to have two [0m[1m[31mcrate[0ms
[0m[35mdocs/dev/guide.md[0m:[0m[32m88[0m:[0m38[0m:targets, each of which is a separate [0m[1m[31mcrate[0m (or several [0m[1m[31mcrate[0ms, if you try
[0m[35mdocs/dev/guide.md[0m:[0m[32m91[0m:[0m60[0m:Procedural macros are inputs as well, roughly modeled as a [0m[1m[31mcrate[0m with a bunch of
[0m[35mdocs/dev/guide.md[0m:[0m[32m144[0m:[0m78[0m:[`main_loop`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L51-L110
[0m[35mdocs/dev/guide.md[0m:[0m[32m145[0m:[0m84[0m:[`main_loop_inner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L156-L258
[0m[35mdocs/dev/guide.md[0m:[0m[32m152[0m:[0m136[0m:and we run `rustc --print sysroot` and scan the "sysroot" (the directory containing the current Rust toolchain's files) to learn about [0m[1m[31mcrate[0ms like
[0m[35mdocs/dev/guide.md[0m:[0m[32m156[0m:[0m86[0m:[main_loop.rs#L62-L70](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L62-L70)
[0m[35mdocs/dev/guide.md[0m:[0m[32m164[0m:[0m25[0m:* Create an analyzer's `[0m[1m[31mCrate[0m` for each Cargo **target** and sysroot [0m[1m[31mcrate[0m.
[0m[35mdocs/dev/guide.md[0m:[0m[32m165[0m:[0m34[0m:* Setup dependencies between the [0m[1m[31mcrate[0ms.
[0m[35mdocs/dev/guide.md[0m:[0m[32m167[0m:[0m81[0m:[`ProjectModel`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/project_model.rs#L16-L20
[0m[35mdocs/dev/guide.md[0m:[0m[32m168[0m:[0m90[0m:[`ServerWorldState::new`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/server_world.rs#L38-L160
[0m[35mdocs/dev/guide.md[0m:[0m[32m173[0m:[0m87[0m:* [File system changes](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L194)
[0m[35mdocs/dev/guide.md[0m:[0m[32m174[0m:[0m91[0m:* [Changes from the editor](https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L377)
[0m[35mdocs/dev/guide.md[0m:[0m[32m179[0m:[0m72[0m:[apply]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/server_world.rs#L216
[0m[35mdocs/dev/guide.md[0m:[0m[32m189[0m:[0m84[0m:["goto definition"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/server_world.rs#L216
[0m[35mdocs/dev/guide.md[0m:[0m[32m190[0m:[0m77[0m:[`schedule`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L426-L455
[0m[35mdocs/dev/guide.md[0m:[0m[32m191[0m:[0m75[0m:[The task]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop/handlers.rs#L205-L223
[0m[35mdocs/dev/guide.md[0m:[0m[32m253[0m:[0m81[0m:[`RootDatabase`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ide_api/src/db.rs#L88-L134
[0m[35mdocs/dev/guide.md[0m:[0m[32m259[0m:[0m82[0m:[`FilesDatabase`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/base_db/src/input.rs#L150-L174
[0m[35mdocs/dev/guide.md[0m:[0m[32m270[0m:[0m9[0m:several [0m[1m[31mcrate[0ms or a single [0m[1m[31mcrate[0m might be present in the compilation DAG
[0m[35mdocs/dev/guide.md[0m:[0m[32m275[0m:[0m82[0m:[`source_binder`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/hir/src/source_binder.rs
[0m[35mdocs/dev/guide.md[0m:[0m[32m283[0m:[0m83[0m:[`code_model_api`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/hir/src/code_model_api.rs
[0m[35mdocs/dev/guide.md[0m:[0m[32m284[0m:[0m113[0m:[the list of queries]: https://github.com/rust-lang/rust-analyzer/blob/7e84440e25e19529e4ff8a66e521d1b06349c6ec/[0m[1m[31mcrate[0ms/hir/src/db.rs#L20-L106
[0m[35mdocs/dev/guide.md[0m:[0m[32m294[0m:[0m33[0m:happens to be a part of several [0m[1m[31mcrate[0ms.
[0m[35mdocs/dev/guide.md[0m:[0m[32m325[0m:[0m52[0m:The implementation is based on the generic [rowan] [0m[1m[31mcrate[0m on top of which a
[0m[35mdocs/dev/guide.md[0m:[0m[32m330[0m:[0m80[0m:[rust-specific]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_syntax/src/ast/generated.rs
[0m[35mdocs/dev/guide.md[0m:[0m[32m336[0m:[0m65[0m:The algorithm for building a tree of modules is to start with a [0m[1m[31mcrate[0m root
[0m[35mdocs/dev/guide.md[0m:[0m[32m337[0m:[0m18[0m:(remember, each `[0m[1m[31mCrate[0m` from a `[0m[1m[31mCrate[0mGraph` has a `FileId`), collect all `mod`
[0m[35mdocs/dev/guide.md[0m:[0m[32m341[0m:[0m86[0m:[`module_tree_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/module_tree.rs#L115-L133
[0m[35mdocs/dev/guide.md[0m:[0m[32m343[0m:[0m51[0m:First, rust-analyzer builds a module tree for all [0m[1m[31mcrate[0ms in a source root
[0m[35mdocs/dev/guide.md[0m:[0m[32m345[0m:[0m2[0m:`[0m[1m[31mCrate[0mGraph`), but this approach also enables accounting for files which are not
[0m[35mdocs/dev/guide.md[0m:[0m[32m346[0m:[0m13[0m:part of any [0m[1m[31mcrate[0m. That is, if you create a file but do not include it as a
[0m[35mdocs/dev/guide.md[0m:[0m[32m364[0m:[0m85[0m:[`submodules_query`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/module_tree.rs#L41
[0m[35mdocs/dev/guide.md[0m:[0m[32m392[0m:[0m85[0m:[`LocationInterner`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_db/src/loc2id.rs#L65-L71
[0m[35mdocs/dev/guide.md[0m:[0m[32m393[0m:[0m76[0m:[interners]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/db.rs#L22-L23
[0m[35mdocs/dev/guide.md[0m:[0m[32m407[0m:[0m75[0m:[`DefLoc`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/ids.rs#L129-L139
[0m[35mdocs/dev/guide.md[0m:[0m[32m440[0m:[0m78[0m:[`HirFileId`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/ids.rs#L31-L93
[0m[35mdocs/dev/guide.md[0m:[0m[32m454[0m:[0m72[0m:[lower]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres/lower.rs#L113-L147
[0m[35mdocs/dev/guide.md[0m:[0m[32m455[0m:[0m71[0m:[loop]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres.rs#L186-L196
[0m[35mdocs/dev/guide.md[0m:[0m[32m460[0m:[0m71[0m:[test]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres/tests.rs#L376
[0m[35mdocs/dev/guide.md[0m:[0m[32m495[0m:[0m74[0m:[imports]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres/lower.rs#L52-L59
[0m[35mdocs/dev/guide.md[0m:[0m[32m496[0m:[0m78[0m:[`SourceMap`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres/lower.rs#L52-L59
[0m[35mdocs/dev/guide.md[0m:[0m[32m497[0m:[0m83[0m:[projection query]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/nameres/lower.rs#L97-L103
[0m[35mdocs/dev/guide.md[0m:[0m[32m498[0m:[0m71[0m:[uses]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/query_definitions.rs#L49
[0m[35mdocs/dev/guide.md[0m:[0m[32m520[0m:[0m80[0m:[lower the AST]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/expr.rs
[0m[35mdocs/dev/guide.md[0m:[0m[32m521[0m:[0m80[0m:[positional ID]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/expr.rs#L13-L15
[0m[35mdocs/dev/guide.md[0m:[0m[32m522[0m:[0m79[0m:[a source map]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/expr.rs#L41-L44
[0m[35mdocs/dev/guide.md[0m:[0m[32m523[0m:[0m81[0m:[type inference]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_hir/src/ty.rs#L1208-L1223
[0m[35mdocs/dev/guide.md[0m:[0m[32m560[0m:[0m86[0m:[receiving a message]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L203
[0m[35mdocs/dev/guide.md[0m:[0m[32m561[0m:[0m96[0m:[schedule it on the threadpool]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L428
[0m[35mdocs/dev/guide.md[0m:[0m[32m562[0m:[0m72[0m:[catch]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_lsp_server/src/main_loop.rs#L436-L442
[0m[35mdocs/dev/guide.md[0m:[0m[32m564[0m:[0m94[0m:[ask analysis for completion]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ide_api/src/lib.rs#L439-L444
[0m[35mdocs/dev/guide.md[0m:[0m[32m565[0m:[0m94[0m:[ask analysis for completion]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/lib.rs#L439-L444
[0m[35mdocs/dev/guide.md[0m:[0m[32m566[0m:[0m92[0m:[completion implementation]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion.rs#L46-L62
[0m[35mdocs/dev/guide.md[0m:[0m[32m567[0m:[0m86[0m:[`CompletionContext`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion/completion_context.rs#L14-L37
[0m[35mdocs/dev/guide.md[0m:[0m[32m568[0m:[0m83[0m:["IntelliJ Trick"]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion/completion_context.rs#L72-L75
[0m[35mdocs/dev/guide.md[0m:[0m[32m569[0m:[0m93[0m:[find an ancestor `fn` node]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion/completion_context.rs#L116-L120
[0m[35mdocs/dev/guide.md[0m:[0m[32m570[0m:[0m81[0m:[semantic model]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion/completion_context.rs#L123
[0m[35mdocs/dev/guide.md[0m:[0m[32m571[0m:[0m108[0m:[series of independent completion routines]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion.rs#L52-L59
[0m[35mdocs/dev/guide.md[0m:[0m[32m572[0m:[0m81[0m:[`complete_dot`]: https://github.com/rust-lang/rust-analyzer/blob/guide-2019-01/[0m[1m[31mcrate[0ms/ra_ide_api/src/completion/complete_dot.rs#L6-L22
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m13[0m:[0m20[0m:        Cancelled, [0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, SourceDatabase, SourceDatabaseExt,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m20[0m:[0m25[0m:/// We're indexing many [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m23[0m:[0m13[0m:    /// the [0m[1m[31mcrate[0ms that we are currently priming.
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m24[0m:[0m9[0m:    pub [0m[1m[31mcrate[0ms_currently_indexing: Vec<String>,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m25[0m:[0m29[0m:    /// the total number of [0m[1m[31mcrate[0ms we want to prime.
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m26[0m:[0m9[0m:    pub [0m[1m[31mcrate[0ms_total: usize,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m27[0m:[0m29[0m:    /// the total number of [0m[1m[31mcrate[0ms that have finished priming
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m28[0m:[0m9[0m:    pub [0m[1m[31mcrate[0ms_done: usize,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn parallel_prime_caches(
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m38[0m:[0m20[0m:    let graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m39[0m:[0m13[0m:    let mut [0m[1m[31mcrate[0ms_to_prime = {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m40[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_ids = compute_[0m[1m[31mcrate[0ms_to_prime(db, &graph);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m44[0m:[0m14[0m:        for &[0m[1m[31mcrate[0m_id in &[0m[1m[31mcrate[0m_ids {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m45[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_data = &graph[[0m[1m[31mcrate[0m_id];
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m46[0m:[0m32[0m:            let dependencies = [0m[1m[31mcrate[0m_data
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m49[0m:[0m28[0m:                .map(|d| d.[0m[1m[31mcrate[0m_id)
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m50[0m:[0m29[0m:                .filter(|i| [0m[1m[31mcrate[0m_ids.contains(i));
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m52[0m:[0m25[0m:            builder.add([0m[1m[31mcrate[0m_id, dependencies);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m59[0m:[0m14[0m:        Begin[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId, [0m[1m[31mcrate[0m_name: String },
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m60[0m:[0m12[0m:        End[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId },
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m67[0m:[0m27[0m:            while let Ok(([0m[1m[31mcrate[0m_id, [0m[1m[31mcrate[0m_name)) = work_receiver.recv() {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m69[0m:[0m66[0m:                    .send(ParallelPrimeCacheWorkerProgress::Begin[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id, [0m[1m[31mcrate[0m_name })?;
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m72[0m:[0m31[0m:                db.import_map([0m[1m[31mcrate[0m_id);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m74[0m:[0m75[0m:                progress_sender.send(ParallelPrimeCacheWorkerProgress::End[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id })?;
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m93[0m:[0m9[0m:    let [0m[1m[31mcrate[0ms_total = [0m[1m[31mcrate[0ms_to_prime.pending();
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m94[0m:[0m13[0m:    let mut [0m[1m[31mcrate[0ms_done = 0;
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m97[0m:[0m17[0m:    // "longest [0m[1m[31mcrate[0m to index" first
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m98[0m:[0m13[0m:    let mut [0m[1m[31mcrate[0ms_currently_indexing =
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m101[0m:[0m11[0m:    while [0m[1m[31mcrate[0ms_done < [0m[1m[31mcrate[0ms_total {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m104[0m:[0m13[0m:        for [0m[1m[31mcrate[0m_id in &mut [0m[1m[31mcrate[0ms_to_prime {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m107[0m:[0m21[0m:                    [0m[1m[31mcrate[0m_id,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m108[0m:[0m27[0m:                    graph[[0m[1m[31mcrate[0m_id].display_name.as_deref().unwrap_or_default().to_string(),
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m128[0m:[0m52[0m:            ParallelPrimeCacheWorkerProgress::Begin[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id, [0m[1m[31mcrate[0m_name } => {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m129[0m:[0m17[0m:                [0m[1m[31mcrate[0ms_currently_indexing.insert([0m[1m[31mcrate[0m_id, [0m[1m[31mcrate[0m_name);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m131[0m:[0m50[0m:            ParallelPrimeCacheWorkerProgress::End[0m[1m[31mCrate[0m { [0m[1m[31mcrate[0m_id } => {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m132[0m:[0m17[0m:                [0m[1m[31mcrate[0ms_currently_indexing.remove(&[0m[1m[31mcrate[0m_id);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m133[0m:[0m17[0m:                [0m[1m[31mcrate[0ms_to_prime.mark_done([0m[1m[31mcrate[0m_id);
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m134[0m:[0m17[0m:                [0m[1m[31mcrate[0ms_done += 1;
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m139[0m:[0m13[0m:            [0m[1m[31mcrate[0ms_currently_indexing: [0m[1m[31mcrate[0ms_currently_indexing.values().cloned().collect(),
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m140[0m:[0m13[0m:            [0m[1m[31mcrate[0ms_done,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m141[0m:[0m13[0m:            [0m[1m[31mcrate[0ms_total,
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m148[0m:[0m12[0m:fn compute_[0m[1m[31mcrate[0ms_to_prime(db: &RootDatabase, graph: &[0m[1m[31mCrate[0mGraph) -> FxHashSet<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m149[0m:[0m47[0m:    // We're only interested in the workspace [0m[1m[31mcrate[0ms and the `ImportMap`s of their direct
[0m[35mcrates/ide/src/prime_caches.rs[0m:[0m[32m160[0m:[0m72[0m:        .flat_map(|id| graph[id].dependencies.iter().map(|krate| krate.[0m[1m[31mcrate[0m_id))
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TopologicSortIterBuilder<T> {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add(&mut self, item: T, predecessors: impl IntoIterator<Item = T>) {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m34[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn build(self) -> TopologicalSortIter<T> {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m47[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TopologicalSortIter<T> {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m56[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn builder() -> TopologicSortIterBuilder<T> {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m60[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn pending(&self) -> usize {
[0m[35mcrates/ide/src/prime_caches/topologic_sort.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn mark_done(&mut self, item: T) {
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{navigation_target::ToNav, references, NavigationTarget, TryToNav};
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m52[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn highlight_related(
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m474[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m554[0m:[0m24[0m:    fn test_hl_self_in_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m557[0m:[0m5[0m:use [0m[1m[31mcrate[0m$0;
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m569[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/ide/src/highlight_related.rs[0m:[0m[32m572[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/ide/src/syntax_tree.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn syntax_tree(
[0m[35mcrates/ide/src/syntax_tree.rs[0m:[0m[32m108[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m11[0m:[0m65[0m:    db::DefDatabase, path::Path, AdtId, AssocItemId, AttrDefId, [0m[1m[31mCrate[0mId, EnumId, EnumVariantId,
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m89[0m:[0m66[0m:    /// Salsa query. This will look for lang items in a specific [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m90[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_lang_items_query(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<LangItems> {
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m91[0m:[0m33[0m:        let _p = profile::span("[0m[1m[31mcrate[0m_lang_items_query");
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m95[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m97[0m:[0m33[0m:        for (_, module_data) in [0m[1m[31mcrate[0m_def_map.modules() {
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m156[0m:[0m72[0m:    /// Salsa query. Look for a lang item, starting from the specified [0m[1m[31mcrate[0m and recursively
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m158[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lang_item_query(
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m160[0m:[0m15[0m:        start_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m164[0m:[0m29[0m:        let lang_items = db.[0m[1m[31mcrate[0m_lang_items(start_[0m[1m[31mcrate[0m);
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m165[0m:[0m19[0m:        let start_[0m[1m[31mcrate[0m_target = lang_items.items.get(&item);
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m166[0m:[0m38[0m:        if let Some(&target) = start_[0m[1m[31mcrate[0m_target {
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m169[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[start_[0m[1m[31mcrate[0m]
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m172[0m:[0m46[0m:            .find_map(|dep| db.lang_item(dep.[0m[1m[31mcrate[0m_id, item))
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m190[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn lang_attr_query(db: &dyn DefDatabase, item: AttrDefId) -> Option<LangItem> {
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m240[0m:[0m52[0m:    pub fn path(&self, db: &dyn DefDatabase, start_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId) -> Option<Path> {
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m241[0m:[0m36[0m:        let t = db.lang_item(start_[0m[1m[31mcrate[0m, *self)?;
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m248[0m:[0m15[0m:        start_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m251[0m:[0m36[0m:        let t = db.lang_item(start_[0m[1m[31mcrate[0m, *self)?;
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m343[0m:[0m28[0m:    // in the sense that a [0m[1m[31mcrate[0m is not required to have it defined to use it, but a final product
[0m[35mcrates/hir-def/src/lang_item.rs[0m:[0m[32m344[0m:[0m84[0m:    // is required to define it somewhere. Additionally, there are restrictions on [0m[1m[31mcrate[0ms that use
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m3[0m:[0m15[0m:    base_db::{[0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, Dependency, SourceDatabase, SourceDatabaseExt},
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m8[0m:[0m18[0m:// Feature: View [0m[1m[31mCrate[0m Graph
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m10[0m:[0m33[0m:// Renders the currently loaded [0m[1m[31mcrate[0m graph as an SVG graphic. Requires the `dot` tool, which
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m13[0m:[0m19[0m:// Only workspace [0m[1m[31mcrate[0ms are included, no [0m[1m[31mcrate[0ms.io dependencies or sysroot [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m18[0m:[0m38[0m:// | VS Code | **rust-analyzer: View [0m[1m[31mCrate[0m Graph**
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn view_[0m[1m[31mcrate[0m_graph(db: &RootDatabase, full: bool) -> Result<String, String> {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m21[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m22[0m:[0m9[0m:    let [0m[1m[31mcrate[0ms_to_render = [0m[1m[31mcrate[0m_graph
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m28[0m:[0m42[0m:                // Only render workspace [0m[1m[31mcrate[0ms
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m29[0m:[0m51[0m:                let root_id = db.file_source_root([0m[1m[31mcrate[0m_graph[*krate].root_file_id);
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m34[0m:[0m20[0m:    let graph = Dot[0m[1m[31mCrate[0mGraph { graph: [0m[1m[31mcrate[0m_graph, [0m[1m[31mcrate[0ms_to_render };
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m41[0m:[0m11[0m:struct Dot[0m[1m[31mCrate[0mGraph {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m42[0m:[0m16[0m:    graph: Arc<[0m[1m[31mCrate[0mGraph>,
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m43[0m:[0m5[0m:    [0m[1m[31mcrate[0ms_to_render: FxHashSet<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m46[0m:[0m18[0m:type Edge<'a> = ([0m[1m[31mCrate[0mId, &'a Dependency);
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m48[0m:[0m29[0m:impl<'a> dot::GraphWalk<'a, [0m[1m[31mCrate[0mId, Edge<'a>> for Dot[0m[1m[31mCrate[0mGraph {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m49[0m:[0m42[0m:    fn nodes(&'a self) -> dot::Nodes<'a, [0m[1m[31mCrate[0mId> {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m50[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms_to_render.iter().copied().collect()
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m54[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms_to_render
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m60[0m:[0m40[0m:                    .filter(|dep| self.[0m[1m[31mcrate[0ms_to_render.contains(&dep.[0m[1m[31mcrate[0m_id))
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m66[0m:[0m45[0m:    fn source(&'a self, edge: &Edge<'a>) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m70[0m:[0m45[0m:    fn target(&'a self, edge: &Edge<'a>) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m71[0m:[0m16[0m:        edge.1.[0m[1m[31mcrate[0m_id
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m75[0m:[0m28[0m:impl<'a> dot::Labeller<'a, [0m[1m[31mCrate[0mId, Edge<'a>> for Dot[0m[1m[31mCrate[0mGraph {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m77[0m:[0m32[0m:        Id::new("rust_analyzer_[0m[1m[31mcrate[0m_graph").unwrap()
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m80[0m:[0m30[0m:    fn node_id(&'a self, n: &[0m[1m[31mCrate[0mId) -> Id<'a> {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m84[0m:[0m37[0m:    fn node_shape(&'a self, _node: &[0m[1m[31mCrate[0mId) -> Option<LabelText<'a>> {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m88[0m:[0m33[0m:    fn node_label(&'a self, n: &[0m[1m[31mCrate[0mId) -> LabelText<'a> {
[0m[35mcrates/ide/src/view_crate_graph.rs[0m:[0m[32m89[0m:[0m74[0m:        let name = self.graph[*n].display_name.as_ref().map_or("(unnamed [0m[1m[31mcrate[0m)", |name| &*name);
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m2[0m:[0m34[0m:    base_db::{salsa::Durability, [0m[1m[31mCrate[0mGraph, ProcMacros, SourceDatabase},
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m7[0m:[0m21[0m:// Feature: Shuffle [0m[1m[31mCrate[0m Graph
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m9[0m:[0m19[0m:// Randomizes all [0m[1m[31mcrate[0m IDs in the [0m[1m[31mcrate[0m graph, for debugging.
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m14[0m:[0m41[0m:// | VS Code | **rust-analyzer: Shuffle [0m[1m[31mCrate[0m Graph**
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn shuffle_[0m[1m[31mcrate[0m_graph(db: &mut RootDatabase) {
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m17[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m20[0m:[0m28[0m:    let mut shuffled_ids = [0m[1m[31mcrate[0m_graph.iter().collect::<Vec<_>>();
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m25[0m:[0m25[0m:    let mut new_graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m30[0m:[0m21[0m:        let data = &[0m[1m[31mcrate[0m_graph[old_id];
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m31[0m:[0m36[0m:        let new_id = new_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m49[0m:[0m21[0m:        let data = &[0m[1m[31mcrate[0m_graph[old_id];
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m52[0m:[0m21[0m:            new_dep.[0m[1m[31mcrate[0m_id = map[&dep.[0m[1m[31mcrate[0m_id];
[0m[35mcrates/ide/src/shuffle_crate_graph.rs[0m:[0m[32m57[0m:[0m12[0m:    db.set_[0m[1m[31mcrate[0m_graph_with_durability(Arc::new(new_graph), Durability::HIGH);
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::FileRange;
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m252[0m:[0m47[0m:            IDENT | T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self] | LIFETIME_IDENT => 2,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m329[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m558[0m:[0m46[0m:            r#"fn main() { let _: (krate, $0_[0m[1m[31mcrate[0m_def_map, module_id) = (); }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m559[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map, ", "(krate, _[0m[1m[31mcrate[0m_def_map, module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m563[0m:[0m45[0m:            r#"fn main() { let _: (krate,$0_[0m[1m[31mcrate[0m_def_map,module_id) = (); }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m564[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map,", "(krate,_[0m[1m[31mcrate[0m_def_map,module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m570[0m:[0m6[0m:    _[0m[1m[31mcrate[0m$0_def_map,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m574[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m575[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map,",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m576[0m:[0m38[0m:                "(\n    krate,\n    _[0m[1m[31mcrate[0m_def_map,\n    module_id\n)",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m584[0m:[0m47[0m:            r#"fn main() { let var = (krate, _[0m[1m[31mcrate[0m_def_map$0, module_id); }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m585[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map, ", "(krate, _[0m[1m[31mcrate[0m_def_map, module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m589[0m:[0m46[0m:            r#"fn main() { let var = (krate,_[0m[1m[31mcrate[0m$0_def_map,module_id); }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m590[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map,", "(krate,_[0m[1m[31mcrate[0m_def_map,module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m596[0m:[0m6[0m:    _[0m[1m[31mcrate[0m_def_map$0,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m600[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m601[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map,",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m602[0m:[0m38[0m:                "(\n    krate,\n    _[0m[1m[31mcrate[0m_def_map,\n    module_id\n)",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m610[0m:[0m41[0m:            r#"fn main() { let (krate, _[0m[1m[31mcrate[0m_def_map$0, module_id) = var; }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m611[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map, ", "(krate, _[0m[1m[31mcrate[0m_def_map, module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m615[0m:[0m40[0m:            r#"fn main() { let (krate,_[0m[1m[31mcrate[0m$0_def_map,module_id) = var; }"#,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m616[0m:[0m17[0m:            &["_[0m[1m[31mcrate[0m_def_map", "_[0m[1m[31mcrate[0m_def_map,", "(krate,_[0m[1m[31mcrate[0m_def_map,module_id)"],
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m622[0m:[0m6[0m:    _[0m[1m[31mcrate[0m_def_map$0,
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m626[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m627[0m:[0m19[0m:                "_[0m[1m[31mcrate[0m_def_map,",
[0m[35mcrates/ide/src/extend_selection.rs[0m:[0m[32m628[0m:[0m38[0m:                "(\n    krate,\n    _[0m[1m[31mcrate[0m_def_map,\n    module_id\n)",
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{references, FileId, NavigationTarget, ToNav, TryToNav};
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m123[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m207[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn related_tests(
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m307[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn runnable_fn(
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m345[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn runnable_mod(
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m366[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn runnable_impl(
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m556[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m1454[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo
[0m[35mcrates/ide/src/runnables.rs[0m:[0m[32m1515[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo,feature=bar
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m4[0m:[0m44[0m:use hir::{AsAssocItem, AssocItemContainer, [0m[1m[31mCrate[0m, Semantics};
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m6[0m:[0m15[0m:    base_db::{[0m[1m[31mCrate[0mOrigin, FilePosition, Lang[0m[1m[31mCrate[0mOrigin},
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{doc_links::token_as_doc_comment, parent_module::[0m[1m[31mcrate[0ms_for, RangeInfo};
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m36[0m:[0m9[0m:    pub [0m[1m[31mcrate[0m_name: String,
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m43[0m:[0m46[0m:            MonikerIdentifier { description, [0m[1m[31mcrate[0m_name } => {
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m44[0m:[0m35[0m:                format!("{}::{}", [0m[1m[31mcrate[0m_name, description.iter().map(|x| &x.name).join("::"))
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m64[0m:[0m62[0m:    pub fn from_def(db: &RootDatabase, def: Definition, from_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0m) -> Option<Self> {
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m65[0m:[0m38[0m:        def_to_moniker(db, def, from_[0m[1m[31mcrate[0m)
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m76[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn moniker(
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m82[0m:[0m17[0m:    let current_[0m[1m[31mcrate[0m: hir::[0m[1m[31mCrate[0m = [0m[1m[31mcrate[0ms_for(db, file_id).pop()?.into();
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m89[0m:[0m14[0m:        | T![[0m[1m[31mcrate[0m]
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m97[0m:[0m53[0m:            let m = def_to_moniker(db, def, current_[0m[1m[31mcrate[0m)?;
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m106[0m:[0m84[0m:                it.into_iter().flat_map(|def| def_to_moniker(sema.db, def, current_[0m[1m[31mcrate[0m))
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m115[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn def_to_moniker(
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m118[0m:[0m10[0m:    from_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m261[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(m) => MonikerDescriptor {
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m271[0m:[0m13[0m:            [0m[1m[31mcrate[0m_name: krate.display_name(db)?.[0m[1m[31mcrate[0m_name().to_string(),
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m274[0m:[0m32[0m:        kind: if krate == from_[0m[1m[31mcrate[0m { MonikerKind::Export } else { MonikerKind::Import },
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m277[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Library { repo, name } => (name, repo, krate.version(db)),
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m278[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Local { repo, name } => (
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m283[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Rustc { name } => (
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m288[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Lang(lang) => (
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m292[0m:[0m29[0m:                        Lang[0m[1m[31mCrate[0mOrigin::Other => {
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m306[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m333[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m338[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m349[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m354[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m369[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m386[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m403[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m420[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m443[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m448[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m463[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/moniker.rs[0m:[0m[32m468[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/ide/src/inlay_hints.rs[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{navigation_target::TryToNav, FileId};
[0m[35mcrates/ide/src/inlay_hints.rs[0m:[0m[32m439[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inlay_hints(
[0m[35mcrates/ide/src/inlay_hints.rs[0m:[0m[32m567[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::inlay_hints::{AdjustmentHints, AdjustmentHintsMode};
[0m[35mcrates/ide/src/inlay_hints.rs[0m:[0m[32m568[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::DiscriminantHints;
[0m[35mcrates/ide/src/inlay_hints.rs[0m:[0m[32m569[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m2[0m:[0m15[0m:    base_db::{[0m[1m[31mCrate[0mOrigin, FileId, SourceDatabase},
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m7[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mInfo {
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fetch_[0m[1m[31mcrate[0ms(db: &RootDatabase) -> FxIndexSet<[0m[1m[31mCrate[0mInfo> {
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m25[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m26[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m28[0m:[0m15[0m:        .map(|[0m[1m[31mcrate[0m_id| &[0m[1m[31mcrate[0m_graph[[0m[1m[31mcrate[0m_id])
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m29[0m:[0m48[0m:        .filter(|&data| !matches!(data.origin, [0m[1m[31mCrate[0mOrigin::Local { .. }))
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m30[0m:[0m21[0m:        .map(|data| [0m[1m[31mcrate[0m_info(data))
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m34[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_info(data: &ide_db::base_db::[0m[1m[31mCrate[0mData) -> [0m[1m[31mCrate[0mInfo {
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m35[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_name = [0m[1m[31mcrate[0m_name(data);
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m37[0m:[0m5[0m:    [0m[1m[31mCrate[0mInfo { name: [0m[1m[31mcrate[0m_name, version, root_file_id: data.root_file_id }
[0m[35mcrates/ide/src/fetch_crates.rs[0m:[0m[32m40[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_name(data: &ide_db::base_db::[0m[1m[31mCrate[0mData) -> Option<String> {
[0m[35mcrates/ide/src/inlay_hints/chaining.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FileId, InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind};
[0m[35mcrates/ide/src/inlay_hints/chaining.rs[0m:[0m[32m80[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/fn_lifetime_fn.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind, LifetimeElisionHints};
[0m[35mcrates/ide/src/inlay_hints/fn_lifetime_fn.rs[0m:[0m[32m220[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/param_name.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};
[0m[35mcrates/ide/src/inlay_hints/param_name.rs[0m:[0m[32m253[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/bind_pat.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/bind_pat.rs[0m:[0m[32m180[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, inlay_hints::InlayHintsConfig, ClosureReturnTypeHints};
[0m[35mcrates/ide/src/inlay_hints/bind_pat.rs[0m:[0m[32m182[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::inlay_hints::tests::{
[0m[35mcrates/ide/src/inlay_hints/bind_pat.rs[0m:[0m[32m1045[0m:[0m49[0m:                        let a: S<inner::S<i64>, [0m[1m[31mcrate[0m::S<usize>> = make();
[0m[35mcrates/ide/src/view_memory_layout.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::FilePosition;
[0m[35mcrates/ide/src/view_memory_layout.rs[0m:[0m[32m92[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn view_memory_layout(
[0m[35mcrates/ide/src/view_memory_layout.rs[0m:[0m[32m225[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/inlay_hints/adjustment.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/adjustment.rs[0m:[0m[32m280[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/implicit_static.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind, LifetimeElisionHints};
[0m[35mcrates/ide/src/inlay_hints/implicit_static.rs[0m:[0m[32m51[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/closure_ret.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/closure_ret.rs[0m:[0m[32m81[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::inlay_hints::tests::{check_with_config, DISABLED_CONFIG};
[0m[35mcrates/ide/src/inlay_hints/binding_mode.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{InlayHint, InlayHintPosition, InlayHintsConfig, InlayKind};
[0m[35mcrates/ide/src/inlay_hints/binding_mode.rs[0m:[0m[32m100[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/discriminant.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/discriminant.rs[0m:[0m[32m99[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::inlay_hints::{
[0m[35mcrates/ide/src/file_structure.rs[0m:[0m[32m41[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {
[0m[35mcrates/ide/src/join_lines.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn join_lines(
[0m[35mcrates/ide/src/inlay_hints/closing_brace.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FileId, InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};
[0m[35mcrates/ide/src/inlay_hints/closing_brace.rs[0m:[0m[32m127[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/inlay_hints/closure_captures.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{InlayHint, InlayHintLabel, InlayHintPosition, InlayHintsConfig, InlayKind};
[0m[35mcrates/ide/src/inlay_hints/closure_captures.rs[0m:[0m[32m118[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/view_item_tree.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn view_item_tree(db: &RootDatabase, file_id: FileId) -> String {
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m1[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod tags;
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use html::highlight_as_html;
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m165[0m:[0m4[0m:// [0m[1m[31mcrate[0mRoot:: Emitted for [0m[1m[31mcrate[0m names, like `serde` and `[0m[1m[31mcrate[0m`.
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m167[0m:[0m53[0m:// defaultLibrary:: Emitted for items from built-in [0m[1m[31mcrate[0ms (std, core, alloc, test and proc_macro).
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m171[0m:[0m72[0m:// library:: Emitted for items that are defined outside of the current [0m[1m[31mcrate[0m.
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m174[0m:[0m57[0m:// public:: Emitted for items that are from the current [0m[1m[31mcrate[0m and are `pub`.
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m183[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn highlight(
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m223[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting.rs[0m:[0m[32m408[0m:[0m56[0m:                            (T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self], NAME_REF) => {
[0m[35mcrates/ide/src/typing.rs[0m:[0m[32m30[0m:[0m5[0m:use [0m[1m[31mcrate[0m::SourceChange;
[0m[35mcrates/ide/src/typing.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use on_enter::on_enter;
[0m[35mcrates/ide/src/typing.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const TRIGGER_CHARS: &str = ".=<>{(";
[0m[35mcrates/ide/src/typing.rs[0m:[0m[32m63[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn on_char_typed(
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m128[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m139[0m:[0m26[0m:fn external_docs_doc_url_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m142[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m144[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m155[0m:[0m30[0m:fn external_docs_doc_url_std_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m158[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m172[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m186[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m200[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m214[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m230[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m244[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m257[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m274[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m290[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m306[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m326[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m338[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m350[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m366[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m380[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m396[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m420[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:krate
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m452[0m:[0m15[0m://- /krate.rs [0m[1m[31mcrate[0m:krate
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m581[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m598[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m612[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m620[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m628[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m636[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m644[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/doc_links/tests.rs[0m:[0m[32m654[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::FilePosition;
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<ExpandedMacro> {
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m175[0m:[0m18[0m:    const DOLLAR_[0m[1m[31mCRATE[0m_REPLACE: &str = "__r_a_";
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m176[0m:[0m41[0m:    let expansion = expansion.replace("$[0m[1m[31mcrate[0m", DOLLAR_[0m[1m[31mCRATE[0m_REPLACE);
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m185[0m:[0m10[0m:    let &[0m[1m[31mcrate[0m_id = db.relevant_[0m[1m[31mcrate[0ms(file_id).iter().next()?;
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m186[0m:[0m22[0m:    let edition = db.[0m[1m[31mcrate[0m_graph()[[0m[1m[31mcrate[0m_id].edition;
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m205[0m:[0m53[0m:        let output = captured_stdout.replace(DOLLAR_[0m[1m[31mCRATE[0m_REPLACE, "$[0m[1m[31mcrate[0m");
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m225[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m428[0m:[0m33[0m:    fn macro_expand_with_dollar_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/expand_macro.rs[0m:[0m[32m436[0m:[0m13[0m:    () => {$[0m[1m[31mcrate[0m::bar!()};
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m103[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn hover(
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m134[0m:[0m14[0m:        | T![[0m[1m[31mcrate[0m]
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m188[0m:[0m70[0m:                        IdentClass::NameRefClass(NameRefClass::Extern[0m[1m[31mCrate[0mShorthand {
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m191[0m:[0m60[0m:                        }) => Some(vec![(Definition::Extern[0m[1m[31mCrate[0mDecl(decl), node)]),
[0m[35mcrates/ide/src/hover.rs[0m:[0m[32m297[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn hover_for_definition(
[0m[35mcrates/ide/src/annotations.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/annotations.rs[0m:[0m[32m54[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn annotations(
[0m[35mcrates/ide/src/annotations.rs[0m:[0m[32m177[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation) -> Annotation {
[0m[35mcrates/ide/src/annotations.rs[0m:[0m[32m210[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, Annotation, AnnotationConfig};
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m13[0m:[0m9[0m:        [0m[1m[31mCrate[0mId, FileId, FileTextQuery, ParseQuery, SourceDatabase, SourceRootId,
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m58[0m:[0m13[0m:        let [0m[1m[31mcrate[0ms = [0m[1m[31mcrate[0m::parent_module::[0m[1m[31mcrate[0ms_for(db, file_id);
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m59[0m:[0m12[0m:        if [0m[1m[31mcrate[0ms.is_empty() {
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m60[0m:[0m53[0m:            format_to!(buf, "Does not belong to any [0m[1m[31mcrate[0m");
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m62[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m63[0m:[0m22[0m:        for krate in [0m[1m[31mcrate[0ms {
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m64[0m:[0m25[0m:            let display_[0m[1m[31mcrate[0m = |krate: [0m[1m[31mCrate[0mId| match &[0m[1m[31mcrate[0m_graph[krate].display_name {
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m68[0m:[0m30[0m:            format_to!(buf, "[0m[1m[31mCrate[0m: {}\n", display_[0m[1m[31mcrate[0m(krate));
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m69[0m:[0m53[0m:            format_to!(buf, "Enabled cfgs: {:?}\n", [0m[1m[31mcrate[0m_graph[krate].cfg_options);
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m70[0m:[0m24[0m:            let deps = [0m[1m[31mcrate[0m_graph[krate]
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m73[0m:[0m61[0m:                .map(|dep| format!("{}={:?}", dep.name, dep.[0m[1m[31mcrate[0m_id))
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m178[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct SyntaxTreeStats<const MACROS: bool> {
[0m[35mcrates/ide/src/status.rs[0m:[0m[32m180[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) retained: usize,
[0m[35mcrates/ide/src/markdown_remove.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_markdown(markdown: &str) -> String {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m72[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait ToNav {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m76[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait TryToNav {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m94[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m114[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_render(&self) -> String {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m132[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_named(
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m225[0m:[0m31[0m:            Definition::Extern[0m[1m[31mCrate[0mDecl(it) => Some(it.try_to_nav(db)?),
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m253[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait ToNavFromAst: Sized {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m384[0m:[0m30[0m:impl TryToNav for hir::Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/ide/src/navigation_target.rs[0m:[0m[32m650[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, Query};
[0m[35mcrates/ide/src/interpret_function.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn interpret_function(db: &RootDatabase, position: FilePosition) -> String {
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m3[0m:[0m15[0m:    base_db::{[0m[1m[31mCrate[0mId, FileId, FileLoader, FilePosition},
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::NavigationTarget;
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<NavigationTarget> {
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m58[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0ms_for(db: &RootDatabase, file_id: FileId) -> Vec<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m59[0m:[0m17[0m:    db.relevant_[0m[1m[31mcrate[0ms(file_id)
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m62[0m:[0m19[0m:        .filter(|&[0m[1m[31mcrate[0m_id| db.[0m[1m[31mcrate[0m_def_map([0m[1m[31mcrate[0m_id).modules_for_file(file_id).next().is_some())
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m71[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m145[0m:[0m21[0m:    fn test_resolve_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m154[0m:[0m29[0m:        assert_eq!(analysis.[0m[1m[31mcrate[0ms_for(file_id).unwrap().len(), 1);
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m158[0m:[0m34[0m:    fn test_resolve_multi_parent_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m163[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m165[0m:[0m13[0m://- /bar.rs [0m[1m[31mcrate[0m:bar
[0m[35mcrates/ide/src/parent_module.rs[0m:[0m[32m169[0m:[0m29[0m:        assert_eq!(analysis.[0m[1m[31mcrate[0ms_for(file_id).unwrap().len(), 2);
[0m[35mcrates/ide/src/view_mir.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn view_mir(db: &RootDatabase, position: FilePosition) -> String {
[0m[35mcrates/ide/src/annotations/fn_references.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::FileId;
[0m[35mcrates/ide/src/annotations/fn_references.rs[0m:[0m[32m37[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/annotations/fn_references.rs[0m:[0m[32m38[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::TextSize;
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file(ra_fixture: &str) -> (Analysis, FileId) {
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn position(ra_fixture: &str) -> (Analysis, FilePosition) {
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn range(ra_fixture: &str) -> (Analysis, FileRange) {
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m39[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrOffset) {
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m49[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {
[0m[35mcrates/ide/src/fixture.rs[0m:[0m[32m70[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn annotations_without_marker(ra_fixture: &str) -> (Analysis, Vec<(FileRange, String)>) {
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn goto_definition(
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m42[0m:[0m14[0m:        | T![[0m[1m[31mcrate[0m]
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m73[0m:[0m50[0m:                        if let Definition::Extern[0m[1m[31mCrate[0mDecl([0m[1m[31mcrate[0m_def) = def {
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m74[0m:[0m36[0m:                            return [0m[1m[31mcrate[0m_def
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m75[0m:[0m43[0m:                                .resolved_[0m[1m[31mcrate[0m(db)
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m170[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m239[0m:[0m28[0m:    fn goto_def_for_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m242[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m243[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std$0;
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m244[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m252[0m:[0m36[0m:    fn goto_def_for_renamed_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m255[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m256[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std as abc$0;
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m257[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m344[0m:[0m39[0m:    fn goto_def_for_macros_from_other_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m347[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m353[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m365[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m368[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m451[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m454[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m465[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m468[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m812[0m:[0m24[0m:    ($($arg:tt)*) => ($[0m[1m[31mcrate[0m::fmt::format($[0m[1m[31mcrate[0m::__export::format_args!($($arg)*)))
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m821[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::format_args;
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1062[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1065[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1070[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::_mac as mac;
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1349[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:mac
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1354[0m:[0m13[0m://- /mac.rs [0m[1m[31mcrate[0m:mac
[0m[35mcrates/ide/src/goto_definition.rs[0m:[0m[32m1355[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{goto_definition, FilePosition, NavigationTarget, RangeInfo, TryToNav};
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_render(&self) -> String {
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn call_hierarchy(
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn incoming_calls(
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m77[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn outgoing_calls(
[0m[35mcrates/ide/src/call_hierarchy.rs[0m:[0m[32m148[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m54[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<TextEdit> {
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m199[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m526[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{$0};
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m529[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m536[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{$0Object, path::to::OtherThing};
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m539[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m546[0m:[0m6[0m:use {[0m[1m[31mcrate[0m::{$0Object, path::to::OtherThing}};
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m549[0m:[0m6[0m:use {[0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m557[0m:[0m5[0m:    [0m[1m[31mcrate[0m::{$0Object, path::to::OtherThing}
[0m[35mcrates/ide/src/typing/on_enter.rs[0m:[0m[32m562[0m:[0m5[0m:    [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FilePosition, RangeInfo, SourceChange};
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn prepare_rename(
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m84[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn rename(
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m117[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn will_rename_file(
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m149[0m:[0m86[0m:                        // FIXME: uncomment this once we resolve to usages to extern [0m[1m[31mcrate[0m declarations
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m154[0m:[0m63[0m:                        //     .map_or(true, |it| !ast::Extern[0m[1m[31mCrate[0m::can_cast(it.kind()))
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m175[0m:[0m49[0m:                            NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, .. } => {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m176[0m:[0m51[0m:                                Definition::Extern[0m[1m[31mCrate[0mDecl(decl)
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m179[0m:[0m86[0m:                        // FIXME: uncomment this once we resolve to usages to extern [0m[1m[31mcrate[0m declarations
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m180[0m:[0m72[0m:                        .filter(|def| !matches!(def, Definition::Extern[0m[1m[31mCrate[0mDecl(..)))
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m360[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, FileId};
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m955[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo$0::FooContent;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m1324[0m:[0m28[0m:    fn test_rename_mod_for_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m1329[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo as bar;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2534[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2537[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2538[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2540[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2544[0m:[0m93[0m:        // FIXME: replace above check_prepare with this once we resolve to usages to extern [0m[1m[31mcrate[0m declarations
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2548[0m:[0m24[0m:        // //- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2549[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m foo$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2551[0m:[0m24[0m:        // //- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2554[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m foo as bar;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2561[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m_rename() {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2564[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2565[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo as qux$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2567[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2571[0m:[0m93[0m:        // FIXME: replace above check_prepare with this once we resolve to usages to extern [0m[1m[31mcrate[0m
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2576[0m:[0m24[0m:        // //- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2577[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m foo as qux$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2579[0m:[0m24[0m:        // //- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2582[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m foo as bar;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2589[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m_self() {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2592[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2597[0m:[0m93[0m:        // FIXME: replace above check_prepare with this once we resolve to usages to extern [0m[1m[31mcrate[0m declarations
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2601[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m self$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2605[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m self as bar;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2612[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m_self_rename() {
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2615[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2616[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self as qux$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2618[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2622[0m:[0m93[0m:        // FIXME: replace above check_prepare with this once we resolve to usages to extern [0m[1m[31mcrate[0m declarations
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2626[0m:[0m24[0m:        // //- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2627[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m self as qux$0;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2629[0m:[0m24[0m:        // //- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2632[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m self as bar;
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2643[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2645[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide/src/rename.rs[0m:[0m[32m2658[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/ide/src/ssr.rs[0m:[0m[32m2[0m:[0m70[0m://! assist in ide_assists because that would require the ide_assists [0m[1m[31mcrate[0m
[0m[35mcrates/ide/src/ssr.rs[0m:[0m[32m3[0m:[0m27[0m://! depend on the ide_ssr [0m[1m[31mcrate[0m.
[0m[35mcrates/ide/src/ssr.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn ssr_assists(
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FilePosition, NavigationTarget, RangeInfo, TryToNav};
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn goto_implementation(
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m51[0m:[0m47[0m:                        | NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { .. } => None,
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m120[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m189[0m:[0m6[0m:impl [0m[1m[31mcrate[0m::Foo {}
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m192[0m:[0m6[0m:impl [0m[1m[31mcrate[0m::Foo {}
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m220[0m:[0m6[0m:impl [0m[1m[31mcrate[0m::T for [0m[1m[31mcrate[0m::Foo {}
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m223[0m:[0m6[0m:impl [0m[1m[31mcrate[0m::T for [0m[1m[31mcrate[0m::Foo {}
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m292[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/ide/src/goto_implementation.rs[0m:[0m[32m294[0m:[0m17[0m://- /libcore.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m6[0m:[0m28[0m:use hir::{db::HirDatabase, [0m[1m[31mCrate[0m, Module};
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::inlay_hints::InlayFieldsToResolve;
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m20[0m:[0m20[0m:    parent_module::[0m[1m[31mcrate[0ms_for,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m92[0m:[0m9[0m:        [0m[1m[31mCrate[0m::all(db).into_iter().map(|krate| krate.root_module()).collect();
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m105[0m:[0m21[0m:        let current_[0m[1m[31mcrate[0m = [0m[1m[31mcrate[0ms_for(self.db, file_id).pop().map(Into::into);
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m112[0m:[0m41[0m:                    discriminant_hints: [0m[1m[31mcrate[0m::DiscriminantHints::Fieldless,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m116[0m:[0m48[0m:                    closure_return_type_hints: [0m[1m[31mcrate[0m::ClosureReturnTypeHints::WithBlock,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m117[0m:[0m45[0m:                    lifetime_elision_hints: [0m[1m[31mcrate[0m::LifetimeElisionHints::Never,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m118[0m:[0m39[0m:                    adjustment_hints: [0m[1m[31mcrate[0m::AdjustmentHints::Never,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m147[0m:[0m21[0m:            format: [0m[1m[31mcrate[0m::HoverDocFormat::Markdown,
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m152[0m:[0m81[0m:                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self]
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m173[0m:[0m38[0m:                    moniker: current_[0m[1m[31mcrate[0m.and_then(|cc| def_to_moniker(self.db, def, cc)),
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m222[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, StaticIndex};
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m287[0m:[0m14[0m:    fn multi_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m290[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/static_index.rs[0m:[0m[32m299[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m69[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn signature_help(
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m649[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m652[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m671[0m:[0m24[0m:        let sig_help = [0m[1m[31mcrate[0m::signature_help::signature_help(&db, position);
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m914[0m:[0m22[0m:/// assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m931[0m:[0m34[0m:                assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m953[0m:[0m26[0m:    /// assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/signature_help.rs[0m:[0m[32m973[0m:[0m34[0m:                assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/move_item.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_item(
[0m[35mcrates/ide/src/move_item.rs[0m:[0m[32m177[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/move_item.rs[0m:[0m[32m180[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::Direction;
[0m[35mcrates/ide/src/goto_type_definition.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FilePosition, NavigationTarget, RangeInfo, TryToNav};
[0m[35mcrates/ide/src/goto_type_definition.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn goto_type_definition(
[0m[35mcrates/ide/src/goto_type_definition.rs[0m:[0m[32m101[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/folding_ranges.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m29[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FilePosition, NavigationTarget, TryToNav};
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m54[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn find_all_refs(
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m117[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn find_defs<'a>(
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m125[0m:[0m77[0m:            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self]
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m140[0m:[0m49[0m:                            NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, .. } => {
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m141[0m:[0m51[0m:                                Definition::Extern[0m[1m[31mCrate[0mDecl(decl)
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m168[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn decl_mutability(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> bool {
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m301[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{fixture, SearchScope};
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m699[0m:[0m5[0m:use [0m[1m[31mcrate[0m::bar;
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m710[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo;
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m774[0m:[0m47[0m:    fn test_find_all_refs_decl_module_on_self_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m967[0m:[0m5[0m:use [0m[1m[31mcrate[0m::f;
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1452[0m:[0m38[0m://- /level3.rs new_source_root:local [0m[1m[31mcrate[0m:level3
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1454[0m:[0m38[0m://- /level2.rs new_source_root:local [0m[1m[31mcrate[0m:level2 deps:level3
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1456[0m:[0m38[0m://- /level1.rs new_source_root:local [0m[1m[31mcrate[0m:level1 deps:level2
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1458[0m:[0m38[0m://- /level0.rs new_source_root:local [0m[1m[31mcrate[0m:level0 deps:level1
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1475[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1488[0m:[0m15[0m://- /other.rs [0m[1m[31mcrate[0m:other deps:lib new_source_root:local
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1613[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/ide/src/references.rs[0m:[0m[32m1663[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/ide/src/syntax_highlighting/escape.rs[0m:[0m[32m2[0m:[0m5[0m:use [0m[1m[31mcrate[0m::syntax_highlighting::highlights::Highlights;
[0m[35mcrates/ide/src/syntax_highlighting/escape.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{HlRange, HlTag};
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fixture, FileRange, HighlightConfig, HlTag, TextRange};
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m51[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m113[0m:[0m17[0m://- /foo/foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m129[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m318[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m378[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m380[0m:[0m5[0m:use [0m[1m[31mcrate[0m;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m407[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::io::_print(format_args_nl!($($arg)*));
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m417[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic("explicit panic")
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m420[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic($msg)
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m424[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic_str($msg)
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m428[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic_display(&$arg)
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m431[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic_fmt(const_format_args!($fmt, $($arg)+))
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m447[0m:[0m13[0m:    () => ($[0m[1m[31mcrate[0m::panic!("not yet implemented"));
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m448[0m:[0m24[0m:    ($($arg:tt)+) => ($[0m[1m[31mcrate[0m::panic!("not yet implemented: {}", format_args!($($arg)+)));
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m804[0m:[0m16[0m:fn test_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m807[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std,alloc
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m808[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m809[0m:[0m8[0m:extern [0m[1m[31mcrate[0m alloc as abc;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m810[0m:[0m8[0m:extern [0m[1m[31mcrate[0m unresolved as definitely_unresolved;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m811[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m813[0m:[0m19[0m://- /alloc/lib.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m816[0m:[0m52[0m:        expect_file!["./test_data/highlight_extern_[0m[1m[31mcrate[0m.html"],
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m822[0m:[0m9[0m:fn test_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m826[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m827[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m834[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn main() {
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m843[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::foooo::Point;
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m848[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m855[0m:[0m27[0m:    pub(super) fn swap(p: [0m[1m[31mcrate[0m::Point) -> [0m[1m[31mcrate[0m::Point {
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m856[0m:[0m9[0m:        [0m[1m[31mcrate[0m::Point { x: p.y, y: p.x }
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m860[0m:[0m45[0m:        expect_file!["./test_data/highlight_[0m[1m[31mcrate[0m_root.html"],
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m973[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m974[0m:[0m6[0m:/// [[0m[1m[31mcrate[0m::foo::Struct]
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m976[0m:[0m6[0m:/// [[0m[1m[31mcrate[0m::foo::Struct]
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m985[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m986[0m:[0m6[0m:/// [[0m[1m[31mcrate[0m::foo::Struct]
[0m[35mcrates/ide/src/syntax_highlighting/tests.rs[0m:[0m[32m988[0m:[0m6[0m:/// [[0m[1m[31mcrate[0m::foo::Struct]
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn goto_declaration(
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m29[0m:[0m74[0m:        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self]))?;
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m42[0m:[0m45[0m:                        NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, .. } =>
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m60[0m:[0m35[0m:                Definition::Extern[0m[1m[31mCrate[0mDecl(it) => return it.try_to_nav(db),
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m83[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::fixture;
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m221[0m:[0m29[0m:    fn goto_decl_for_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m224[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m225[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std$0;
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m227[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m234[0m:[0m37[0m:    fn goto_decl_for_renamed_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m237[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m238[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std as abc$0;
[0m[35mcrates/ide/src/goto_declaration.rs[0m:[0m[32m240[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m44[0m:[0m54[0m:// Don't forget to adjust the feature description in [0m[1m[31mcrate[0ms/ide/src/syntax_highlighting.rs.
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m45[0m:[0m81[0m:// And make sure to use the lsp strings used when converting to the protocol in [0m[1m[31mcrate[0ms\rust-analyzer\src\semantic_tokens.rs, not the names of the variants here.
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m61[0m:[0m18[0m:    /// Used for [0m[1m[31mcrate[0m names, like `serde`.
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m62[0m:[0m5[0m:    [0m[1m[31mCrate[0mRoot,
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m63[0m:[0m38[0m:    /// Used for items from built-in [0m[1m[31mcrate[0ms (std, core, alloc, test and proc_macro).
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m74[0m:[0m35[0m:    /// Used for items from other [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m214[0m:[0m16[0m:        HlMod::[0m[1m[31mCrate[0mRoot,
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m238[0m:[0m20[0m:            HlMod::[0m[1m[31mCrate[0mRoot => "[0m[1m[31mcrate[0m_root",
[0m[35mcrates/ide/src/syntax_highlighting/tags.rs[0m:[0m[32m302[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(tag: HlTag) -> Highlight {
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m28[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m379[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_name =
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m380[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[module.krate().into()].display_name.as_ref().map(|it| it.to_string());
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m386[0m:[0m5[0m:    [0m[1m[31mcrate[0m_name.into_iter().chain(module_path).chain(item_name).join("::")
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m476[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(it) => label_and_docs(db, it),
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m738[0m:[0m13[0m:    let std_[0m[1m[31mcrate[0m = famous_defs.std()?;
[0m[35mcrates/ide/src/hover/render.rs[0m:[0m[32m739[0m:[0m31[0m:    let std_root_module = std_[0m[1m[31mcrate[0m.root_module();
[0m[35mcrates/ide/src/syntax_highlighting/macro_.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{HlRange, HlTag};
[0m[35mcrates/ide/src/syntax_highlighting/highlights.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{HlRange, HlTag};
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m50[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m181[0m:[0m12[0m:        // [0m[1m[31mcrate[0m is handled just as a token if it's in an `extern [0m[1m[31mcrate[0m`
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m182[0m:[0m12[0m:        T![[0m[1m[31mcrate[0m] if parent_matches::<ast::Extern[0m[1m[31mCrate[0m>(&token) => h,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m183[0m:[0m18[0m:        // self, [0m[1m[31mcrate[0m, super and `Self` are handled as either a Name or NameRef already, unless they
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m185[0m:[0m23[0m:        T![self] | T![[0m[1m[31mcrate[0m] | T![super] | T![Self] if parent_matches::<ast::NameRef>(&token) => {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m200[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m275[0m:[0m29[0m:        NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, krate: resolved_krate } => {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m285[0m:[0m33[0m:            let is_from_builtin_[0m[1m[31mcrate[0m = resolved_krate.is_builtin(db);
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m286[0m:[0m32[0m:            if is_from_builtin_[0m[1m[31mcrate[0m {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m289[0m:[0m25[0m:            h |= HlMod::[0m[1m[31mCrate[0mRoot;
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m297[0m:[0m24[0m:        T![super] | T![[0m[1m[31mcrate[0m] => HlTag::Keyword,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m307[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m353[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m362[0m:[0m26[0m:            if module.is_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m363[0m:[0m29[0m:                h |= HlMod::[0m[1m[31mCrate[0mRoot;
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m496[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(extern_[0m[1m[31mcrate[0m) => {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m498[0m:[0m76[0m:                Highlight::new(HlTag::Symbol(SymbolKind::Module)) | HlMod::[0m[1m[31mCrate[0mRoot;
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m499[0m:[0m23[0m:            if extern_[0m[1m[31mcrate[0m.alias(db).is_none() {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m510[0m:[0m13[0m:    let def_[0m[1m[31mcrate[0m = def.krate(db);
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m511[0m:[0m23[0m:    let is_from_other_[0m[1m[31mcrate[0m = def_[0m[1m[31mcrate[0m != Some(krate);
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m512[0m:[0m25[0m:    let is_from_builtin_[0m[1m[31mcrate[0m = def_[0m[1m[31mcrate[0m.map_or(false, |def_[0m[1m[31mcrate[0m| def_[0m[1m[31mcrate[0m.is_builtin(db));
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m516[0m:[0m26[0m:    match (is_from_other_[0m[1m[31mcrate[0m, is_builtin_type, is_public) {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m522[0m:[0m24[0m:    if is_from_builtin_[0m[1m[31mcrate[0m {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m531[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m540[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m562[0m:[0m13[0m:    let def_[0m[1m[31mcrate[0m = func.module(sema.db).krate();
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m563[0m:[0m23[0m:    let is_from_other_[0m[1m[31mcrate[0m = def_[0m[1m[31mcrate[0m != krate;
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m564[0m:[0m25[0m:    let is_from_builtin_[0m[1m[31mcrate[0m = def_[0m[1m[31mcrate[0m.is_builtin(sema.db);
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m567[0m:[0m22[0m:    if is_from_other_[0m[1m[31mcrate[0m {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m573[0m:[0m24[0m:    if is_from_builtin_[0m[1m[31mcrate[0m {
[0m[35mcrates/ide/src/syntax_highlighting/highlight.rs[0m:[0m[32m630[0m:[0m17[0m:    krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide/src/syntax_highlighting/inject.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/syntax_highlighting/inject.rs[0m:[0m[32m291[0m:[0m51[0m:        Definition::Module(_) | Definition::Extern[0m[1m[31mCrate[0mDecl(_) => SymbolKind::Module,
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_macros.html[0m:[0m[32m46[0m:[0m32[0m:<pre><code><span class="module [0m[1m[31mcrate[0m_root library">proc_macros</span><span class="operator">::</span><span class="macro library">mirror</span><span class="macro_bang">!</span> <span class="brace macro">{</span>
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m1[0m:[0m9[0m://! ide [0m[1m[31mcrate[0m provides "ide-centric" APIs for the rust-analyzer. That is,
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m6[0m:[0m29[0m://! database, and the `hir` [0m[1m[31mcrate[0m, where majority of the analysis happens.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m8[0m:[0m13[0m://! in this [0m[1m[31mcrate[0m.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m56[0m:[0m10[0m:mod view_[0m[1m[31mcrate[0m_graph;
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m61[0m:[0m13[0m:mod shuffle_[0m[1m[31mcrate[0m_graph;
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m62[0m:[0m11[0m:mod fetch_[0m[1m[31mcrate[0ms;
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m68[0m:[0m11[0m:use fetch_[0m[1m[31mcrate[0ms::[0m[1m[31mCrate[0mInfo;
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m72[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin, Env, FileLoader, FileSet, SourceDatabase, VfsPath,
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m80[0m:[0m5[0m:use [0m[1m[31mcrate[0m::navigation_target::{ToNav, TryToNav};
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m82[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m124[0m:[0m28[0m:        Cancelled, Change, [0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, Edition, FileId, FilePosition, FileRange,
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m200[0m:[0m20[0m:    pub fn shuffle_[0m[1m[31mcrate[0m_graph(&mut self) {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m201[0m:[0m17[0m:        shuffle_[0m[1m[31mcrate[0m_graph::shuffle_[0m[1m[31mcrate[0m_graph(&mut self.db);
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m239[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0m_graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m244[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m253[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m258[0m:[0m20[0m:        change.set_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph);
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m338[0m:[0m21[0m:    /// Renders the [0m[1m[31mcrate[0m graph to GraphViz "dot" syntax.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m339[0m:[0m17[0m:    pub fn view_[0m[1m[31mcrate[0m_graph(&self, full: bool) -> Cancellable<Result<String, String>> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m340[0m:[0m32[0m:        self.with_db(|db| view_[0m[1m[31mcrate[0m_graph::view_[0m[1m[31mcrate[0m_graph(db, full))
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m343[0m:[0m18[0m:    pub fn fetch_[0m[1m[31mcrate[0ms(&self) -> Cancellable<FxIndexSet<[0m[1m[31mCrate[0mInfo>> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m344[0m:[0m33[0m:        self.with_db(|db| fetch_[0m[1m[31mcrate[0ms::fetch_[0m[1m[31mcrate[0ms(db))
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m520[0m:[0m17[0m:    /// Returns [0m[1m[31mcrate[0ms this file belongs too.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m521[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0ms_for(&self, file_id: FileId) -> Cancellable<Vec<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m522[0m:[0m42[0m:        self.with_db(|db| parent_module::[0m[1m[31mcrate[0ms_for(db, file_id))
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m525[0m:[0m17[0m:    /// Returns [0m[1m[31mcrate[0ms this file belongs too.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m526[0m:[0m39[0m:    pub fn transitive_rev_deps(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> Cancellable<Vec<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m527[0m:[0m30[0m:        self.with_db(|db| db.[0m[1m[31mcrate[0m_graph().transitive_rev_deps([0m[1m[31mcrate[0m_id).collect())
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m530[0m:[0m17[0m:    /// Returns [0m[1m[31mcrate[0ms this file *might* belong too.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m531[0m:[0m21[0m:    pub fn relevant_[0m[1m[31mcrate[0ms_for(&self, file_id: FileId) -> Cancellable<Vec<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m532[0m:[0m39[0m:        self.with_db(|db| db.relevant_[0m[1m[31mcrate[0ms(file_id).iter().copied().collect())
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m535[0m:[0m42[0m:    /// Returns the edition of the given [0m[1m[31mcrate[0m.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m536[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_edition(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> Cancellable<Edition> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m537[0m:[0m30[0m:        self.with_db(|db| db.[0m[1m[31mcrate[0m_graph()[[0m[1m[31mcrate[0m_id].edition)
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m540[0m:[0m30[0m:    /// Returns true if this [0m[1m[31mcrate[0m has `no_std` or `no_core` specified.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m541[0m:[0m15[0m:    pub fn is_[0m[1m[31mcrate[0m_no_std(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> Cancellable<bool> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m542[0m:[0m49[0m:        self.with_db(|db| hir::db::DefDatabase::[0m[1m[31mcrate[0m_def_map(db, [0m[1m[31mcrate[0m_id).is_no_std())
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m545[0m:[0m44[0m:    /// Returns the root file of the given [0m[1m[31mcrate[0m.
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m546[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_root(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> Cancellable<FileId> {
[0m[35mcrates/ide/src/lib.rs[0m:[0m[32m547[0m:[0m30[0m:        self.with_db(|db| db.[0m[1m[31mcrate[0m_graph()[[0m[1m[31mcrate[0m_id].root_file_id)
[0m[35mcrates/ide/src/syntax_highlighting/html.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/syntax_highlighting/html.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m464[0m:[0m21[0m:    // Use literal `[0m[1m[31mcrate[0m` in path
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m469[0m:[0m13[0m:fn foo() -> [0m[1m[31mcrate[0m::X { X }
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m481[0m:[0m25[0m:            fn foo() -> [0m[1m[31mcrate[0m::X
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1524[0m:[0m23[0m:    // Top level `pub([0m[1m[31mcrate[0m)` will be displayed as no visibility.
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1526[0m:[0m24[0m:        r#"mod m { pub([0m[1m[31mcrate[0m) async unsafe extern "C" fn foo$0() {} }"#,
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1535[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) async unsafe extern "C" fn foo()
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1658[0m:[0m22[0m:fn test_hover_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1661[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1662[0m:[0m5[0m://! [0m[1m[31mCrate[0m docs
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1665[0m:[0m8[0m:extern [0m[1m[31mcrate[0m st$0d;
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1666[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1680[0m:[0m20[0m:            extern [0m[1m[31mcrate[0m std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1695[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1696[0m:[0m5[0m://! [0m[1m[31mCrate[0m docs
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1699[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std as ab$0c;
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1700[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1714[0m:[0m20[0m:            extern [0m[1m[31mcrate[0m std as abc
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1764[0m:[0m22[0m:/// assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m1791[0m:[0m30[0m:            assert_eq!(6, my_[0m[1m[31mcrate[0m::add_one(5));
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m2825[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m2832[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m3262[0m:[0m30[0m:fn hover_displays_normalized_[0m[1m[31mcrate[0m_names() {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m3265[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:name-with-dashes
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m3274[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:name-with-dashes
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4918[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4920[0m:[0m16[0m://- /libstd.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4942[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4946[0m:[0m16[0m://- /libstd.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4978[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m4980[0m:[0m16[0m://- /libstd.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5002[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5005[0m:[0m16[0m://- /libstd.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5208[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5219[0m:[0m15[0m://- /alloc.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5247[0m:[0m27[0m:fn function_doesnt_shadow_[0m[1m[31mcrate[0m_in_use_tree() {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5250[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5253[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5260[0m:[0m24[0m:                extern [0m[1m[31mcrate[0m foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5340[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5342[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main.rs deps:foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5350[0m:[0m24[0m:                extern [0m[1m[31mcrate[0m foo
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5366[0m:[0m24[0m:                extern [0m[1m[31mcrate[0m test
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5397[0m:[0m24[0m:                extern [0m[1m[31mcrate[0m test
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5403[0m:[0m5[0m:use [0m[1m[31mcrate[0m as foo$0;
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5409[0m:[0m24[0m:                extern [0m[1m[31mcrate[0m test
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5984[0m:[0m17[0m:fn hover_dollar_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5985[0m:[0m9[0m:    // $[0m[1m[31mcrate[0m should be resolved to the right [0m[1m[31mcrate[0m name.
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5989[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5991[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m5994[0m:[0m40[0m:    ( $name:ident ) => { const $name: $[0m[1m[31mcrate[0m::Type = $[0m[1m[31mcrate[0m::Type; };
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6365[0m:[0m14[0m:        impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6366[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) fn foo() {}
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6382[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) fn foo()
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6393[0m:[0m18[0m:            impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6394[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) fn foo() {}
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6411[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) fn foo()
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6422[0m:[0m18[0m:            impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6429[0m:[0m9[0m:        [0m[1m[31mcrate[0m::S::foo$0();
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6454[0m:[0m14[0m:        impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6455[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) const A: () = ();
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6471[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) const A: () = ()
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6482[0m:[0m18[0m:            impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6483[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) const A: () = ();
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6500[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) const A: () = ()
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6511[0m:[0m18[0m:            impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide/src/hover/tests.rs[0m:[0m[32m6518[0m:[0m9[0m:        [0m[1m[31mcrate[0m::S::A$0;
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_attributes.html[0m:[0m[32m48[0m:[0m131[0m:<span class="attribute_bracket attribute">#</span><span class="attribute_bracket attribute">[</span><span class="module attribute [0m[1m[31mcrate[0m_root library">proc_macros</span><span class="operator attribute">::</span><span class="attribute attribute library">identity</span><span class="attribute_bracket attribute">]</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_module_docs_outline.html[0m:[0m[32m46[0m:[0m119[0m:<pre><code><span class="comment documentation">/// </span><span class="struct documentation injected intra_doc_link">[[0m[1m[31mcrate[0m::foo::Struct]</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_module_docs_outline.html[0m:[0m[32m48[0m:[0m108[0m:<span class="comment documentation">/// </span><span class="struct documentation injected intra_doc_link">[[0m[1m[31mcrate[0m::foo::Struct]</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m48[0m:[0m43[0m:        <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>io<span class="colon">:</span><span class="colon">:</span>_print<span class="parenthesis">(</span>format_args_nl<span class="punctuation">!</span><span class="parenthesis">(</span><span class="punctuation">$</span><span class="parenthesis">(</span><span class="punctuation">$</span>arg<span class="parenthesis">)</span><span class="punctuation">*</span><span class="parenthesis">)</span><span class="parenthesis">)</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m58[0m:[0m47[0m:            <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panicking<span class="colon">:</span><span class="colon">:</span>panic<span class="parenthesis">(</span><span class="string_literal">"explicit panic"</span><span class="parenthesis">)</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m61[0m:[0m47[0m:            <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panicking<span class="colon">:</span><span class="colon">:</span>panic<span class="parenthesis">(</span><span class="punctuation">$</span>msg<span class="parenthesis">)</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m65[0m:[0m47[0m:            <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panicking<span class="colon">:</span><span class="colon">:</span>panic_str<span class="parenthesis">(</span><span class="punctuation">$</span>msg<span class="parenthesis">)</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m69[0m:[0m47[0m:            <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panicking<span class="colon">:</span><span class="colon">:</span>panic_display<span class="parenthesis">(</span><span class="punctuation">&</span><span class="punctuation">$</span>arg<span class="parenthesis">)</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m72[0m:[0m47[0m:            <span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panicking<span class="colon">:</span><span class="colon">:</span>panic_fmt<span class="parenthesis">(</span>const_format_args<span class="punctuation">!</span><span class="parenthesis">(</span><span class="punctuation">$</span>fmt<span class="comma">,</span> <span class="punctuation">$</span><span class="parenthesis">(</span><span class="punctuation">$</span>arg<span class="parenthesis">)</span><span class="punctuation">+</span><span class="parenthesis">)</span><span class="parenthesis">)</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m88[0m:[0m205[0m:    <span class="parenthesis">(</span><span class="parenthesis">)</span> <span class="operator">=</span><span class="angle">&gt;</span> <span class="parenthesis">(</span><span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panic<span class="punctuation">!</span><span class="parenthesis">(</span><span class="string_literal">"not yet implemented"</span><span class="parenthesis">)</span><span class="parenthesis">)</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_strings.html[0m:[0m[32m89[0m:[0m408[0m:    <span class="parenthesis">(</span><span class="punctuation">$</span><span class="parenthesis">(</span><span class="punctuation">$</span>arg<span class="colon">:</span>tt<span class="parenthesis">)</span><span class="punctuation">+</span><span class="parenthesis">)</span> <span class="operator">=</span><span class="angle">&gt;</span> <span class="parenthesis">(</span><span class="punctuation">$</span>[0m[1m[31mcrate[0m<span class="colon">:</span><span class="colon">:</span>panic<span class="punctuation">!</span><span class="parenthesis">(</span><span class="string_literal">"not yet implemented: {}"</span><span class="comma">,</span> format_args<span class="punctuation">!</span><span class="parenthesis">(</span><span class="punctuation">$</span><span class="parenthesis">(</span><span class="punctuation">$</span>arg<span class="parenthesis">)</span><span class="punctuation">+</span><span class="parenthesis">)</span><span class="parenthesis">)</span><span class="parenthesis">)</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m17[0m:[0m15[0m:    base_db::{[0m[1m[31mCrate[0mOrigin, Lang[0m[1m[31mCrate[0mOrigin, ReleaseChannel, SourceDatabase},
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m30[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m50[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: Definition) -> String {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m86[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_links(markdown: &str) -> String {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m133[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn external_docs(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m157[0m:[0m37[0m:                NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, .. } => {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m158[0m:[0m39[0m:                    Definition::Extern[0m[1m[31mCrate[0mDecl(decl)
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m174[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_definitions_from_docs(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m197[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn resolve_doc_path_for_def(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m216[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(it) => it.resolve_doc_path(db, link, ns),
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m228[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn doc_attributes(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m255[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct DocCommentToken {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m260[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn token_as_doc_comment(doc_token: &SyntaxToken) -> Option<DocCommentToken> {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m277[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_definition_with_descend_at<T>(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m492[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_data = &db.[0m[1m[31mcrate[0m_graph()[krate.into()];
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m493[0m:[0m19[0m:    let channel = [0m[1m[31mcrate[0m_data.channel.map_or("nightly", ReleaseChannel::as_str);
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m495[0m:[0m41[0m:    let (web_base, local_base) = match &[0m[1m[31mcrate[0m_data.origin {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m498[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin::Lang(
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m499[0m:[0m27[0m:            origin @ (Lang[0m[1m[31mCrate[0mOrigin::Alloc
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m500[0m:[0m19[0m:            | Lang[0m[1m[31mCrate[0mOrigin::Core
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m501[0m:[0m19[0m:            | Lang[0m[1m[31mCrate[0mOrigin::ProcMacro
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m502[0m:[0m19[0m:            | Lang[0m[1m[31mCrate[0mOrigin::Std
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m503[0m:[0m19[0m:            | Lang[0m[1m[31mCrate[0mOrigin::Test),
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m509[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin::Lang(_) => return (None, None),
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m510[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin::Rustc { name: _ } => {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m513[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin::Local { repo: _, name: _ } => {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m530[0m:[0m9[0m:        [0m[1m[31mCrate[0mOrigin::Library { repo: _, name } => {
[0m[35mcrates/ide/src/doc_links.rs[0m:[0m[32m625[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(it) => {
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html[0m:[0m[32m46[0m:[0m70[0m:<pre><code><span class="keyword">extern</span> <span class="keyword">[0m[1m[31mcrate[0m</span> <span class="module [0m[1m[31mcrate[0m_root default_library library">std</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html[0m:[0m[32m47[0m:[0m59[0m:<span class="keyword">extern</span> <span class="keyword">[0m[1m[31mcrate[0m</span> <span class="module [0m[1m[31mcrate[0m_root default_library library">alloc</span> <span class="keyword">as</span> <span class="module [0m[1m[31mcrate[0m_root declaration">abc</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html[0m:[0m[32m48[0m:[0m59[0m:<span class="keyword">extern</span> <span class="keyword">[0m[1m[31mcrate[0m</span> <span class="unresolved_reference">unresolved</span> <span class="keyword">as</span> <span class="module [0m[1m[31mcrate[0m_root declaration">definitely_unresolved</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/format.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{syntax_highlighting::highlights::Highlights, HlRange, HlTag};
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m46[0m:[0m70[0m:<pre><code><span class="keyword">extern</span> <span class="keyword">[0m[1m[31mcrate[0m</span> <span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m47[0m:[0m54[0m:<span class="keyword">use</span> <span class="module [0m[1m[31mcrate[0m_root default_library library">core</span><span class="operator">::</span><span class="module default_library library">iter</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m51[0m:[0m54[0m:<span class="keyword">use</span> <span class="module [0m[1m[31mcrate[0m_root library">foo</span> <span class="keyword">as</span> <span class="module [0m[1m[31mcrate[0m_root declaration library">foooo</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m53[0m:[0m88[0m:<span class="keyword">pub</span><span class="parenthesis">(</span><span class="keyword [0m[1m[31mcrate[0m_root public">[0m[1m[31mcrate[0m</span><span class="parenthesis">)</span> <span class="keyword">fn</span> <span class="function declaration">main</span><span class="parenthesis">(</span><span class="parenthesis">)</span> <span class="brace">{</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m58[0m:[0m132[0m:    <span class="keyword">pub</span><span class="parenthesis">(</span><span class="keyword control">in</span> <span class="keyword [0m[1m[31mcrate[0m_root public">super</span><span class="parenthesis">)</span> <span class="keyword">const</span> <span class="constant declaration">FORTY_TWO</span><span class="colon">:</span> <span class="builtin_type">u8</span> <span class="operator">=</span> <span class="numeric_literal">42</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m61[0m:[0m129[0m:        <span class="keyword">use</span> <span class="keyword">super</span><span class="operator">::</span><span class="keyword [0m[1m[31mcrate[0m_root public">super</span><span class="operator">::</span><span class="constant public">NINETY_TWO</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m62[0m:[0m63[0m:        <span class="keyword">use</span> <span class="keyword [0m[1m[31mcrate[0m_root public">[0m[1m[31mcrate[0m</span><span class="operator">::</span><span class="module [0m[1m[31mcrate[0m_root library">foooo</span><span class="operator">::</span><span class="struct library">Point</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html[0m:[0m[32m64[0m:[0m202[0m:        <span class="keyword">pub</span><span class="parenthesis">(</span><span class="keyword control">in</span> <span class="keyword">super</span><span class="operator">::</span><span class="keyword [0m[1m[31mcrate[0m_root public">super</span><span class="parenthesis">)</span> <span class="keyword">const</span> <span class="constant declaration">TWENTY_NINE</span><span class="colon">:</span> <span class="builtin_type">u8</span> <span class="operator">=</span> <span class="numeric_literal">29</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_general.html[0m:[0m[32m88[0m:[0m60[0m:<span class="keyword">use</span> <span class="self_keyword [0m[1m[31mcrate[0m_root public">self</span><span class="operator">::</span><span class="struct">FooCopy</span><span class="operator">::</span><span class="brace">{</span><span class="self_keyword">self</span> <span class="keyword">as</span> <span class="struct declaration">BarCopy</span><span class="brace">}</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_general.html[0m:[0m[32m200[0m:[0m136[0m:    <span class="keyword">let</span> <span class="variable declaration">bob</span> <span class="operator">=</span> <span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="operator">::</span><span class="struct library">Person</span> <span class="brace">{</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_general.html[0m:[0m[32m202[0m:[0m96[0m:        <span class="field library">age</span><span class="colon">:</span> <span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="operator">::</span><span class="module library">consts</span><span class="operator">::</span><span class="constant library">NUMBER</span><span class="comma">,</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_general.html[0m:[0m[32m205[0m:[0m145[0m:    <span class="keyword">let</span> <span class="variable declaration">control_flow</span> <span class="operator">=</span> <span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="operator">::</span><span class="function library">identity</span><span class="parenthesis">(</span><span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="operator">::</span><span class="enum library">ControlFlow</span><span class="operator">::</span><span class="enum_variant library">Continue</span><span class="parenthesis">)</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_general.html[0m:[0m[32m208[0m:[0m29[0m:        <span class="module [0m[1m[31mcrate[0m_root library">foo</span><span class="operator">::</span><span class="unresolved_reference">die</span><span class="macro_bang">!</span><span class="parenthesis macro">(</span><span class="parenthesis macro">)</span><span class="semicolon">;</span>
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn print_path(db: &dyn DefDatabase, path: &Path, buf: &mut dyn Write) -> fmt::Result {
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m72[0m:[0m23[0m:            PathKind::[0m[1m[31mCrate[0m => write!(buf, "[0m[1m[31mcrate[0m")?,
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m74[0m:[0m29[0m:            PathKind::Dollar[0m[1m[31mCrate[0m(_) => write!(buf, "$[0m[1m[31mcrate[0m")?,
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m95[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn print_generic_args(
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m135[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn print_generic_arg(
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m147[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn print_type_ref(
[0m[35mcrates/hir-def/src/pretty.rs[0m:[0m[32m236[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn print_type_bounds(
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_default_library.html[0m:[0m[32m46[0m:[0m65[0m:<pre><code><span class="keyword">use</span> <span class="module [0m[1m[31mcrate[0m_root default_library library">core</span><span class="operator">::</span><span class="module default_library library">iter</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/matching_brace.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn matching_brace(file: &SourceFile, offset: TextSize) -> Option<TextSize> {
[0m[35mcrates/hir-def/src/lower.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::DefDatabase, path::Path};
[0m[35mcrates/hir-def/src/lower.rs[0m:[0m[32m37[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn hygiene(&self) -> &Hygiene {
[0m[35mcrates/hir-def/src/lower.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_path(&self, ast: ast::Path) -> Option<Path> {
[0m[35mcrates/hir-def/src/lower.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn ast_id<N: AstIdNode>(&self, item: &N) -> Option<AstId<N>> {
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m23[0m:[0m15[0m:    body_ctx: [0m[1m[31mcrate[0m::lower::LowerCtx<'a>,
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m32[0m:[0m23[0m:            body_ctx: [0m[1m[31mcrate[0m::lower::LowerCtx::with_file_id(db, file),
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m126[0m:[0m30[0m:            ast::Item::Extern[0m[1m[31mCrate[0m(ast) => self.lower_extern_[0m[1m[31mcrate[0m(ast)?.into(),
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m517[0m:[0m21[0m:    fn lower_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m519[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m: &ast::Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m520[0m:[0m38[0m:    ) -> Option<FileItemTreeId<Extern[0m[1m[31mCrate[0m>> {
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m521[0m:[0m27[0m:        let name = extern_[0m[1m[31mcrate[0m.name_ref()?.as_name();
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m522[0m:[0m28[0m:        let alias = extern_[0m[1m[31mcrate[0m.rename().map(|a| {
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m525[0m:[0m55[0m:        let visibility = self.lower_visibility(extern_[0m[1m[31mcrate[0m);
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m526[0m:[0m59[0m:        let ast_id = self.source_ast_id_map.ast_id(extern_[0m[1m[31mcrate[0m);
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m528[0m:[0m25[0m:        let res = Extern[0m[1m[31mCrate[0m { name, alias, visibility, ast_id };
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m529[0m:[0m36[0m:        Some(id(self.data().extern_[0m[1m[31mcrate[0ms.alloc(res)))
[0m[35mcrates/hir-def/src/item_tree/lower.rs[0m:[0m[32m783[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn lower_use_tree(
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::DefDatabase, test_db::TestDB};
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m21[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self as renamed;
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m22[0m:[0m19[0m:pub(super) extern [0m[1m[31mcrate[0m bli;
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m24[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::path::{nested, items as renamed, Trait as _};
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m28[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, B};
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m37[0m:[0m30[0m:            pub(self) extern [0m[1m[31mcrate[0m self as renamed;
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m39[0m:[0m31[0m:            pub(super) extern [0m[1m[31mcrate[0m bli;
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m41[0m:[0m21[0m:            pub use [0m[1m[31mcrate[0m::path::{nested, items as renamed, Trait as _};
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m46[0m:[0m27[0m:            pub(self) use [0m[1m[31mcrate[0m::{A, B};
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m256[0m:[0m8[0m:    e: [0m[1m[31mcrate[0m::[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/item_tree/tests.rs[0m:[0m[32m266[0m:[0m30[0m:                pub(self) e: [0m[1m[31mcrate[0m::[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m3[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m78[0m:[0m32[0m:    pub tree_id: la_arena::Idx<[0m[1m[31mcrate[0m::item_tree::Variant>,
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m98[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m185[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m189[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn struct_data_with_diagnostics_query(
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m197[0m:[0m30[0m:        let cfg_options = db.[0m[1m[31mcrate[0m_graph()[loc.container.krate].cfg_options.clone();
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m241[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m245[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn union_data_with_diagnostics_query(
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m253[0m:[0m30[0m:        let cfg_options = db.[0m[1m[31mcrate[0m_graph()[loc.container.krate].cfg_options.clone();
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m289[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn enum_data_query(db: &dyn DefDatabase, e: EnumId) -> Arc<EnumData> {
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m293[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn enum_data_with_diagnostics_query(
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m300[0m:[0m30[0m:        let cfg_options = db.[0m[1m[31mcrate[0m_graph()[krate].cfg_options.clone();
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m391[0m:[0m27[0m:    let cfg_options = &db.[0m[1m[31mcrate[0m_graph()[krate].cfg_options;
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m425[0m:[0m32[0m:        variant: la_arena::Idx<[0m[1m[31mcrate[0m::item_tree::Variant>,
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m520[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m528[0m:[0m35[0m:            let cfg_options = &db.[0m[1m[31mcrate[0m_graph()[krate].cfg_options;
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m546[0m:[0m35[0m:            let cfg_options = &db.[0m[1m[31mcrate[0m_graph()[krate].cfg_options;
[0m[35mcrates/hir-def/src/data/adt.rs[0m:[0m[32m569[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m1[0m:[0m73[0m://! Defines hir-level representation of visibility (e.g. `pub` and `pub([0m[1m[31mcrate[0m)`).
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m21[0m:[0m32[0m:    /// `pub(in module)`, `pub([0m[1m[31mcrate[0m)` or `pub(super)`. Also private, which is
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const fn private() -> RawVisibility {
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast(
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast_with_hygiene(
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m48[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast_with_hygiene_and_default(
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m67[0m:[0m37[0m:            ast::VisibilityKind::Pub[0m[1m[31mCrate[0m => {
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m68[0m:[0m57[0m:                let path = ModPath::from_kind(PathKind::[0m[1m[31mCrate[0m);
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m86[0m:[0m20[0m:        resolver: &[0m[1m[31mcrate[0m::resolver::Resolver,
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m108[0m:[0m39[0m:        // if they're not in the same [0m[1m[31mcrate[0m, it can't be visible
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m116[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_visible_from_other_[0m[1m[31mcrate[0m(self) -> bool {
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m120[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_visible_from_def_map(
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m182[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn max(self, other: Visibility, def_map: &DefMap) -> Option<Visibility> {
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m217[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn field_visibilities_query(
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m237[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn function_visibility_query(db: &dyn DefDatabase, def: FunctionId) -> Visibility {
[0m[35mcrates/hir-def/src/visibility.rs[0m:[0m[32m243[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_visibility_query(db: &dyn DefDatabase, def: ConstId) -> Visibility {
[0m[35mcrates/ide/src/view_hir.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn view_hir(db: &RootDatabase, position: FilePosition) -> String {
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m3[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m22[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) current_file_id: HirFileId,
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m24[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) module: ModuleId,
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m43[0m:[0m29[0m:            cfg_options: db.[0m[1m[31mcrate[0m_graph()[module.krate].cfg_options.clone(),
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m116[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn to_source<T>(&self, value: T) -> InFile<T> {
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m120[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parse_attrs(&self, db: &dyn DefDatabase, owner: &dyn ast::HasAttrs) -> Attrs {
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m124[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn cfg_options(&self) -> &CfgOptions {
[0m[35mcrates/hir-def/src/expander.rs[0m:[0m[32m132[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parse_path(&mut self, db: &dyn DefDatabase, path: ast::Path) -> Option<Path> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m4[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m15[0m:[0m17[0m:    data::Extern[0m[1m[31mCrate[0mDeclData,
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m19[0m:[0m61[0m:    item_scope::{BuiltinShadowMode, ImportId, ImportOrExtern[0m[1m[31mCrate[0m, BUILTIN_SCOPE},
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m25[0m:[0m35[0m:    AdtId, ConstId, ConstParamId, [0m[1m[31mCrate[0mRootModuleId, DefWithBodyId, EnumId, EnumVariantId,
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m26[0m:[0m26[0m:    ExternBlockId, Extern[0m[1m[31mCrate[0mId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId,
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m105[0m:[0m49[0m:    Partial(TypeNs, usize, Option<ImportOrExtern[0m[1m[31mCrate[0m>),
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m156[0m:[0m62[0m:    ) -> Option<(TypeNs, Option<usize>, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m214[0m:[0m47[0m:    ) -> Option<(TypeNs, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m472[0m:[0m68[0m:        def_map.macro_use_prelude().for_each(|(name, (def, _extern_[0m[1m[31mcrate[0m))| {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m475[0m:[0m65[0m:        def_map.extern_prelude().for_each(|(name, (def, _extern_[0m[1m[31mcrate[0m))| {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m490[0m:[0m19[0m:    pub fn extern_[0m[1m[31mcrate[0m_decls_in_scope<'a>(
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m496[0m:[0m21[0m:            .extern_[0m[1m[31mcrate[0m_decls()
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m497[0m:[0m29[0m:            .map(|id| Extern[0m[1m[31mCrate[0mDeclData::extern_[0m[1m[31mcrate[0m_decl_data_query(db, id).name.clone())
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m500[0m:[0m19[0m:    pub fn extern_[0m[1m[31mcrate[0ms_in_scope<'a>(&'a self) -> impl Iterator<Item = (Name, ModuleId)> + 'a {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m552[0m:[0m28[0m:    pub fn krate(&self) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m562[0m:[0m32[0m:    ) -> impl Iterator<Item = &[0m[1m[31mcrate[0m::generics::WherePredicate> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m860[0m:[0m62[0m:    ) -> Option<(TypeNs, Option<usize>, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m888[0m:[0m70[0m:fn to_type_ns(per_ns: PerNs) -> Option<(TypeNs, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m977[0m:[0m22[0m:impl HasResolver for [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/resolver.rs[0m:[0m[32m1049[0m:[0m28[0m:impl HasResolver for Extern[0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m5[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m31[0m:[0m58[0m:    AssocItemId, AstIdWithPath, ConstId, ConstLoc, Extern[0m[1m[31mCrate[0mId, FunctionId, FunctionLoc,
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fn_data_query(db: &dyn DefDatabase, func: FunctionId) -> Arc<FunctionData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m61[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m62[0m:[0m28[0m:        let cfg_options = &[0m[1m[31mcrate[0m_graph[krate].cfg_options;
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m154[0m:[0m43[0m:fn parse_rustc_legacy_const_generics(tt: &[0m[1m[31mcrate[0m::tt::Subtree) -> Box<[u32]> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m189[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_alias_data_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m234[0m:[0m84[0m:    /// method calls to this trait's methods when the receiver is an array and the [0m[1m[31mcrate[0m edition is
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m241[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m245[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_data_with_diagnostics_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m319[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_alias_query(db: &dyn DefDatabase, id: TraitAliasId) -> Arc<TraitAliasData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m340[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn impl_data_query(db: &dyn DefDatabase, id: ImplId) -> Arc<ImplData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m344[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn impl_data_with_diagnostics_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m386[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macro2_data_query(db: &dyn DefDatabase, makro: Macro2Id) -> Arc<Macro2Data> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m413[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macro_rules_data_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m438[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn proc_macro_data_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m467[0m:[0m18[0m:pub struct Extern[0m[1m[31mCrate[0mDeclData {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m471[0m:[0m9[0m:    pub [0m[1m[31mcrate[0m_id: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m474[0m:[0m12[0m:impl Extern[0m[1m[31mCrate[0mDeclData {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m475[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn extern_[0m[1m[31mcrate[0m_decl_data_query(
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m477[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m: Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m478[0m:[0m20[0m:    ) -> Arc<Extern[0m[1m[31mCrate[0mDeclData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m479[0m:[0m26[0m:        let loc = extern_[0m[1m[31mcrate[0m.lookup(db);
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m481[0m:[0m20[0m:        let extern_[0m[1m[31mcrate[0m = &item_tree[loc.id.value];
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m483[0m:[0m27[0m:        let name = extern_[0m[1m[31mcrate[0m.name.clone();
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m484[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = if name == hir_expand::name![self] {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m487[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_def_map(loc.container.krate())
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m494[0m:[0m26[0m:            name: extern_[0m[1m[31mcrate[0m.name.clone(),
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m495[0m:[0m42[0m:            visibility: item_tree[extern_[0m[1m[31mcrate[0m.visibility].clone(),
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m496[0m:[0m27[0m:            alias: extern_[0m[1m[31mcrate[0m.alias.clone(),
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m497[0m:[0m13[0m:            [0m[1m[31mcrate[0m_id,
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m512[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn const_data_query(db: &dyn DefDatabase, konst: ConstId) -> Arc<ConstData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m546[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m643[0m:[0m32[0m:                            // [0m[1m[31mcrate[0m failed), skip expansion like we would if it was
[0m[35mcrates/hir-def/src/data.rs[0m:[0m[32m714[0m:[0m29[0m:                            [0m[1m[31mcrate[0m::item_scope::BuiltinShadowMode::Other,
[0m[35mcrates/hir-def/src/nameres/attr_resolution.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/attr_resolution.rs[0m:[0m[32m27[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_attr_macro(
[0m[35mcrates/hir-def/src/nameres/attr_resolution.rs[0m:[0m[32m70[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_builtin_or_registered_attr(&self, path: &ModPath) -> bool {
[0m[35mcrates/hir-def/src/nameres/mod_resolution.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::DefDatabase, HirFileId};
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m5[0m:[0m35[0m://!   * a tree of modules for the [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m41[0m:[0m31[0m://! macro_rules from the same [0m[1m[31mcrate[0m use a global mutable namespace. We expand
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m44[0m:[0m23[0m://! Macros from other [0m[1m[31mcrate[0ms (including proc-macros) can be used with
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m62[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mId, Edition, FileId, ProcMacroKind};
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m72[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m80[0m:[0m31[0m:    AstId, BlockId, BlockLoc, [0m[1m[31mCrate[0mRootModuleId, Extern[0m[1m[31mCrate[0mId, FunctionId, LocalModuleId, Lookup,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m89[0m:[0m11[0m:/// Every [0m[1m[31mcrate[0m has a primary `DefMap` whose root is the [0m[1m[31mcrate[0m's main file (`main.rs`/`lib.rs`),
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m90[0m:[0m22[0m:/// computed by the `[0m[1m[31mcrate[0m_def_map` query. Additionally, every block expression introduces the
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m99[0m:[0m53[0m:    /// The modules and their data declared in this [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m101[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m102[0m:[0m37[0m:    /// The prelude module for this [0m[1m[31mcrate[0m. This either comes from an import
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m109[0m:[0m81[0m:    /// `macro_use` prelude that contains macros from `#[macro_use]`'d external [0m[1m[31mcrate[0ms. Note that
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m111[0m:[0m15[0m:    /// Extern[0m[1m[31mCrate[0mId being None implies it being imported from the general prelude import.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m112[0m:[0m63[0m:    macro_use_prelude: FxHashMap<Name, (MacroId, Option<Extern[0m[1m[31mCrate[0mId>)>,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m118[0m:[0m58[0m:    /// The diagnostics that need to be emitted for this [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m121[0m:[0m13[0m:    /// The [0m[1m[31mcrate[0m data that is shared between a [0m[1m[31mcrate[0m's def map and all its block def maps.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m122[0m:[0m21[0m:    data: Arc<DefMap[0m[1m[31mCrate[0mData>,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m125[0m:[0m28[0m:/// Data that belongs to a [0m[1m[31mcrate[0m which is shared between a [0m[1m[31mcrate[0m's def map and all its block def maps.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m127[0m:[0m14[0m:struct DefMap[0m[1m[31mCrate[0mData {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m128[0m:[0m72[0m:    /// The extern prelude which contains all root modules of external [0m[1m[31mcrate[0ms that are in scope.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m129[0m:[0m38[0m:    extern_prelude: FxHashMap<Name, ([0m[1m[31mCrate[0mRootModuleId, Option<Extern[0m[1m[31mCrate[0mId>)>,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m152[0m:[0m12[0m:impl DefMap[0m[1m[31mCrate[0mData {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m193[0m:[0m51[0m:    fn def_map(self, db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<DefMap> {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m197[0m:[0m33[0m:    fn into_module(self, krate: [0m[1m[31mCrate[0mId) -> ModuleId {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m215[0m:[0m5[0m:    [0m[1m[31mCrate[0mRoot {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m245[0m:[0m27[0m:            ModuleOrigin::[0m[1m[31mCrate[0mRoot { .. } | ModuleOrigin::BlockExpr { .. } => None,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m251[0m:[0m67[0m:            ModuleOrigin::File { definition, .. } | ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition } => {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m261[0m:[0m27[0m:            ModuleOrigin::[0m[1m[31mCrate[0mRoot { .. } | ModuleOrigin::File { .. } => false,
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m269[0m:[0m69[0m:            &ModuleOrigin::File { definition, .. } | &ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition } => {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m301[0m:[0m28[0m:    /// The module id of a [0m[1m[31mcrate[0m or block root.
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m304[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_def_map_query(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<DefMap> {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m305[0m:[0m33[0m:        let _p = profile::span("[0m[1m[31mcrate[0m_def_map_query").detail(|| {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m306[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_graph()[krate].display_name.as_deref().unwrap_or_default().to_string()
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m309[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m311[0m:[0m23[0m:        let edition = [0m[1m[31mcrate[0m_graph[krate].edition;
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m312[0m:[0m36[0m:        let origin = ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition: [0m[1m[31mcrate[0m_graph[krate].root_file_id };
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m317[0m:[0m25[0m:            TreeId::new([0m[1m[31mcrate[0m_graph[krate].root_file_id.into(), None),
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m323[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn block_def_map_query(db: &dyn DefDatabase, block_id: BlockId) -> Arc<DefMap> {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m353[0m:[0m21[0m:    fn empty(krate: [0m[1m[31mCrate[0mId, edition: Edition, module_data: ModuleData) -> DefMap {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m367[0m:[0m34[0m:            data: Arc::new(DefMap[0m[1m[31mCrate[0mData {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m430[0m:[0m28[0m:    pub fn krate(&self) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m434[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn block_id(&self) -> Option<BlockId> {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m438[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn prelude(&self) -> Option<(ModuleId, Option<UseId>)> {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m442[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn extern_prelude(
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m444[0m:[0m40[0m:    ) -> impl Iterator<Item = (&Name, ([0m[1m[31mCrate[0mRootModuleId, Option<Extern[0m[1m[31mCrate[0mId>))> + '_ {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m448[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macro_use_prelude(
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m450[0m:[0m62[0m:    ) -> impl Iterator<Item = (&Name, (MacroId, Option<Extern[0m[1m[31mCrate[0mId>))> + '_ {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m459[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_root(&self) -> [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m460[0m:[0m9[0m:        [0m[1m[31mCrate[0mRootModuleId { krate: self.krate }
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m463[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_path(
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m482[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_path_locally(
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m504[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn with_ancestor_maps<T>(
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m559[0m:[0m40[0m:        go(&mut buf, db, current_map, "[0m[1m[31mcrate[0m", Self::ROOT);
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m593[0m:[0m26[0m:        format_to!(buf, "[0m[1m[31mcrate[0m scope\n");
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m632[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(origin: ModuleOrigin, visibility: Visibility) -> Self {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m650[0m:[0m67[0m:            ModuleOrigin::File { definition, .. } | ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition } => {
[0m[35mcrates/hir-def/src/nameres.rs[0m:[0m[32m659[0m:[0m24[0m:    /// `None` for the [0m[1m[31mcrate[0m root or block.
[0m[35mcrates/hir-def/src/item_tree/pretty.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/item_tree/pretty.rs[0m:[0m[32m207[0m:[0m28[0m:            ModItem::Extern[0m[1m[31mCrate[0m(it) => {
[0m[35mcrates/hir-def/src/item_tree/pretty.rs[0m:[0m[32m208[0m:[0m27[0m:                let Extern[0m[1m[31mCrate[0m { name, alias, visibility, ast_id: _ } = &self.tree[it];
[0m[35mcrates/hir-def/src/item_tree/pretty.rs[0m:[0m[32m210[0m:[0m34[0m:                w!(self, "extern [0m[1m[31mcrate[0m {}", name.display(self.db.upcast()));
[0m[35mcrates/hir-def/src/src.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::DefDatabase, AdtId, ModuleDefId};
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m10[0m:[0m25[0m:    let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m13[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m15[0m:[0m49[0m:        assert!(format!("{events:?}").contains("[0m[1m[31mcrate[0m_def_map"), "{events:#?}")
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m21[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m23[0m:[0m50[0m:        assert!(!format!("{events:?}").contains("[0m[1m[31mcrate[0m_def_map"), "{events:#?}")
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m34[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::foo::bar::Baz;
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m54[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::foo::bar::Baz;
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m89[0m:[0m25[0m:    let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m92[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m93[0m:[0m36[0m:            let (_, module_data) = [0m[1m[31mcrate[0m_def_map.modules.iter().last().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m96[0m:[0m49[0m:        assert!(format!("{events:?}").contains("[0m[1m[31mcrate[0m_def_map"), "{events:#?}")
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m102[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m103[0m:[0m36[0m:            let (_, module_data) = [0m[1m[31mcrate[0m_def_map.modules.iter().last().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m106[0m:[0m50[0m:        assert!(!format!("{events:?}").contains("[0m[1m[31mcrate[0m_def_map"), "{events:#?}")
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m132[0m:[0m25[0m:    let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m135[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m136[0m:[0m36[0m:            let (_, module_data) = [0m[1m[31mcrate[0m_def_map.modules.iter().last().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m156[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m157[0m:[0m36[0m:            let (_, module_data) = [0m[1m[31mcrate[0m_def_map.modules.iter().last().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m189[0m:[0m25[0m:    let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m205[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/incremental.rs[0m:[0m[32m206[0m:[0m36[0m:            let (_, module_data) = [0m[1m[31mcrate[0m_def_map.modules.iter().last().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m20[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m26[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m31[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m55[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m61[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m66[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m93[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m98[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m103[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m129[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Pub[0m[1m[31mCrate[0mStruct;
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m132[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m134[0m:[0m16[0m:            Pub[0m[1m[31mCrate[0mStruct: t v
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m138[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m142[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m145[0m:[0m16[0m:            Pub[0m[1m[31mCrate[0mStruct: t v
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m151[0m:[0m16[0m:fn glob_across_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m152[0m:[0m34[0m:    cov_mark::check!(glob_across_[0m[1m[31mcrate[0ms);
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m155[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m156[0m:[0m10[0m:use test_[0m[1m[31mcrate[0m::*;
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m158[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m162[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m169[0m:[0m24[0m:fn glob_privacy_across_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m172[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m173[0m:[0m10[0m:use test_[0m[1m[31mcrate[0m::*;
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m175[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m180[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m195[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m212[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m239[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m245[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m248[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar::baz
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m251[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m254[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::baz
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m278[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m284[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m287[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar::baz
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m290[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m293[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::baz
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m313[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m319[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m322[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m325[0m:[0m13[0m:            [0m[1m[31mcrate[0m::b
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m328[0m:[0m13[0m:            [0m[1m[31mcrate[0m::c
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m331[0m:[0m13[0m:            [0m[1m[31mcrate[0m::c::foo
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m334[0m:[0m13[0m:            [0m[1m[31mcrate[0m::d
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m357[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m361[0m:[0m13[0m:            [0m[1m[31mcrate[0m::event
[0m[35mcrates/hir-def/src/nameres/tests/globs.rs[0m:[0m[32m365[0m:[0m13[0m:            [0m[1m[31mcrate[0m::event::serenity
[0m[35mcrates/hir-def/src/nameres/tests/primitives.rs[0m:[0m[32m15[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/primitives.rs[0m:[0m[32m19[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m20[0m:[0m32[0m:    item_scope::{ImportOrExtern[0m[1m[31mCrate[0m, BUILTIN_SCOPE},
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m25[0m:[0m12[0m:    AdtId, [0m[1m[31mCrate[0mId, EnumVariantId, LocalModuleId, ModuleDefId,
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m45[0m:[0m30[0m:    pub(super) krate: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m57[0m:[0m23[0m:        krate: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m79[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_visibility(
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m156[0m:[0m112[0m:            // FIXME: this doesn't seem right; what if the different namespace resolutions come from different [0m[1m[31mcrate[0ms?
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m186[0m:[0m24[0m:        let graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m188[0m:[0m26[0m:            "DefMap {:?} [0m[1m[31mcrate[0m_name={:?} block={:?} path={}",
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m197[0m:[0m29[0m:            PathKind::Dollar[0m[1m[31mCrate[0m(krate) => {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m199[0m:[0m49[0m:                    cov_mark::hit!(macro_dollar_[0m[1m[31mcrate[0m_self);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m200[0m:[0m39[0m:                    PerNs::types(self.[0m[1m[31mcrate[0m_root().into(), Visibility::Public, None)
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m202[0m:[0m38[0m:                    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m204[0m:[0m49[0m:                    cov_mark::hit!(macro_dollar_[0m[1m[31mcrate[0m_other);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m208[0m:[0m23[0m:            PathKind::[0m[1m[31mCrate[0m => PerNs::types(self.[0m[1m[31mcrate[0m_root().into(), Visibility::Public, None),
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m209[0m:[0m55[0m:            // plain import or absolute path in 2015: [0m[1m[31mcrate[0m-relative with
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m221[0m:[0m52[0m:                tracing::debug!("resolving {:?} in [0m[1m[31mcrate[0m root (+ extern prelude)", segment);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m222[0m:[0m38[0m:                self.resolve_name_in_[0m[1m[31mcrate[0m_root_or_extern_prelude(db, segment)
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m303[0m:[0m43[0m:                if let Some(&(def, extern_[0m[1m[31mcrate[0m)) = self.data.extern_prelude.get(segment) {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m304[0m:[0m69[0m:                    tracing::debug!("absolute path {:?} resolved to [0m[1m[31mcrate[0m {:?}", path, def);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m308[0m:[0m32[0m:                        extern_[0m[1m[31mcrate[0m.map(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m),
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m311[0m:[0m87[0m:                    return ResolvePathResult::empty(ReachedFixedPoint::No); // extern [0m[1m[31mcrate[0m declarations can add to the extern prelude
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m337[0m:[0m66[0m:                        tracing::debug!("resolving {:?} in other [0m[1m[31mcrate[0m", path);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m459[0m:[0m85[0m:                // Don't resolve extern prelude in block `DefMap`s, defer it to the [0m[1m[31mcrate[0m def map so
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m463[0m:[0m84[0m:            self.data.extern_prelude.get(name).map_or(PerNs::none(), |&(it, extern_[0m[1m[31mcrate[0m)| {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m467[0m:[0m28[0m:                    extern_[0m[1m[31mcrate[0m.map(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m),
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m472[0m:[0m83[0m:            self.macro_use_prelude.get(name).map_or(PerNs::none(), |&(it, _extern_[0m[1m[31mcrate[0m)| {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m477[0m:[0m37[0m:                    None, // extern_[0m[1m[31mcrate[0m.map(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m),
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m490[0m:[0m24[0m:    fn resolve_name_in_[0m[1m[31mcrate[0m_root_or_extern_prelude(
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m495[0m:[0m18[0m:        let from_[0m[1m[31mcrate[0m_root = match self.block {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m497[0m:[0m36[0m:                let def_map = self.[0m[1m[31mcrate[0m_root().def_map(db);
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m509[0m:[0m30[0m:                |(it, extern_[0m[1m[31mcrate[0m)| {
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m513[0m:[0m32[0m:                        extern_[0m[1m[31mcrate[0m.map(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m),
[0m[35mcrates/hir-def/src/nameres/path_resolution.rs[0m:[0m[32m519[0m:[0m14[0m:        from_[0m[1m[31mcrate[0m_root.or_else(from_extern_prelude)
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m3[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m20[0m:[0m21[0m:    UnresolvedExtern[0m[1m[31mCrate[0m { ast: AstId<ast::Extern[0m[1m[31mCrate[0m> },
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m26[0m:[0m54[0m:    UnresolvedProcMacro { ast: MacroCallKind, krate: [0m[1m[31mCrate[0mId },
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m61[0m:[0m37[0m:    pub(super) fn unresolved_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m63[0m:[0m39[0m:        declaration: AstId<ast::Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m67[0m:[0m54[0m:            kind: DefDiagnosticKind::UnresolvedExtern[0m[1m[31mCrate[0m { ast: declaration },
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m89[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn unresolved_proc_macro(
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m92[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m97[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macro_error(
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m105[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macro_expansion_parse_error(
[0m[35mcrates/hir-def/src/nameres/diagnostics.rs[0m:[0m[32m120[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn unresolved_macro_call(
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m7[0m:[0m42[0m:    item_scope::{ImportId, ImportOrExtern[0m[1m[31mCrate[0m, ItemInNs},
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m21[0m:[0m70[0m:    pub types: Option<(ModuleDefId, Visibility, Option<ImportOrExtern[0m[1m[31mCrate[0m>)>,
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m41[0m:[0m73[0m:    pub fn types(t: ModuleDefId, v: Visibility, i: Option<ImportOrExtern[0m[1m[31mCrate[0m>) -> PerNs {
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m49[0m:[0m33[0m:        i: Option<ImportOrExtern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m53[0m:[0m63[0m:            values: Some((values, v, i.and_then(ImportOrExtern[0m[1m[31mCrate[0m::into_import))),
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m74[0m:[0m91[0m:    pub fn take_types_full(self) -> Option<(ModuleDefId, Visibility, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m127[0m:[0m85[0m:    pub fn iter_items(self) -> impl Iterator<Item = (ItemInNs, Option<ImportOrExtern[0m[1m[31mCrate[0m>)> {
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m134[0m:[0m79[0m:                    .map(|it| (ItemInNs::Values(it.0), it.2.map(ImportOrExtern[0m[1m[31mCrate[0m::Import)))
[0m[35mcrates/hir-def/src/per_ns.rs[0m:[0m[32m139[0m:[0m79[0m:                    .map(|it| (ItemInNs::Macros(it.0), it.2.map(ImportOrExtern[0m[1m[31mCrate[0m::Import)))
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_keywords.html[0m:[0m[32m46[0m:[0m70[0m:<pre><code><span class="keyword">extern</span> <span class="keyword">[0m[1m[31mcrate[0m</span> <span class="self_keyword [0m[1m[31mcrate[0m_root">self</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_keywords.html[0m:[0m[32m48[0m:[0m55[0m:<span class="keyword">use</span> <span class="keyword [0m[1m[31mcrate[0m_root public">[0m[1m[31mcrate[0m</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_keywords.html[0m:[0m[32m49[0m:[0m60[0m:<span class="keyword">use</span> <span class="self_keyword [0m[1m[31mcrate[0m_root public">self</span><span class="semicolon">;</span>
[0m[35mcrates/ide/src/syntax_highlighting/test_data/highlight_keywords.html[0m:[0m[32m51[0m:[0m59[0m:    <span class="keyword">use</span> <span class="keyword [0m[1m[31mcrate[0m_root public">super</span><span class="operator">::</span><span class="punctuation">*</span><span class="semicolon">;</span>
[0m[35mcrates/hir-def/src/attr/tests.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::attr::{DocAtom, DocExpr};
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m10[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn filter(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId, raw_attrs: RawAttrs) -> Attrs {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m73[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn variants_attrs_query(
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m85[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m86[0m:[0m28[0m:        let cfg_options = &[0m[1m[31mcrate[0m_graph[krate].cfg_options;
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m100[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fields_attrs_query(
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m108[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m117[0m:[0m36[0m:                let cfg_options = &[0m[1m[31mcrate[0m_graph[krate].cfg_options;
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m156[0m:[0m28[0m:        let cfg_options = &[0m[1m[31mcrate[0m_graph[krate].cfg_options;
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m188[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> bool {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m354[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn attrs_with_owner(db: &dyn DefDatabase, owner: AttrDefId) -> Self {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m358[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn attrs_query(db: &dyn DefDatabase, def: AttrDefId) -> Attrs {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m376[0m:[0m35[0m:                    ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition } => {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m435[0m:[0m30[0m:            AttrDefId::Extern[0m[1m[31mCrate[0mId(it) => attrs_from_item_tree_loc(db, it),
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m521[0m:[0m30[0m:            AttrDefId::Extern[0m[1m[31mCrate[0mId(id) => any_has_attrs(db, id),
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m591[0m:[0m59[0m:    pub fn tt_values(self) -> impl Iterator<Item = &'attr [0m[1m[31mcrate[0m::tt::Subtree> {
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m659[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn variants_attrs_source_map(
[0m[35mcrates/hir-def/src/attr.rs[0m:[0m[32m673[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fields_attrs_source_map(
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m21[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m25[0m:[0m13[0m:            [0m[1m[31mcrate[0m::nested
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m51[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m55[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m58[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m::n3
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m61[0m:[0m13[0m:            [0m[1m[31mcrate[0m::n1
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m64[0m:[0m13[0m:            [0m[1m[31mcrate[0m::n1::n2
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m71[0m:[0m27[0m:fn macro_rules_from_other_[0m[1m[31mcrate[0ms_are_visible() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m74[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m79[0m:[0m5[0m:use [0m[1m[31mcrate[0m::*;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m81[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m90[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m95[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m107[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m112[0m:[0m5[0m:use [0m[1m[31mcrate[0m::*;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m114[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m123[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m128[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m140[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m145[0m:[0m5[0m:use [0m[1m[31mcrate[0m::*;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m147[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m162[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m167[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m179[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m189[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m204[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m213[0m:[0m27[0m:fn macro_rules_from_other_[0m[1m[31mcrate[0ms_are_visible_with_macro_use() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m214[0m:[0m45[0m:    cov_mark::check!(macro_rules_from_other_[0m[1m[31mcrate[0ms_are_visible_with_macro_use);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m217[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m221[0m:[0m1[0m:[0m[1m[31mcrate[0m::structs!(MacroNotResolved2);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m226[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m230[0m:[0m1[0m:[0m[1m[31mcrate[0m::structs!(MacroNotResolved3);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m232[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m250[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m256[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m266[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:empty,multiple,all
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m268[0m:[0m8[0m:extern [0m[1m[31mcrate[0m empty;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m275[0m:[0m8[0m:extern [0m[1m[31mcrate[0m multiple;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m285[0m:[0m8[0m:extern [0m[1m[31mcrate[0m all;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m291[0m:[0m15[0m://- /empty.rs [0m[1m[31mcrate[0m:empty
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m295[0m:[0m18[0m://- /multiple.rs [0m[1m[31mcrate[0m:multiple
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m305[0m:[0m13[0m://- /all.rs [0m[1m[31mcrate[0m:all
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m314[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m333[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m337[0m:[0m1[0m:[0m[1m[31mcrate[0m::structs!(MacroNotResolved2);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m343[0m:[0m1[0m:[0m[1m[31mcrate[0m::structs!(MacroNotResolved3);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m345[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m368[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m374[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m396[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m399[0m:[0m13[0m:            [0m[1m[31mcrate[0m::prelude
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m417[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m497[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m509[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m1
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m511[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m2
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m513[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m3
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m521[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m3::m4
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m524[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m3::m5
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m526[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m5
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m529[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m5::m6
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m531[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m7
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m553[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m565[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m567[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m572[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m573[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo as bar;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m583[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m599[0m:[0m1[0m:[0m[1m[31mcrate[0m::foo!(NotResolved);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m601[0m:[0m1[0m:[0m[1m[31mcrate[0m::bar!(Ok[0m[1m[31mCrate[0m);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m606[0m:[0m19[0m:m::alias3!(OkAlias[0m[1m[31mCrate[0m);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m616[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::bar as alias3;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m621[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m622[0m:[0m20[0m:            OkAlias[0m[1m[31mCrate[0m: t v
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m625[0m:[0m15[0m:            Ok[0m[1m[31mCrate[0m: t v
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m630[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m640[0m:[0m17[0m:fn macro_dollar_[0m[1m[31mcrate[0m_is_correct_in_item() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m641[0m:[0m35[0m:    cov_mark::check!(macro_dollar_[0m[1m[31mcrate[0m_self);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m644[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m646[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m652[0m:[0m18[0m:            use $[0m[1m[31mcrate[0m::Foo as FooSelf;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m663[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m668[0m:[0m18[0m:            use $[0m[1m[31mcrate[0m::Bar;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m676[0m:[0m14[0m:        use $[0m[1m[31mcrate[0m::Baz;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m684[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m692[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m698[0m:[0m17[0m:fn macro_dollar_[0m[1m[31mcrate[0m_is_correct_in_indirect_deps() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m699[0m:[0m35[0m:    cov_mark::check!(macro_dollar_[0m[1m[31mcrate[0m_other);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m703[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m706[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m716[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m720[0m:[0m14[0m:        use $[0m[1m[31mcrate[0m::bar;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m727[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m734[0m:[0m17[0m:fn macro_dollar_[0m[1m[31mcrate[0m_is_correct_in_derive_meta() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m735[0m:[0m23[0m:    let map = compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m738[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m741[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m745[0m:[0m19[0m:        #[derive($[0m[1m[31mcrate[0m::Clone)]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m758[0m:[0m23[0m:    let map = compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m760[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m766[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m782[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m785[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m792[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m802[0m:[0m23[0m:    let map = compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m804[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m811[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m828[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m840[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m844[0m:[0m13[0m:            [0m[1m[31mcrate[0m::submod
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m862[0m:[0m9[0m:        [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m881[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m892[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:proc
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m901[0m:[0m14[0m://- /proc.rs [0m[1m[31mcrate[0m:proc
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m902[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m907[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m930[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m945[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m973[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m993[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1003[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1027[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1041[0m:[0m78[0m:    // Make sure that only proc macros are publicly exported from proc-macro [0m[1m[31mcrate[0ms.
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1045[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:macros
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1048[0m:[0m16[0m://- /macros.rs [0m[1m[31mcrate[0m:macros
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1049[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1073[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1085[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1094[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1095[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1117[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1128[0m:[0m26[0m://- /lib.rs edition:2018 [0m[1m[31mcrate[0m:lib deps:std
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1131[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1141[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1159[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1176[0m:[0m10[0m:include!([0m[1m[31mcrate[0m::inner_b!());
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1192[0m:[0m9[0m:        [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1202[0m:[0m42[0m:fn eager_macro_correctly_resolves_dollar_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1203[0m:[0m25[0m:    // MBE -> eager -> $[0m[1m[31mcrate[0m::mbe
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1216[0m:[0m23[0m:    () => { include!($[0m[1m[31mcrate[0m::inner!()); };
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1225[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1230[0m:[0m25[0m:    // eager -> MBE -> $[0m[1m[31mcrate[0m::mbe
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1244[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::inner!()
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1254[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1265[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1267[0m:[0m8[0m:extern [0m[1m[31mcrate[0m lib;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1269[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:proc
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1277[0m:[0m14[0m://- /proc.rs [0m[1m[31mcrate[0m:proc
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1278[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1286[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1287[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1313[0m:[0m26[0m://- /lib.rs edition:2021 [0m[1m[31mcrate[0m:lib deps:dep,core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1315[0m:[0m8[0m:extern [0m[1m[31mcrate[0m dep;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1323[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1329[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1340[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1355[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1357[0m:[0m8[0m:extern [0m[1m[31mcrate[0m lib;
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1362[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1373[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1377[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1385[0m:[0m23[0m:    let map = compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1402[0m:[0m27[0m://- /main.rs edition:2021 [0m[1m[31mcrate[0m:main deps:proc,core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1408[0m:[0m14[0m://- /proc.rs [0m[1m[31mcrate[0m:proc
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1409[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1415[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/macros.rs[0m:[0m[32m1428[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m20[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m24[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m43[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m46[0m:[0m13[0m:            [0m[1m[31mcrate[0m::n1
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m49[0m:[0m13[0m:            [0m[1m[31mcrate[0m::n1::n2
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m64[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::iter::Iterator;
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m78[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m82[0m:[0m13[0m:            [0m[1m[31mcrate[0m::iter
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m86[0m:[0m13[0m:            [0m[1m[31mcrate[0m::iter::traits
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m90[0m:[0m13[0m:            [0m[1m[31mcrate[0m::iter::traits::iterator
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m93[0m:[0m13[0m:            [0m[1m[31mcrate[0m::prelude
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m103[0m:[0m20[0m://- /my_library.rs [0m[1m[31mcrate[0m:my_library
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m111[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m115[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m141[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m145[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m150[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m153[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async::r#async
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m178[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m183[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m187[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async::a
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m190[0m:[0m13[0m:            [0m[1m[31mcrate[0m::r#async::r#async
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m209[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m213[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m235[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m238[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m242[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m249[0m:[0m43[0m:fn module_resolution_module_with_path_non_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m264[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m267[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m271[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m290[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m294[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m312[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m315[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m336[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m339[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m342[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::foo_bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m363[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m366[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m369[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::foo_bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m379[0m:[0m24[0m://- /a/b/c/d/e/main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m390[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m393[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m396[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m414[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m417[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m435[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m438[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m456[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m459[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m462[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m479[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m482[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m485[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m503[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m506[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m509[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m530[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m533[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m536[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m557[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m560[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m563[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m581[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m584[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m601[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m604[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m607[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m614[0m:[0m51[0m:fn module_resolution_decl_inside_inline_module_in_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m628[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m632[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m635[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m659[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m662[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m666[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m669[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar::baz
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m676[0m:[0m55[0m:fn module_resolution_decl_inside_inline_module_in_non_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m693[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m696[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m700[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m703[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar::baz
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m710[0m:[0m55[0m:fn module_resolution_decl_inside_inline_module_in_non_[0m[1m[31mcrate[0m_root_2() {
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m727[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m730[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m734[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m737[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar::baz
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m744[0m:[0m48[0m:fn module_resolution_decl_inside_module_in_non_[0m[1m[31mcrate[0m_root_2() {
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m758[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m761[0m:[0m13[0m:            [0m[1m[31mcrate[0m::module
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m764[0m:[0m13[0m:            [0m[1m[31mcrate[0m::module::submod
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m785[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m788[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m791[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m794[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b::c
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m816[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m819[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m822[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m825[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b::c
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m834[0m:[0m13[0m:    compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m844[0m:[0m13[0m:    compute_[0m[1m[31mcrate[0m_def_map(
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m862[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m866[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m870[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m874[0m:[0m13[0m:            [0m[1m[31mcrate[0m::core
[0m[35mcrates/hir-def/src/nameres/tests/mod_resolution.rs[0m:[0m[32m893[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/path.rs[0m:[0m[32m1[0m:[0m47[0m://! A desugared representation of paths like `[0m[1m[31mcrate[0m::foo` or `<Type as Trait>::bar`.
[0m[35mcrates/hir-def/src/path.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/path.rs[0m:[0m[32m98[0m:[0m32[0m:    /// It correctly handles `$[0m[1m[31mcrate[0m` based path from macro call.
[0m[35mcrates/hir-def/src/path.rs[0m:[0m[32m241[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast(
[0m[35mcrates/hir-def/src/path.rs[0m:[0m[32m248[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn empty() -> GenericArgs {
[0m[35mcrates/hir-def/src/nameres/proc_macro.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::attr::Attrs;
[0m[35mcrates/hir-def/src/nameres/proc_macro.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tt::{Leaf, TokenTree};
[0m[35mcrates/hir-def/src/nameres/proc_macro.rs[0m:[0m[32m57[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn parse_macro_name_and_helper_attrs(tt: &[TokenTree]) -> Option<(Name, Box<[Name]>)> {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::DefDatabase, test_db::TestDB};
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m15[0m:[0m12[0m:fn compute_[0m[1m[31mcrate[0m_def_map(ra_fixture: &str) -> Arc<DefMap> {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m17[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m18[0m:[0m8[0m:    db.[0m[1m[31mcrate[0m_def_map(krate)
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m21[0m:[0m11[0m:fn render_[0m[1m[31mcrate[0m_def_map(ra_fixture: &str) -> String {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m23[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m24[0m:[0m8[0m:    db.[0m[1m[31mcrate[0m_def_map(krate).dump(&db)
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m28[0m:[0m25[0m:    let actual = render_[0m[1m[31mcrate[0m_def_map(ra_fixture);
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m33[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_def_map_smoke_test() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m39[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar::E;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m59[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m65[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m69[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m81[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_def_map_super_super() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m95[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m98[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m102[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m106[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a::b::c
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m114[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_def_map_fn_mod_same_name() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m123[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m126[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m129[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m::z
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m146[0m:[0m5[0m:use [0m[1m[31mcrate[0m;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m149[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m153[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m164[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::Baz as Foo;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m170[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m174[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m186[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar::{Baz, Quux};
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m196[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m201[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m204[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m227[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m231[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m235[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m246[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m248[0m:[0m12[0m:use ::test_[0m[1m[31mcrate[0m::prelude::*;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m252[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m259[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m275[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m286[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m edition:2015
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m295[0m:[0m11[0m:use other_[0m[1m[31mcrate[0m::FromLib;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m297[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m edition:2018
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m301[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m305[0m:[0m13[0m:            [0m[1m[31mcrate[0m::bar
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m308[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m321[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar::Baz::{self};
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m330[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m334[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m337[0m:[0m13[0m:            [0m[1m[31mcrate[0m::foo::bar
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m344[0m:[0m20[0m:fn item_map_across_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m347[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m348[0m:[0m10[0m:use test_[0m[1m[31mcrate[0m::Baz;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m350[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m354[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m361[0m:[0m11[0m:fn extern_[0m[1m[31mcrate[0m_rename() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m364[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m365[0m:[0m8[0m:extern [0m[1m[31mcrate[0m alloc as alloc_[0m[1m[31mcrate[0m;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m370[0m:[0m11[0m:use alloc_[0m[1m[31mcrate[0m::Arc;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m372[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m376[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m378[0m:[0m19[0m:            alloc_[0m[1m[31mcrate[0m: te
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m381[0m:[0m13[0m:            [0m[1m[31mcrate[0m::alloc
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m383[0m:[0m13[0m:            [0m[1m[31mcrate[0m::sync
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m390[0m:[0m11[0m:fn extern_[0m[1m[31mcrate[0m_rename_2015_edition() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m393[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc edition:2015
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m394[0m:[0m8[0m:extern [0m[1m[31mcrate[0m alloc as alloc_[0m[1m[31mcrate[0m;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m399[0m:[0m11[0m:use alloc_[0m[1m[31mcrate[0m::Arc;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m401[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m405[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m407[0m:[0m19[0m:            alloc_[0m[1m[31mcrate[0m: te
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m410[0m:[0m13[0m:            [0m[1m[31mcrate[0m::alloc
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m412[0m:[0m13[0m:            [0m[1m[31mcrate[0m::sync
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m419[0m:[0m21[0m:fn macro_use_extern_[0m[1m[31mcrate[0m_self() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m420[0m:[0m46[0m:    cov_mark::check!(ignore_macro_use_extern_[0m[1m[31mcrate[0m_self);
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m423[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m425[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self as bla;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m428[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m435[0m:[0m20[0m:fn reexport_across_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m438[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m439[0m:[0m10[0m:use test_[0m[1m[31mcrate[0m::Baz;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m441[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:test_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m449[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m456[0m:[0m30[0m:fn values_dont_shadow_extern_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m459[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m463[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m467[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m478[0m:[0m35[0m:        //- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:core,std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m482[0m:[0m22[0m:        //- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m488[0m:[0m21[0m:        //- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m495[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m508[0m:[0m35[0m:        //- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m511[0m:[0m21[0m:        //- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m519[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m525[0m:[0m35[0m:        //- /main.rs edition:2021 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m528[0m:[0m21[0m:        //- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m536[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m546[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:core,std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m549[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m557[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m565[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m576[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m579[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m592[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m604[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m607[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:std cfg:test,feature=foo,feature=bar,opt=42
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m620[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m635[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::b::*;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m638[0m:[0m5[0m:use [0m[1m[31mcrate[0m::a::T;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m645[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m650[0m:[0m13[0m:            [0m[1m[31mcrate[0m::a
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m653[0m:[0m13[0m:            [0m[1m[31mcrate[0m::b
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m673[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m678[0m:[0m13[0m:            [0m[1m[31mcrate[0m::tr
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m695[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tr::PrivTr as _;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m696[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::tr::PubTr as _;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m698[0m:[0m5[0m:use [0m[1m[31mcrate[0m::reex::*;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m701[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m706[0m:[0m13[0m:            [0m[1m[31mcrate[0m::reex
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m710[0m:[0m13[0m:            [0m[1m[31mcrate[0m::tr
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m718[0m:[0m19[0m:fn underscore_pub_[0m[1m[31mcrate[0m_reexport() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m722[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m725[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m734[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m750[0m:[0m5[0m:use [0m[1m[31mcrate[0m::m::{Struct as _, Enum as _, CONST as _};
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m753[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m756[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m778[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m783[0m:[0m13[0m:            [0m[1m[31mcrate[0m::tr
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m790[0m:[0m19[0m:fn cfg_the_entire_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m801[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m807[0m:[0m8[0m:fn use_[0m[1m[31mcrate[0m_as() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m810[0m:[0m5[0m:use [0m[1m[31mcrate[0m as foo;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m817[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m838[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m842[0m:[0m13[0m:            [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m849[0m:[0m23[0m:fn import_from_extern_[0m[1m[31mcrate[0m_only_imports_public_items() {
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m852[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:settings,macros
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m855[0m:[0m18[0m://- /settings.rs [0m[1m[31mcrate[0m:settings
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m857[0m:[0m16[0m://- /macros.rs [0m[1m[31mcrate[0m:macros
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m862[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m873[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep extern-prelude:
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m875[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m879[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m885[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep extern-prelude:
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m886[0m:[0m8[0m:extern [0m[1m[31mcrate[0m dep;
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m888[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m892[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m917[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m922[0m:[0m13[0m:            [0m[1m[31mcrate[0m::other_module
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m925[0m:[0m13[0m:            [0m[1m[31mcrate[0m::other_module::some_submodule
[0m[35mcrates/hir-def/src/nameres/tests.rs[0m:[0m[32m928[0m:[0m13[0m:            [0m[1m[31mcrate[0m::some_module
[0m[35mcrates/hir-def/src/hir.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/hir.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn dummy_expr_id() -> ExprId {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Trace<T, V> {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_arena() -> Trace<T, V> {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m25[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_map() -> Trace<T, V> {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn alloc(&mut self, value: impl FnOnce() -> V, data: impl FnOnce() -> T) -> Idx<T> {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m44[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn into_arena(mut self) -> Arena<T> {
[0m[35mcrates/hir-def/src/trace.rs[0m:[0m[32m48[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn into_map(mut self) -> ArenaMap<Idx<T>, V> {
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m153[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn generic_params_query(
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m160[0m:[0m30[0m:        let cfg_options = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m249[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fill(
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m263[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fill_bounds(
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m392[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fill_implicit_impl_trait_args(
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m424[0m:[0m29[0m:                            [0m[1m[31mcrate[0m::item_scope::BuiltinShadowMode::Other,
[0m[35mcrates/hir-def/src/generics.rs[0m:[0m[32m442[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn shrink_to_fit(&mut self) {
[0m[35mcrates/hir-def/src/body/pretty.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m8[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mId, Dependency, Edition, FileId};
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m31[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m36[0m:[0m42[0m:    item_scope::{ImportId, ImportOrExtern[0m[1m[31mCrate[0m, ImportType, PerNsGlobImports},
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m38[0m:[0m21[0m:        self, Extern[0m[1m[31mCrate[0m, Fields, FileItemTreeId, ImportKind, ItemTree, ItemTreeId, ItemTreeNode,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m54[0m:[0m44[0m:    AdtId, AstId, AstIdWithPath, ConstLoc, [0m[1m[31mCrate[0mRootModuleId, EnumLoc, EnumVariantId,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m55[0m:[0m27[0m:    ExternBlockLoc, Extern[0m[1m[31mCrate[0mId, Extern[0m[1m[31mCrate[0mLoc, FunctionId, FunctionLoc, ImplLoc, Intern,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m66[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m70[0m:[0m18[0m:    let krate = &[0m[1m[31mcrate[0m_graph[def_map.krate];
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m72[0m:[0m26[0m:        tracing::debug!("[0m[1m[31mcrate[0m dep {:?} -> {:?}", dep.name, dep.[0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m95[0m:[0m53[0m:            None => Err("No proc-macros present for [0m[1m[31mcrate[0m".to_owned().into_boxed_str()),
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m134[0m:[0m61[0m:    /// All namespaces are resolved, OR it comes from other [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m150[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m { id: Extern[0m[1m[31mCrate[0mId },
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m181[0m:[0m20[0m:    fn from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m183[0m:[0m51[0m:        item_tree_id: ItemTreeId<item_tree::Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m184[0m:[0m19[0m:        id: Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m192[0m:[0m41[0m:            source: ImportSource::Extern[0m[1m[31mCrate[0m { id },
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m231[0m:[0m51[0m:    /// List of procedural macros defined by this [0m[1m[31mcrate[0m. This is read from the dynamic library
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m257[0m:[0m31[0m:        let file_id = self.db.[0m[1m[31mcrate[0m_graph()[self.def_map.krate].root_file_id;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m260[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_data = Arc::get_mut(&mut self.def_map.data).unwrap();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m263[0m:[0m13[0m:            [0m[1m[31mcrate[0m_data.proc_macro_loading_error = Some(e.clone());
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m268[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m270[0m:[0m44[0m:                    .insert(name.clone(), ([0m[1m[31mCrate[0mRootModuleId { krate: dep.[0m[1m[31mcrate[0m_id }, None));
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m274[0m:[0m26[0m:        // Process other [0m[1m[31mcrate[0m-level attributes.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m289[0m:[0m25[0m:                        [0m[1m[31mcrate[0m_data.recursion_limit = Some(limit);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m295[0m:[0m48[0m:            if *attr_name == hir_expand::name![[0m[1m[31mcrate[0m_type] {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m303[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.no_core = true;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m308[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.no_std = true;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m313[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.rustc_coherence_is_core = true;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m327[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.unstable_features.extend(features);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m342[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.registered_attrs.push(registered_name.to_smol_str());
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m345[0m:[0m17[0m:                [0m[1m[31mcrate[0m_data.registered_tools.push(registered_name.to_smol_str());
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m350[0m:[0m9[0m:        [0m[1m[31mcrate[0m_data.shrink_to_fit();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m441[0m:[0m18[0m:            // A [0m[1m[31mcrate[0m exporting procedural macros is not allowed to export anything else.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m445[0m:[0m23[0m:            // in the [0m[1m[31mcrate[0m root that aren't proc macros.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m550[0m:[0m51[0m:                    import.and_then(ImportOrExtern[0m[1m[31mCrate[0m::into_import).map(|it| it.import),
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m570[0m:[0m89[0m:    /// When procedural macro support is enabled, the list of proc macros exported by a [0m[1m[31mcrate[0m is
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m571[0m:[0m46[0m:    /// known before we resolve names in the [0m[1m[31mcrate[0m. This list is stored in `self.proc_macros` and is
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m596[0m:[0m52[0m:            ProcMacroLoc { container: self.def_map.[0m[1m[31mcrate[0m_root(), id, expander, kind }
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m599[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_data = Arc::get_mut(&mut self.def_map.data).unwrap();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m601[0m:[0m13[0m:            [0m[1m[31mcrate[0m_data
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m605[0m:[0m9[0m:        [0m[1m[31mcrate[0m_data.fn_proc_macro_mapping.insert(fn_id, proc_macro_id);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m612[0m:[0m40[0m:    /// You can `use` or invoke it by `[0m[1m[31mcrate[0m::macro_name` anywhere, before or after the definition.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m624[0m:[0m9[0m:    /// [0m[1m[31mcrate[0m::foo!();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m645[0m:[0m12[0m:        // [0m[1m[31mcrate[0m root, even if the parent modules is **not** visible.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m708[0m:[0m45[0m:    /// Import exported macros from another [0m[1m[31mcrate[0m. `names`, if `Some(_)`, specifies the name of
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m714[0m:[0m34[0m:    fn import_macros_from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m716[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m718[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m: Option<Extern[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m720[0m:[0m31[0m:        let def_map = self.db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m729[0m:[0m82[0m:                        self.def_map.macro_use_prelude.insert(name, (def, extern_[0m[1m[31mcrate[0m));
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m735[0m:[0m86[0m:                    self.def_map.macro_use_prelude.insert(name.clone(), (def, extern_[0m[1m[31mcrate[0m));
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m774[0m:[0m33[0m:            ImportSource::Extern[0m[1m[31mCrate[0m { .. } => {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m778[0m:[0m37[0m:                    .expect("extern [0m[1m[31mcrate[0m should have been desugared to one-element path");
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m780[0m:[0m47[0m:                let res = self.resolve_extern_[0m[1m[31mcrate[0m(name);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m824[0m:[0m23[0m:    fn resolve_extern_[0m[1m[31mcrate[0m(&self, name: &Name) -> Option<[0m[1m[31mCrate[0mRootModuleId> {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m826[0m:[0m35[0m:            cov_mark::hit!(extern_[0m[1m[31mcrate[0m_self_as);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m827[0m:[0m31[0m:            Some(self.def_map.[0m[1m[31mcrate[0m_root())
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m829[0m:[0m43[0m:            self.deps.get(name).map(|dep| [0m[1m[31mCrate[0mRootModuleId { krate: dep.[0m[1m[31mcrate[0m_id })
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m845[0m:[0m33[0m:            ImportSource::Extern[0m[1m[31mCrate[0m { .. }
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m860[0m:[0m31[0m:                    // extern [0m[1m[31mcrate[0ms in the [0m[1m[31mcrate[0m root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m861[0m:[0m41[0m:                    ImportSource::Extern[0m[1m[31mCrate[0m { id, .. } => {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m874[0m:[0m43[0m:                        ImportType::Extern[0m[1m[31mCrate[0m(id)
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m898[0m:[0m56[0m:                            cov_mark::hit!(glob_across_[0m[1m[31mcrate[0ms);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m899[0m:[0m55[0m:                            // glob import from other [0m[1m[31mcrate[0m => we can just import everything once
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m908[0m:[0m91[0m:                                    (n, res.filter_visibility(|v| v.is_visible_from_other_[0m[1m[31mcrate[0m()))
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m915[0m:[0m54[0m:                            // glob import from same [0m[1m[31mcrate[0m => we do an initial
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m959[0m:[0m45[0m:                        // look back at the [0m[1m[31mcrate[0m_def_map, creating a cycle. For
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m960[0m:[0m47[0m:                        // example, `enum E { [0m[1m[31mcrate[0m::some_macro!(); }`. Luckily, the
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1156[0m:[0m51[0m:                            let def_map = self.db.[0m[1m[31mcrate[0m_def_map(def_id.krate);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1323[0m:[0m43[0m:                            // proc macro [0m[1m[31mcrate[0m failed), report this and skip
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1465[0m:[0m82[0m:        // We'd like to avoid emitting a diagnostics avalanche when some `extern [0m[1m[31mcrate[0m` doesn't
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1466[0m:[0m69[0m:        // resolve. We first emit diagnostics for unresolved extern [0m[1m[31mcrate[0ms and collect the missing
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1467[0m:[0m12[0m:        // [0m[1m[31mcrate[0m names. Then we emit diagnostics for unresolved imports, but only if the import
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1468[0m:[0m45[0m:        // doesn't start with an unresolved [0m[1m[31mcrate[0m's name. Due to renaming and reexports, this is a
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1470[0m:[0m34[0m:        let mut diagnosed_extern_[0m[1m[31mcrate[0ms = FxHashSet::default();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1472[0m:[0m40[0m:            if let ImportSource::Extern[0m[1m[31mCrate[0m { id } = directive.import.source {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1475[0m:[0m28[0m:                let extern_[0m[1m[31mcrate[0m = &item_tree[item_tree_id.value];
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1477[0m:[0m34[0m:                diagnosed_extern_[0m[1m[31mcrate[0ms.insert(extern_[0m[1m[31mcrate[0m.name.clone());
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1479[0m:[0m80[0m:                self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1481[0m:[0m64[0m:                    InFile::new(item_tree_id.file_id(), extern_[0m[1m[31mcrate[0m.ast_id),
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1492[0m:[0m88[0m:                    (Some(krate), PathKind::Plain | PathKind::Abs) if diagnosed_extern_[0m[1m[31mcrate[0ms.contains(krate)
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1527[0m:[0m16[0m:        let is_[0m[1m[31mcrate[0m_root = self.module_id == DefMap::ROOT;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1535[0m:[0m52[0m:            if prelude_module.krate != krate && is_[0m[1m[31mcrate[0m_root {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1537[0m:[0m62[0m:                self.def_collector.import_macros_from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1603[0m:[0m32[0m:                ModItem::Extern[0m[1m[31mCrate[0m(item_tree_id) => {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1604[0m:[0m36[0m:                    let id = Extern[0m[1m[31mCrate[0mLoc {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1609[0m:[0m27[0m:                    if is_[0m[1m[31mcrate[0m_root {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1610[0m:[0m55[0m:                        self.process_macro_use_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1619[0m:[0m40[0m:                        .define_extern_[0m[1m[31mcrate[0m_decl(id);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1622[0m:[0m53[0m:                        import: Import::from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1786[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0ms should be processed eagerly instead of deferred to resolving.
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1787[0m:[0m33[0m:        // `#[macro_use] extern [0m[1m[31mcrate[0m` is hoisted to imports macros before collecting
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1789[0m:[0m15[0m:        if is_[0m[1m[31mcrate[0m_root {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1792[0m:[0m58[0m:                .filter(|it| matches!(it, ModItem::Extern[0m[1m[31mCrate[0m(..)))
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1797[0m:[0m59[0m:                .filter(|it| !matches!(it, ModItem::Extern[0m[1m[31mCrate[0m(..)))
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1805[0m:[0m33[0m:    fn process_macro_use_extern_[0m[1m[31mcrate[0m<'a>(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1807[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m: FileItemTreeId<Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1808[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m_id: Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1813[0m:[0m20[0m:        let target_[0m[1m[31mcrate[0m =
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1814[0m:[0m53[0m:            match self.def_collector.resolve_extern_[0m[1m[31mcrate[0m(&self.item_tree[extern_[0m[1m[31mcrate[0m].name) {
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1816[0m:[0m60[0m:                    cov_mark::hit!(ignore_macro_use_extern_[0m[1m[31mcrate[0m_self);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1823[0m:[0m47[0m:        cov_mark::hit!(macro_rules_from_other_[0m[1m[31mcrate[0ms_are_visible_with_macro_use);
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1831[0m:[0m62[0m:                self.def_collector.import_macros_from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1832[0m:[0m28[0m:                    target_[0m[1m[31mcrate[0m,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1834[0m:[0m33[0m:                    Some(extern_[0m[1m[31mcrate[0m_id),
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1845[0m:[0m54[0m:        self.def_collector.import_macros_from_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1846[0m:[0m20[0m:            target_[0m[1m[31mcrate[0m,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1848[0m:[0m25[0m:            Some(extern_[0m[1m[31mcrate[0m_id),
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m1945[0m:[0m22[0m:        visibility: &[0m[1m[31mcrate[0m::visibility::RawVisibility,
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m2346[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{db::DefDatabase, test_db::TestDB};
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m2375[0m:[0m29[0m:        let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m2377[0m:[0m26[0m:        let edition = db.[0m[1m[31mcrate[0m_graph()[krate].edition;
[0m[35mcrates/hir-def/src/nameres/collector.rs[0m:[0m[32m2378[0m:[0m43[0m:        let module_origin = ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition: file_id };
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m8[0m:[0m14[0m://! they are [0m[1m[31mcrate[0m-independent: they don't know which `#[cfg]`s are active or which module they
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m10[0m:[0m14[0m://! multiple [0m[1m[31mcrate[0ms, or might be included into the same [0m[1m[31mcrate[0m twice via `#[path]`).
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m22[0m:[0m9[0m://! per-[0m[1m[31mcrate[0m, because we are interested in incrementally computing it.
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m46[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m64[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m80[0m:[0m19[0m:    pub const PUB_[0m[1m[31mCRATE[0m: Self = RawVisibilityId(u32::max_value() - 2);
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m89[0m:[0m23[0m:            Self::PUB_[0m[1m[31mCRATE[0m => f.field(&"pub([0m[1m[31mcrate[0m)"),
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m108[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m146[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn block_item_tree_query(db: &dyn DefDatabase, block: BlockId) -> Arc<ItemTree> {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m163[0m:[0m64[0m:    pub fn top_level_attrs(&self, db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Attrs {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m171[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn raw_attrs(&self, of: AttrOwner) -> &RawAttrs {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m175[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn attrs(&self, db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId, of: AttrOwner) -> Attrs {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m195[0m:[0m24[0m:                extern_[0m[1m[31mcrate[0ms,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m218[0m:[0m20[0m:            extern_[0m[1m[31mcrate[0ms.shrink_to_fit();
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m254[0m:[0m27[0m:                PathKind::[0m[1m[31mCrate[0m => RawVisibilityId::PUB_[0m[1m[31mCRATE[0m,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m264[0m:[0m16[0m:static VIS_PUB_[0m[1m[31mCRATE[0m: RawVisibility = RawVisibility::Module(ModPath::from_kind(PathKind::[0m[1m[31mCrate[0m));
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m269[0m:[0m12[0m:    extern_[0m[1m[31mcrate[0ms: Arena<Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m382[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(file: HirFileId, block: Option<BlockId>) -> Self {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m386[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn item_tree(&self, db: &dyn DefDatabase) -> Arc<ItemTree> {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m393[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_id(self) -> HirFileId {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m397[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_block(self) -> bool {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m502[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m in extern_[0m[1m[31mcrate[0ms -> ast::Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m542[0m:[0m34[0m:            RawVisibilityId::PUB_[0m[1m[31mCRATE[0m => &VIS_PUB_[0m[1m[31mCRATE[0m,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m590[0m:[0m18[0m:pub struct Extern[0m[1m[31mCrate[0m {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m594[0m:[0m38[0m:    pub ast_id: FileAstId<ast::Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m613[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) flags: FnFlags,
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m624[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct FnFlags: u8 {
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m899[0m:[0m30[0m:            | ModItem::Extern[0m[1m[31mCrate[0m(_)
[0m[35mcrates/hir-def/src/item_tree.rs[0m:[0m[32m921[0m:[0m28[0m:            ModItem::Extern[0m[1m[31mCrate[0m(it) => tree[it.index].ast_id().upcast(),
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m47[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expr_scopes_query(db: &dyn DefDatabase, def: DefWithBodyId) -> Arc<ExprScopes> {
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m275[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{db::DefDatabase, test_db::TestDB, FunctionId, ModuleDefId};
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m278[0m:[0m29[0m:        let krate = db.test_[0m[1m[31mcrate[0m();
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m279[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m281[0m:[0m22[0m:        let module = [0m[1m[31mcrate[0m_def_map.modules_for_file(file_id).next().unwrap();
[0m[35mcrates/hir-def/src/body/scope.rs[0m:[0m[32m282[0m:[0m24[0m:        let (_, def) = [0m[1m[31mcrate[0m_def_map[module].scope.entries().next().unwrap();
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m130[0m:[0m42[0m:    ungated!(reexport_test_harness_main, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "name"), ErrorFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m180[0m:[0m8[0m:    // [0m[1m[31mCrate[0m properties:
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m181[0m:[0m14[0m:    ungated!([0m[1m[31mcrate[0m_name, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "name"), FutureWarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m182[0m:[0m14[0m:    ungated!([0m[1m[31mcrate[0m_type, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "bin|lib|..."), DuplicatesOk),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m183[0m:[0m8[0m:    // [0m[1m[31mcrate[0m_id is deprecated
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m184[0m:[0m14[0m:    ungated!([0m[1m[31mcrate[0m_id, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "ignored"), FutureWarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m202[0m:[0m31[0m:    ungated!(recursion_limit, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "N"), FutureWarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m203[0m:[0m33[0m:    ungated!(type_length_limit, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "N"), FutureWarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m205[0m:[0m26[0m:        move_size_limit, [0m[1m[31mCrate[0mLevel, template!(NameValueStr: "N"), ErrorFollowing,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m212[0m:[0m24[0m:    ungated!(no_start, [0m[1m[31mCrate[0mLevel, template!(Word), WarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m213[0m:[0m23[0m:    ungated!(no_main, [0m[1m[31mCrate[0mLevel, template!(Word), WarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m217[0m:[0m22[0m:    ungated!(no_std, [0m[1m[31mCrate[0mLevel, template!(Word), WarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m223[0m:[0m28[0m:        windows_subsystem, [0m[1m[31mCrate[0mLevel,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m231[0m:[0m27[0m:    ungated!(no_builtins, [0m[1m[31mCrate[0mLevel, template!(Word), WarnFollowing),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m269[0m:[0m19[0m:    //     type_: [0m[1m[31mCrate[0mLevel,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m285[0m:[0m22[0m:        test_runner, [0m[1m[31mCrate[0mLevel, template!(List: "path"), ErrorFollowing, custom_test_frameworks,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m297[0m:[0m21[0m:    gated!(no_core, [0m[1m[31mCrate[0mLevel, template!(Word), WarnFollowing, experimental!(no_core)),
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m310[0m:[0m24[0m:        register_tool, [0m[1m[31mCrate[0mLevel, template!(List: "tool1, tool2, ..."), DuplicatesOk,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m351[0m:[0m18[0m:        feature, [0m[1m[31mCrate[0mLevel,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m424[0m:[0m91[0m:        "the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` [0m[1m[31mcrate[0m \
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m429[0m:[0m90[0m:        "the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` [0m[1m[31mcrate[0m \
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m542[0m:[0m49[0m:        rustc_coherence_is_core, AttributeType::[0m[1m[31mCrate[0mLevel, template!(Word), ErrorFollowing, @only_local: true,
[0m[35mcrates/hir-def/src/attr/builtin.rs[0m:[0m[32m596[0m:[0m16[0m:        across [0m[1m[31mcrate[0ms and will never be stable",
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m7[0m:[0m19[0m:    AnchoredPath, [0m[1m[31mCrate[0mId, FileId, FileLoader, FileLoaderDelegate, FilePosition, SourceDatabase,
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m26[0m:[0m5[0m:    [0m[1m[31mcrate[0m::db::InternDatabaseStorage,
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m27[0m:[0m5[0m:    [0m[1m[31mcrate[0m::db::DefDatabaseStorage
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TestDB {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m78[0m:[0m17[0m:    fn relevant_[0m[1m[31mcrate[0ms(&self, file_id: FileId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m79[0m:[0m43[0m:        FileLoaderDelegate(self).relevant_[0m[1m[31mcrate[0ms(file_id)
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m84[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn module_for_file(&self, file_id: FileId) -> ModuleId {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m85[0m:[0m37[0m:        for &krate in self.relevant_[0m[1m[31mcrate[0ms(file_id).iter() {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m86[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = self.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m87[0m:[0m37[0m:            for (local_id, data) in [0m[1m[31mcrate[0m_def_map.modules() {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m89[0m:[0m28[0m:                    return [0m[1m[31mcrate[0m_def_map.module_id(local_id);
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m96[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn module_at_position(&self, position: FilePosition) -> ModuleId {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m222[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {
[0m[35mcrates/hir-def/src/test_db.rs[0m:[0m[32m228[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {
[0m[35mcrates/hir-def/src/body/tests.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{test_db::TestDB, ModuleDefId};
[0m[35mcrates/hir-def/src/body/tests.rs[0m:[0m[32m13[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/body/tests.rs[0m:[0m[32m14[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1[0m:[0m15[0m://! `hir_def` [0m[1m[31mcrate[0m contains everything between macro expansion and type
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m66[0m:[0m39[0m:use base_db::{impl_intern_key, salsa, [0m[1m[31mCrate[0mId, ProcMacroKind};
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m88[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m92[0m:[0m28[0m:        Const, Enum, Extern[0m[1m[31mCrate[0m, Function, Impl, ItemTreeId, ItemTreeNode, MacroDef, MacroRules,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m97[0m:[0m35[0m:/// A `ModuleId` that is always a [0m[1m[31mcrate[0m's root module.
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m99[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m100[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m103[0m:[0m6[0m:impl [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m105[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_def_map(self.krate)
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m108[0m:[0m27[0m:    pub fn krate(self) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m113[0m:[0m30[0m:impl PartialEq<ModuleId> for [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m118[0m:[0m16[0m:impl PartialEq<[0m[1m[31mCrate[0mRootModuleId> for ModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m119[0m:[0m26[0m:    fn eq(&self, other: &[0m[1m[31mCrate[0mRootModuleId) -> bool {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m124[0m:[0m11[0m:impl From<[0m[1m[31mCrate[0mRootModuleId> for ModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m125[0m:[0m13[0m:    fn from([0m[1m[31mCrate[0mRootModuleId { krate }: [0m[1m[31mCrate[0mRootModuleId) -> Self {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m130[0m:[0m11[0m:impl From<[0m[1m[31mCrate[0mRootModuleId> for ModuleDefId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m131[0m:[0m20[0m:    fn from(value: [0m[1m[31mCrate[0mRootModuleId) -> Self {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m136[0m:[0m11[0m:impl From<[0m[1m[31mCrate[0mId> for [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m137[0m:[0m20[0m:    fn from(krate: [0m[1m[31mCrate[0mId) -> Self {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m138[0m:[0m9[0m:        [0m[1m[31mCrate[0mRootModuleId { krate }
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m142[0m:[0m28[0m:impl TryFrom<ModuleId> for [0m[1m[31mCrate[0mRootModuleId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m147[0m:[0m16[0m:            Ok([0m[1m[31mCrate[0mRootModuleId { krate })
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m156[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m158[0m:[0m83[0m:    /// `BlockId` of that block expression. If `None`, this module is part of the [0m[1m[31mcrate[0m-level
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m169[0m:[0m24[0m:            None => db.[0m[1m[31mcrate[0m_def_map(self.krate),
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m173[0m:[0m27[0m:    pub fn krate(self) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m344[0m:[0m18[0m:pub struct Extern[0m[1m[31mCrate[0mId(salsa::InternId);
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m345[0m:[0m12[0m:type Extern[0m[1m[31mCrate[0mLoc = ItemLoc<Extern[0m[1m[31mCrate[0m>;
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m346[0m:[0m20[0m:impl_intern!(Extern[0m[1m[31mCrate[0mId, Extern[0m[1m[31mCrate[0mLoc, intern_extern_[0m[1m[31mcrate[0m, lookup_intern_extern_[0m[1m[31mcrate[0m);
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m389[0m:[0m20[0m:    pub container: [0m[1m[31mCrate[0mRootModuleId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m641[0m:[0m18[0m:/// the `hir-ty` [0m[1m[31mcrate[0m) of the constant in its id, which is a temporary hack so we may want
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m853[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mId(Extern[0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m871[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m993[0m:[0m26[0m:impl HasModule for Extern[0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1098[0m:[0m54[0m:    pub fn krate(&self, db: &dyn db::DefDatabase) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1122[0m:[0m30[0m:            AttrDefId::Extern[0m[1m[31mCrate[0mId(it) => it.lookup(db).container.krate,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1133[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1142[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1151[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1191[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1202[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1305[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1327[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1353[0m:[0m5[0m:    [0m[1m[31mcrate[0m::type_ref::TypeRef,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1354[0m:[0m5[0m:    [0m[1m[31mcrate[0m::type_ref::TraitRef,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1355[0m:[0m5[0m:    [0m[1m[31mcrate[0m::type_ref::TypeBound,
[0m[35mcrates/hir-def/src/lib.rs[0m:[0m[32m1356[0m:[0m5[0m:    [0m[1m[31mcrate[0m::path::GenericArgs,
[0m[35mcrates/hir-def/src/body/lower.rs[0m:[0m[32m6[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/body/lower.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/body/lower.rs[0m:[0m[32m60[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/body/lower.rs[0m:[0m[32m97[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/body/lower.rs[0m:[0m[32m974[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::item_scope::BuiltinShadowMode::Other,
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m17[0m:[0m69[0m:    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, Extern[0m[1m[31mCrate[0mId, FieldId, ImplId,
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m94[0m:[0m21[0m:        self.extern_[0m[1m[31mcrate[0m_decls().for_each(|ext| add_extern_[0m[1m[31mcrate[0m(db, res, file_id, ext));
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m172[0m:[0m23[0m:        fn add_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m176[0m:[0m24[0m:            ext: Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/child_by_source.rs[0m:[0m[32m180[0m:[0m34[0m:                map[keys::EXTERN_[0m[1m[31mCRATE[0m].insert(loc.source(db).value, ext)
[0m[35mcrates/hir-def/src/dyn_map/keys.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/dyn_map/keys.rs[0m:[0m[32m11[0m:[0m43[0m:    ConstId, EnumId, EnumVariantId, Extern[0m[1m[31mCrate[0mId, FieldId, FunctionId, ImplId, LifetimeParamId,
[0m[35mcrates/hir-def/src/dyn_map/keys.rs[0m:[0m[32m16[0m:[0m22[0m:pub type Key<K, V> = [0m[1m[31mcrate[0m::dyn_map::Key<K, V, AstPtrPolicy<K, V>>;
[0m[35mcrates/hir-def/src/dyn_map/keys.rs[0m:[0m[32m28[0m:[0m18[0m:pub const EXTERN_[0m[1m[31mCRATE[0m: Key<ast::Extern[0m[1m[31mCrate[0m, Extern[0m[1m[31mCrate[0mId> = Key::new();
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m18[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m26[0m:[0m13[0m:fn use_from_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m33[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::Struct as [0m[1m[31mCrate[0mStruct;
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m41[0m:[0m13[0m:            [0m[1m[31mCrate[0mStruct: ti
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m47[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m72[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m103[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m126[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m130[0m:[0m13[0m:            [0m[1m[31mcrate[0m::module
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m171[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m194[0m:[0m13[0m:            [0m[1m[31mcrate[0m scope
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m229[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m256[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m266[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:core
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m275[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m284[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::_mark as mark;
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m294[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m326[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m329[0m:[0m13[0m:            [0m[1m[31mcrate[0m::module
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m356[0m:[0m9[0m:        [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m382[0m:[0m9[0m:        [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m385[0m:[0m9[0m:        [0m[1m[31mcrate[0m::m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m417[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m433[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::name;
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m446[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m470[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body/tests/block.rs[0m:[0m[32m492[0m:[0m13[0m:            [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m11[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m112[0m:[0m72[0m:    UnresolvedProcMacro { node: InFile<AstPtr<ast::MacroCall>>, krate: [0m[1m[31mCrate[0mId },
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m119[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn body_with_source_map_query(
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m137[0m:[0m29[0m:                        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m143[0m:[0m54[0m:                                    .is_cfg_enabled(&[0m[1m[31mcrate[0m_graph[krate].cfg_options)
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m177[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn body_query(db: &dyn DefDatabase, def: DefWithBodyId) -> Arc<Body> {
[0m[35mcrates/hir-def/src/body.rs[0m:[0m[32m208[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{lower::LowerCtx, type_ref::ConstRef};
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m18[0m:[0m28[0m:/// It correctly handles `$[0m[1m[31mcrate[0m` based path from macro call.
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m54[0m:[0m35[0m:                    Either::Right([0m[1m[31mcrate[0m_id) => {
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m55[0m:[0m48[0m:                        kind = PathKind::Dollar[0m[1m[31mCrate[0m([0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m115[0m:[0m35[0m:            ast::PathSegmentKind::[0m[1m[31mCrate[0mKw => {
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m116[0m:[0m34[0m:                kind = PathKind::[0m[1m[31mCrate[0m;
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m154[0m:[0m25[0m:            if let Some([0m[1m[31mcrate[0m_id) = hygiene.local_inner_macros(ctx.db.upcast(), path) {
[0m[35mcrates/hir-def/src/path/lower.rs[0m:[0m[32m155[0m:[0m40[0m:                kind = PathKind::Dollar[0m[1m[31mCrate[0m([0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-def/src/dyn_map.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const fn new() -> Key<K, V, P> {
[0m[35mcrates/hir-def/src/dyn_map.rs[0m:[0m[32m77[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) map: Map,
[0m[35mcrates/hir-def/src/hir/format_args.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::hir::ExprId;
[0m[35mcrates/hir-def/src/hir/format_args.rs[0m:[0m[32m167[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn parse(
[0m[35mcrates/hir-def/src/hir/format_args.rs[0m:[0m[32m428[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(self) -> FormatArguments {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m6[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m19[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mId, HasModule, ImplId, LocalModuleId, Lookup, MacroId, ModuleDefId, ModuleId,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m31[0m:[0m24[0m:pub enum ImportOrExtern[0m[1m[31mCrate[0m {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m33[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m(Extern[0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ImportType {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m40[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m(Extern[0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m43[0m:[0m20[0m:impl ImportOrExtern[0m[1m[31mCrate[0m {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m46[0m:[0m27[0m:            ImportOrExtern[0m[1m[31mCrate[0m::Import(it) => Some(it),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m55[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m(Extern[0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m71[0m:[0m75[0m:    types: FxHashMap<Name, (ModuleDefId, Visibility, Option<ImportOrExtern[0m[1m[31mCrate[0m>)>,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m86[0m:[0m48[0m:    use_imports_types: FxHashMap<ImportOrExtern[0m[1m[31mCrate[0m, ImportOrDef>,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m91[0m:[0m12[0m:    extern_[0m[1m[31mcrate[0m_decls: Vec<Extern[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m96[0m:[0m57[0m:    /// It macros with name qualified with a path like `[0m[1m[31mcrate[0m::foo::bar!()`, `legacy_macros` will be skipped,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m119[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m128[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum BuiltinShadowMode {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m154[0m:[0m39[0m:            .filter_map(ImportOrExtern[0m[1m[31mCrate[0m::into_import)
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m182[0m:[0m73[0m:        while let Some(&m) = scope.use_imports_types.get(&ImportOrExtern[0m[1m[31mCrate[0m::Import(import)) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m220[0m:[0m19[0m:    pub fn extern_[0m[1m[31mcrate[0m_decls(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m222[0m:[0m37[0m:    ) -> impl Iterator<Item = Extern[0m[1m[31mCrate[0mId> + ExactSizeIterator + '_ {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m223[0m:[0m21[0m:        self.extern_[0m[1m[31mcrate[0m_decls.iter().copied()
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m240[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn types(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m251[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn macros(&self) -> impl Iterator<Item = (&Name, MacroId)> + '_ {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m261[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get(&self, name: &Name) -> PerNs {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m269[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_(&self, name: &Name) -> Option<(ModuleDefId, Visibility)> {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m274[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m292[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn traits(&self) -> impl Iterator<Item = TraitId> + '_ {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m302[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolutions(&self) -> impl Iterator<Item = (Option<Name>, PerNs)> + '_ {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m310[0m:[0m45[0m:                        i.map(ImportOrExtern[0m[1m[31mCrate[0m::Import),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m319[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn declare(&mut self, def: ModuleDefId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m323[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_legacy_macro(&self, name: &Name) -> Option<&[MacroId]> {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m327[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn define_impl(&mut self, imp: ImplId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m331[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn define_extern_[0m[1m[31mcrate[0m_decl(&mut self, extern_[0m[1m[31mcrate[0m: Extern[0m[1m[31mCrate[0mId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m332[0m:[0m21[0m:        self.extern_[0m[1m[31mcrate[0m_decls.push(extern_[0m[1m[31mcrate[0m);
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m335[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn define_unnamed_const(&mut self, konst: ConstId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m339[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn define_legacy_macro(&mut self, name: Name, mac: MacroId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m343[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_attr_macro_invoc(&mut self, item: AstId<ast::Item>, call: MacroCallId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m347[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn attr_macro_invocs(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m353[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_derive_macro_invoc(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m372[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn init_derive_attribute(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m386[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn derive_macro_invocs(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m405[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn unnamed_trait_vis(&self, tr: TraitId) -> Option<Visibility> {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m409[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn push_unnamed_trait(&mut self, tr: TraitId, vis: Visibility) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m414[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn push_res_with_import(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m436[0m:[0m48[0m:                        Some(ImportType::Extern[0m[1m[31mCrate[0m(extern_[0m[1m[31mcrate[0m)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m437[0m:[0m48[0m:                            Some(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(extern_[0m[1m[31mcrate[0m))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m440[0m:[0m48[0m:                            Some(ImportOrExtern[0m[1m[31mCrate[0m::Import(import))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m449[0m:[0m52[0m:                                Some(ImportOrExtern[0m[1m[31mCrate[0m::Import(import)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m452[0m:[0m52[0m:                                Some(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(import)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m453[0m:[0m56[0m:                                    ImportOrDef::Extern[0m[1m[31mCrate[0m(import)
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m465[0m:[0m52[0m:                            Some(ImportType::Extern[0m[1m[31mCrate[0m(extern_[0m[1m[31mcrate[0m)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m466[0m:[0m52[0m:                                Some(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(extern_[0m[1m[31mcrate[0m))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m469[0m:[0m52[0m:                                Some(ImportOrExtern[0m[1m[31mCrate[0m::Import(import))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m478[0m:[0m56[0m:                                    Some(ImportOrExtern[0m[1m[31mCrate[0m::Import(import)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m481[0m:[0m56[0m:                                    Some(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(import)) => {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m482[0m:[0m60[0m:                                        ImportOrDef::Extern[0m[1m[31mCrate[0m(import)
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m609[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn censor_non_proc_macros(&mut self, this_module: ModuleId) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m627[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn dump(&self, db: &dyn ExpandDatabase, buf: &mut String) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m641[0m:[0m40[0m:                    Some(ImportOrExtern[0m[1m[31mCrate[0m::Import(_)) => buf.push('i'),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m642[0m:[0m40[0m:                    Some(ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(_)) => buf.push('e'),
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m666[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn shrink_to_fit(&mut self) {
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m681[0m:[0m20[0m:            extern_[0m[1m[31mcrate[0m_decls,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m701[0m:[0m16[0m:        extern_[0m[1m[31mcrate[0m_decls.shrink_to_fit();
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m707[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_def(
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m711[0m:[0m38[0m:        import: Option<ImportOrExtern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m716[0m:[0m69[0m:                PerNs::values(def, v, import.and_then(ImportOrExtern[0m[1m[31mCrate[0m::into_import))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m731[0m:[0m69[0m:                PerNs::values(def, v, import.and_then(ImportOrExtern[0m[1m[31mCrate[0m::into_import))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m738[0m:[0m69[0m:                PerNs::macros(mac, v, import.and_then(ImportOrExtern[0m[1m[31mCrate[0m::into_import))
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m759[0m:[0m21[0m:    /// Returns the [0m[1m[31mcrate[0m defining this item (or `None` if `self` is built-in).
[0m[35mcrates/hir-def/src/item_scope.rs[0m:[0m[32m760[0m:[0m57[0m:    pub fn krate(&self, db: &dyn DefDatabase) -> Option<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m14[0m:[0m5[0m:    [0m[1m[31mCrate[0mRootModuleId, ModuleDefId, ModuleId,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m58[0m:[0m68[0m:    /// Causes paths to always start with either `self`, `super`, `[0m[1m[31mcrate[0m` or a [0m[1m[31mcrate[0m-name.
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m60[0m:[0m49[0m:    /// starts with an identifier that is not a [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m64[0m:[0m37[0m:    /// Causes paths to start with `[0m[1m[31mcrate[0m` where applicable, effectively forcing paths to be absolute.
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m65[0m:[0m7[0m:    By[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m74[0m:[0m27[0m:            PrefixKind::By[0m[1m[31mCrate[0m => PathKind::[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m80[0m:[0m32[0m:        self == &PrefixKind::By[0m[1m[31mCrate[0m
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m98[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_root = def_map.[0m[1m[31mcrate[0m_root();
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m106[0m:[0m13[0m:            [0m[1m[31mcrate[0m_root,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m111[0m:[0m33[0m:            prefer_no_std || db.[0m[1m[31mcrate[0m_supports_no_std([0m[1m[31mcrate[0m_root.krate),
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m125[0m:[0m51[0m:    if let value @ Some(_) = find_in_prelude(db, &[0m[1m[31mcrate[0m_root.def_map(db), &def_map, item, from) {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m153[0m:[0m9[0m:        [0m[1m[31mcrate[0m_root,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m158[0m:[0m29[0m:        prefer_no_std || db.[0m[1m[31mcrate[0m_supports_no_std([0m[1m[31mcrate[0m_root.krate),
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m168[0m:[0m5[0m:    [0m[1m[31mcrate[0m_root: [0m[1m[31mCrate[0mRootModuleId,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m188[0m:[0m29[0m:    // - if the item is the [0m[1m[31mcrate[0m root, return `[0m[1m[31mcrate[0m`
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m189[0m:[0m21[0m:    if module_id == [0m[1m[31mcrate[0m_root {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m190[0m:[0m55[0m:        return Some((ModPath::from_segments(PathKind::[0m[1m[31mCrate[0m, None), Stable));
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m200[0m:[0m29[0m:    // - if the item is the [0m[1m[31mcrate[0m root of a dependency [0m[1m[31mcrate[0m, return the name from the extern prelude
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m201[0m:[0m24[0m:    let root_def_map = [0m[1m[31mcrate[0m_root.def_map(db);
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m202[0m:[0m33[0m:    for (name, (def_id, _extern_[0m[1m[31mcrate[0m)) in root_def_map.extern_prelude() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m215[0m:[0m42[0m:                cov_mark::hit!(ambiguous_[0m[1m[31mcrate[0m_start);
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m233[0m:[0m9[0m:        [0m[1m[31mcrate[0m_root,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m265[0m:[0m56[0m:    // Preludes in block DefMaps are ignored, only the [0m[1m[31mcrate[0m DefMap is searched
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m313[0m:[0m5[0m:    [0m[1m[31mcrate[0m_root: [0m[1m[31mCrate[0mRootModuleId,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m337[0m:[0m41[0m:        // Item was defined in the same [0m[1m[31mcrate[0m that wants to import it. It cannot be found in any
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m348[0m:[0m17[0m:                [0m[1m[31mcrate[0m_root,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m366[0m:[0m46[0m:        // Item was defined in some upstream [0m[1m[31mcrate[0m. This means that it must be exported from one,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m367[0m:[0m94[0m:        // too (unless we can't name it at all). It could *also* be (re)exported by the same [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m370[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m371[0m:[0m28[0m:        let extern_paths = [0m[1m[31mcrate[0m_graph[from.krate].dependencies.iter().filter_map(|dep| {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m372[0m:[0m48[0m:            let import_map = db.import_map(dep.[0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m375[0m:[0m99[0m:                    // the item or import is `#[doc(hidden)]`, so skip it as it is in an external [0m[1m[31mcrate[0m
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m380[0m:[0m94[0m:                // FIXME: we should guide this to look up the path locally, or from the same [0m[1m[31mcrate[0m again?
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m385[0m:[0m21[0m:                    [0m[1m[31mcrate[0m_root,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m433[0m:[0m15[0m:    const STD_[0m[1m[31mCRATE[0mS: [Name; 3] = [known::std, known::core, known::alloc];
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m435[0m:[0m39[0m:        (Some(old), Some(new)) if STD_[0m[1m[31mCRATE[0mS.contains(old) && STD_[0m[1m[31mCRATE[0mS.contains(new) => {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m499[0m:[0m27[0m:    let def_map = def_map.[0m[1m[31mcrate[0m_root().def_map(db);
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m520[0m:[0m20[0m:            // The [0m[1m[31mcrate[0m might reexport a module defined in another [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m566[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::test_db::TestDB;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m587[0m:[0m17[0m:                [0m[1m[31mcrate[0m::item_scope::BuiltinShadowMode::Module,
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m608[0m:[0m68[0m:        check_found_path_(ra_fixture, absolute, Some(PrefixKind::By[0m[1m[31mCrate[0m));
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m621[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m635[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::E::A",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m651[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m670[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m686[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m692[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_root() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m700[0m:[0m14[0m:            "[0m[1m[31mcrate[0m",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m701[0m:[0m14[0m:            "[0m[1m[31mcrate[0m",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m702[0m:[0m14[0m:            "[0m[1m[31mcrate[0m",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m703[0m:[0m14[0m:            "[0m[1m[31mcrate[0m",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m708[0m:[0m13[0m:    fn same_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m717[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m718[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m719[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m720[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m725[0m:[0m18[0m:    fn different_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m728[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m730[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m741[0m:[0m18[0m:    fn different_[0m[1m[31mcrate[0m_renamed() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m744[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m745[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std as std_renamed;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m747[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m764[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:syntax
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m769[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:syntax
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m784[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:syntax
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m787[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:syntax
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m802[0m:[0m13[0m:    fn same_[0m[1m[31mcrate[0m_reexport() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m807[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) use foo::*;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m813[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m819[0m:[0m13[0m:    fn same_[0m[1m[31mcrate[0m_reexport_rename() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m824[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) use foo::S as U;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m830[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::U",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m836[0m:[0m18[0m:    fn different_[0m[1m[31mcrate[0m_reexport() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m839[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m841[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m843[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m857[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m859[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m877[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m880[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m898[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m901[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m918[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m920[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m944[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::foo::bar::S;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m948[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m964[0m:[0m16[0m:            // [0m[1m[31mcrate[0m::S would be shorter, but using private imports seems wrong
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m965[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m966[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m967[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m968[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::bar::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m988[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m989[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m990[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m991[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::foo::S",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m999[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc,std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1002[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:alloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1007[0m:[0m13[0m://- /zzz.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1023[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core,std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1028[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1034[0m:[0m13[0m://- /zzz.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1049[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core,std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1054[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1060[0m:[0m13[0m://- /zzz.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1077[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc,std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1082[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:alloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1088[0m:[0m13[0m://- /zzz.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1105[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:megaalloc,std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1108[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:megaalloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1113[0m:[0m13[0m://- /zzz.rs [0m[1m[31mcrate[0m:megaalloc
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1206[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::module::CompleteMe",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1207[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::module::CompleteMe",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1208[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::module::CompleteMe",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1228[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1229[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1230[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1231[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1250[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1251[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1252[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1253[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::baz::Foo",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1275[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::name;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1280[0m:[0m14[0m:            "[0m[1m[31mcrate[0m::name::AsName",
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1286[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1289[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1291[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1301[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1306[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1319[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1324[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1340[0m:[0m18[0m:    fn different_[0m[1m[31mcrate[0m_renamed_through_dep() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1343[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:intermediate
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1345[0m:[0m22[0m://- /intermediate.rs [0m[1m[31mcrate[0m:intermediate deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1346[0m:[0m12[0m:pub extern [0m[1m[31mcrate[0m std as std_renamed;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1347[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1358[0m:[0m18[0m:    fn different_[0m[1m[31mcrate[0m_doc_hidden() {
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1361[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:intermediate
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1363[0m:[0m22[0m://- /intermediate.rs [0m[1m[31mcrate[0m:intermediate deps:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1365[0m:[0m12[0m:pub extern [0m[1m[31mcrate[0m std;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1366[0m:[0m12[0m:pub extern [0m[1m[31mcrate[0m std as longer;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1367[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1381[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std,lazy_static
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1383[0m:[0m21[0m://- /lazy_static.rs [0m[1m[31mcrate[0m:lazy_static deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1386[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1388[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1404[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std,core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1406[0m:[0m8[0m:extern [0m[1m[31mcrate[0m std;
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1408[0m:[0m16[0m://- /longer.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/hir-def/src/find_path.rs[0m:[0m[32m1412[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/builtin_type.rs[0m:[0m[32m4[0m:[0m40[0m://! not associated with any particular [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs[0m:[0m[32m28[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs[0m:[0m[32m44[0m:[0m10[0m:impl < > [0m[1m[31mcrate[0m ::marker::Copy for Foo< > where {}"#]],
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m2[0m:[0m22[0m:use base_db::{salsa, [0m[1m[31mCrate[0mId, SourceDatabase, Upcast};
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m15[0m:[0m26[0m:        ConstData, Extern[0m[1m[31mCrate[0mDeclData, FunctionData, ImplData, Macro2Data, MacroRulesData,
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m25[0m:[0m59[0m:    EnumId, EnumLoc, ExternBlockId, ExternBlockLoc, Extern[0m[1m[31mCrate[0mId, Extern[0m[1m[31mCrate[0mLoc, FunctionId,
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m38[0m:[0m22[0m:    fn intern_extern_[0m[1m[31mcrate[0m(&self, loc: Extern[0m[1m[31mCrate[0mLoc) -> Extern[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m88[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m_def_map_wait)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m90[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_def_map(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<DefMap>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m92[0m:[0m29[0m:    #[salsa::invoke(DefMap::[0m[1m[31mcrate[0m_def_map_query)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m93[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_def_map_query(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<DefMap>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m170[0m:[0m27[0m:    #[salsa::invoke(Extern[0m[1m[31mCrate[0mDeclData::extern_[0m[1m[31mcrate[0m_decl_data_query)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m171[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m_decl_data(&self, extern_[0m[1m[31mcrate[0m: Extern[0m[1m[31mCrate[0mId) -> Arc<Extern[0m[1m[31mCrate[0mDeclData>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m195[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::attr::variants_attrs_source_map)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m201[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::attr::fields_attrs_source_map)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m220[0m:[0m31[0m:    fn lang_item(&self, start_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId, item: LangItem) -> Option<LangItemTarget>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m223[0m:[0m33[0m:    fn import_map(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<ImportMap>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m239[0m:[0m32[0m:    #[salsa::invoke(LangItems::[0m[1m[31mcrate[0m_lang_items_query)]
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m240[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_lang_items(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<LangItems>;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m243[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_limits(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> [0m[1m[31mCrate[0mLimits;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m246[0m:[0m31[0m:    fn recursion_limit(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> u32;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m248[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_supports_no_std(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> bool;
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m251[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_def_map_wait(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<DefMap> {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m252[0m:[0m29[0m:    let _p = profile::span("[0m[1m[31mcrate[0m_def_map:wait");
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m253[0m:[0m8[0m:    db.[0m[1m[31mcrate[0m_def_map_query(krate)
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m256[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mLimits {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m261[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_limits(db: &dyn DefDatabase, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> [0m[1m[31mCrate[0mLimits {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m262[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map([0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m264[0m:[0m5[0m:    [0m[1m[31mCrate[0mLimits {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m270[0m:[0m42[0m:fn recursion_limit(db: &dyn DefDatabase, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> u32 {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m271[0m:[0m8[0m:    db.[0m[1m[31mcrate[0m_limits([0m[1m[31mcrate[0m_id).recursion_limit
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m274[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_supports_no_std(db: &dyn DefDatabase, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> bool {
[0m[35mcrates/hir-def/src/db.rs[0m:[0m[32m275[0m:[0m19[0m:    let file = db.[0m[1m[31mcrate[0m_graph()[[0m[1m[31mcrate[0m_id].root_file_id;
[0m[35mcrates/hir-def/Cargo.toml[0m:[0m[32m19[0m:[0m40[0m:# We need to freeze the version of the [0m[1m[31mcrate[0m, as the raw-api feature is considered unstable
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m95[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast(ctx: &LowerCtx<'_>, node: ast::Type) -> Option<Self> {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m137[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_name(name: Name) -> Self {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(lifetime: &ast::Lifetime) -> Self {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m247[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast_opt(ctx: &LowerCtx<'_>, node: Option<ast::Type>) -> Self {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m254[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn unit() -> TypeRef {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m295[0m:[0m29[0m:                            [0m[1m[31mcrate[0m::path::GenericArg::Type(type_ref) => {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m298[0m:[0m29[0m:                            [0m[1m[31mcrate[0m::path::GenericArg::Const(_)
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m299[0m:[0m31[0m:                            | [0m[1m[31mcrate[0m::path::GenericArg::Lifetime(_) => {}
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m321[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_bounds_from_ast(
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m333[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_ast(ctx: &LowerCtx<'_>, node: ast::TypeBound) -> Self {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m386[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_const_arg(lower_ctx: &LowerCtx<'_>, arg: Option<ast::ConstArg>) -> Self {
[0m[35mcrates/hir-def/src/hir/type_ref.rs[0m:[0m[32m396[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_const_param(
[0m[35mcrates/sourcegen/src/lib.rs[0m:[0m[32m5[0m:[0m47[0m://! output. See `sourcegen_` tests in various [0m[1m[31mcrate[0ms.
[0m[35mcrates/sourcegen/src/lib.rs[0m:[0m[32m7[0m:[0m10[0m://! This [0m[1m[31mcrate[0m contains utilities to make this kind of source-gen easy.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m1[0m:[0m47[0m://! A map of all publicly exported items in a [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m5[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m15[0m:[0m32[0m:    item_scope::{ImportOrExtern[0m[1m[31mCrate[0m, ItemInNs},
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m28[0m:[0m69[0m:    /// A name that can be used to import the item, relative to the [0m[1m[31mcrate[0m's root.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m59[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn import_map_query(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<Self> {
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m90[0m:[0m52[0m:fn collect_import_map(db: &dyn DefDatabase, krate: [0m[1m[31mCrate[0mId) -> FxIndexMap<ItemInNs, ImportInfo> {
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m93[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m96[0m:[0m84[0m:    // We look only into modules that are public(ly reexported), starting with the [0m[1m[31mcrate[0m root.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m107[0m:[0m20[0m:            // The [0m[1m[31mcrate[0m might reexport a module defined in another [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m125[0m:[0m39[0m:                        ImportOrExtern[0m[1m[31mCrate[0m::Extern[0m[1m[31mCrate[0m(id) => Some(id.into()),
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m126[0m:[0m39[0m:                        ImportOrExtern[0m[1m[31mCrate[0m::Import(id) => Some(id.import.into()),
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m383[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m388[0m:[0m20[0m:    let graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m390[0m:[0m70[0m:        graph[krate].dependencies.iter().map(|dep| db.import_map(dep.[0m[1m[31mcrate[0m_id)).collect();
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m444[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{db::DefDatabase, test_db::TestDB, ItemContainerId, Lookup};
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m469[0m:[0m39[0m:    fn check_search(ra_fixture: &str, [0m[1m[31mcrate[0m_name: &str, query: Query, expect: Expect) {
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m471[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m472[0m:[0m21[0m:        let krate = [0m[1m[31mcrate[0m_graph
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m475[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph[krate]
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m478[0m:[0m45[0m:                    .is_some_and(|it| &**it.[0m[1m[31mcrate[0m_name() == [0m[1m[31mcrate[0m_name)
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m480[0m:[0m37[0m:            .expect("could not find [0m[1m[31mcrate[0m");
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m504[0m:[0m21[0m:                    [0m[1m[31mcrate[0m_graph[dependency_krate].display_name.as_ref()?,
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m544[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m546[0m:[0m22[0m:        let actual = [0m[1m[31mcrate[0m_graph
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m549[0m:[0m30[0m:                let cdata = &[0m[1m[31mcrate[0m_graph[krate];
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m584[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m602[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m625[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m645[0m:[0m28[0m:    fn type_reexport_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m646[0m:[0m48[0m:        // Reexports need to be visible from a [0m[1m[31mcrate[0m, even if the original [0m[1m[31mcrate[0m exports the item
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m650[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m654[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m673[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m677[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m696[0m:[0m65[0m:        // XXX: The rendered paths are relative to the defining [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m699[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m701[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m724[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m748[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m764[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m781[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m800[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m801[0m:[0m21[0m:        //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m829[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m830[0m:[0m21[0m:        //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m868[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m869[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep deps:tdep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m885[0m:[0m26[0m:            //- /tdep.rs [0m[1m[31mcrate[0m:tdep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m922[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m923[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep deps:tdep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m939[0m:[0m26[0m:            //- /tdep.rs [0m[1m[31mcrate[0m:tdep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m975[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m976[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m1009[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/hir-def/src/import_map.rs[0m:[0m[32m1010[0m:[0m21[0m:        //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/hir-def/src/macro_expansion_tests/mod.rs[0m:[0m[32m2[0m:[0m46[0m://! `mbe`, `proc_macro_api` and `hir_expand` [0m[1m[31mcrate[0ms. This might seem like a
[0m[35mcrates/hir-def/src/macro_expansion_tests/mod.rs[0m:[0m[32m8[0m:[0m34[0m://! resolution. That is, in this [0m[1m[31mcrate[0m. We *could* fake some dependencies and
[0m[35mcrates/hir-def/src/macro_expansion_tests/mod.rs[0m:[0m[32m35[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-def/src/macro_expansion_tests/mod.rs[0m:[0m[32m62[0m:[0m20[0m:    let krate = db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap();
[0m[35mcrates/hir-def/src/macro_expansion_tests/mod.rs[0m:[0m[32m63[0m:[0m22[0m:    let def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs[0m:[0m[32m54[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::format_args!("mov {0}, {1}");
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs[0m:[0m[32m55[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::format_args!("add {0}, 5");
[0m[35mcrates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs[0m:[0m[32m186[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panic!("{} {:?}", arg1(a, b, c), arg2);
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/matching.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/tt_conversion.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m72[0m:[0m47[0m:            fn default() -> $name { unsafe { $[0m[1m[31mcrate[0m::_core::mem::zeroed() } }
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m98[0m:[0m47[0m:            fn default() -> $name { unsafe { $[0m[1m[31mcrate[0m::_core::mem::zeroed() } }
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m115[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::_core::mem::zeroed()
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m133[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::_core::mem::zeroed()
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m489[0m:[0m28[0m:        impl<$($bounds)*> $[0m[1m[31mcrate[0m::arbitrary::Arbitrary for $typ {
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m514[0m:[0m28[0m:        impl<$($bounds)*> $[0m[1m[31mcrate[0m::arbitrary::Arbitrary for $typ {
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/regression.rs[0m:[0m[32m524[0m:[0m22[0m:impl <A: Arbitrary> $[0m[1m[31mcrate[0m::arbitrary::Arbitrary for Vec<A> {
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/metavar_expr.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe/meta_syntax.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m1086[0m:[0m12[0m:    extern [0m[1m[31mcrate[0m a;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m1103[0m:[0m8[0m:extern [0m[1m[31mcrate[0m a;
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m1436[0m:[0m16[0m:fn test_dollar_[0m[1m[31mcrate[0m_lhs_is_not_meta() {
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m1440[0m:[0m7[0m:    ($[0m[1m[31mcrate[0m) => { err!(); };
[0m[35mcrates/hir-def/src/macro_expansion_tests/mbe.rs[0m:[0m[32m1447[0m:[0m7[0m:    ($[0m[1m[31mcrate[0m) => { err!(); };
[0m[35mcrates/tt/src/buffer.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Leaf, Subtree, TokenTree};
[0m[35mcrates/tt/src/buffer.rs[0m:[0m[32m149[0m:[0m43[0m:/// A safe version of `Cursor` from `syn` [0m[1m[31mcrate[0m <https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L125>
[0m[35mcrates/hir-def/src/macro_expansion_tests/proc_macros.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::macro_expansion_tests::check;
[0m[35mcrates/ide-ssr/src/replacing.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fragments, resolving::ResolvedRule, Match, SsrMatches};
[0m[35mcrates/ide-ssr/src/replacing.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn matches_to_edit(
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m12[0m:[0m9[0m:        [0m[1m[31mCrate[0mGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m76[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, proc_macros) = ws.to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m92[0m:[0m20[0m:            .map(|([0m[1m[31mcrate[0m_id, path)| {
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m94[0m:[0m21[0m:                    [0m[1m[31mcrate[0m_id,
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m96[0m:[0m45[0m:                        |_| Err("proc macro [0m[1m[31mcrate[0m is missing dylib".to_owned()),
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m115[0m:[0m21[0m:    let host = load_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m116[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m301[0m:[0m9[0m:fn load_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m302[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph: [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m341[0m:[0m25[0m:    analysis_change.set_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph);
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m437[0m:[0m15[0m:        let n_[0m[1m[31mcrate[0ms = host.raw_database().[0m[1m[31mcrate[0m_graph().iter().count();
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m438[0m:[0m31[0m:        // RA has quite a few [0m[1m[31mcrate[0ms, but the exact count doesn't matter
[0m[35mcrates/load-cargo/src/lib.rs[0m:[0m[32m439[0m:[0m19[0m:        assert!(n_[0m[1m[31mcrate[0ms > 20);
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::errors::bail;
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fragments, SsrError, SsrPattern, SsrRule};
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ParsedRule {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m16[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) placeholders_by_stand_in: FxHashMap<SmolStr, Placeholder>,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m17[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) pattern: SyntaxNode,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m18[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) template: Option<SyntaxNode>,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct RawPattern {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum PatternElement {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Placeholder {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m36[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ident: Var,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) constraints: Vec<Constraint>,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m44[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Var(pub([0m[1m[31mcrate[0m) String);
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m47[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Constraint {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m53[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum NodeKind {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m58[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Token {
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m60[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) text: SmolStr,
[0m[35mcrates/ide-ssr/src/parsing.rs[0m:[0m[32m189[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn placeholders_by_stand_in(&self) -> FxHashMap<SmolStr, Placeholder> {
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m48[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) range: FileRange,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) matched_node: SyntaxNode,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) placeholder_values: FxHashMap<Var, PlaceholderMatch>,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ignored_comments: Vec<ast::Comment>,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m52[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) rule_index: usize,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m54[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) depth: usize,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m56[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) rendered_template_paths: FxHashMap<SyntaxNode, hir::ModPath>,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct PlaceholderMatch {
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) range: FileRange,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) inner_matches: SsrMatches,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m67[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) autoderef_count: usize,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m68[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) autoref_kind: ast::SelfParamKind,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m72[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MatchFailureReason {
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m73[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) reason: String,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m78[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MatchFailed {
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m81[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) reason: Option<String>,
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m87[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn get_match(
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m693[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn record_match_fails_reasons_scope<F, T>(debug_active: bool, f: F) -> T
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m784[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{MatchFinder, SsrRule};
[0m[35mcrates/ide-ssr/src/matching.rs[0m:[0m[32m791[0m:[0m42[0m:        let (db, position, selections) = [0m[1m[31mcrate[0m::tests::single_file(input);
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{errors::error, parsing, SsrError};
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ResolutionScope<'db> {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ResolvedRule {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m16[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) pattern: ResolvedPattern,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m17[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) template: Option<ResolvedPattern>,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m18[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) index: usize,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ResolvedPattern {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) placeholders_by_stand_in: FxHashMap<SmolStr, parsing::Placeholder>,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) node: SyntaxNode,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m25[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) resolved_paths: FxHashMap<SyntaxNode, ResolvedPath>,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ufcs_function_calls: FxHashMap<SyntaxNode, UfcsCallInfo>,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m27[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) contains_self: bool,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ResolvedPath {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) resolution: hir::PathResolution,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) depth: u32,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct UfcsCallInfo {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m37[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) call_expr: ast::CallExpr,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) function: hir::Function,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) qualifier_type: Option<hir::Type>,
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m61[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_placeholder(&self, token: &SyntaxToken) -> Option<&Placeholder> {
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m193[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/ide-ssr/src/resolving.rs[0m:[0m[32m212[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn current_function(&self) -> Option<SyntaxNode> {
[0m[35mcrates/ide-ssr/src/from_comment.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::MatchFinder;
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m5[0m:[0m22[0m:    ($fmt:expr) => {$[0m[1m[31mcrate[0m::SsrError::new(format!($fmt))};
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m6[0m:[0m35[0m:    ($fmt:expr, $($arg:tt)+) => {$[0m[1m[31mcrate[0m::SsrError::new(format!($fmt, $($arg)+))}
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use _error as error;
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m12[0m:[0m37[0m:    ($($tokens:tt)*) => {return Err([0m[1m[31mcrate[0m::errors::error!($($tokens)*))}
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use _bail as bail;
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m17[0m:[0m25[0m:pub struct SsrError(pub([0m[1m[31mcrate[0m) String);
[0m[35mcrates/ide-ssr/src/errors.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(message: impl Into<String>) -> SsrError {
[0m[35mcrates/syntax/rust.ungram[0m:[0m[32m27[0m:[0m48[0m:  'ident' | 'int_number' | 'self' | 'super' | '[0m[1m[31mcrate[0m' | 'Self'
[0m[35mcrates/syntax/rust.ungram[0m:[0m[32m98[0m:[0m9[0m:| Extern[0m[1m[31mCrate[0m
[0m[35mcrates/syntax/rust.ungram[0m:[0m[32m131[0m:[0m7[0m:Extern[0m[1m[31mCrate[0m =
[0m[35mcrates/syntax/rust.ungram[0m:[0m[32m133[0m:[0m13[0m:  'extern' '[0m[1m[31mcrate[0m' NameRef Rename? ';'
[0m[35mcrates/ide-ssr/src/fragments.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn ty(s: &str) -> Result<SyntaxNode, ()> {
[0m[35mcrates/ide-ssr/src/fragments.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn item(s: &str) -> Result<SyntaxNode, ()> {
[0m[35mcrates/ide-ssr/src/fragments.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn pat(s: &str) -> Result<SyntaxNode, ()> {
[0m[35mcrates/ide-ssr/src/fragments.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn expr(s: &str) -> Result<SyntaxNode, ()> {
[0m[35mcrates/ide-ssr/src/fragments.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn stmt(s: &str) -> Result<SyntaxNode, ()> {
[0m[35mcrates/ide-ssr/src/nester.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Match, SsrMatches};
[0m[35mcrates/ide-ssr/src/nester.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn nest_and_remove_collisions(
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m14[0m:[0m57[0m://! CST). The actual parser live in a separate `parser` [0m[1m[31mcrate[0m, though the
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m15[0m:[0m25[0m://! lexer lives in this [0m[1m[31mcrate[0m.
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m53[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m161[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::ast::SourceFile;
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m298[0m:[0m46[0m:    (match $node:ident { $($tt:tt)* }) => { $[0m[1m[31mcrate[0m::match_ast!(match ($node) { $($tt)* }) };
[0m[35mcrates/syntax/src/lib.rs[0m:[0m[32m309[0m:[0m71[0m:/// This test does not assert anything and instead just shows off the [0m[1m[31mcrate[0m's
[0m[35mcrates/ide-ssr/src/lib.rs[0m:[0m[32m85[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{errors::SsrError, from_comment::ssr_from_comment, matching::Match};
[0m[35mcrates/ide-ssr/src/lib.rs[0m:[0m[32m87[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{errors::bail, matching::MatchFailureReason};
[0m[35mcrates/ide-ssr/src/lib.rs[0m:[0m[32m115[0m:[0m16[0m:/// Searches a [0m[1m[31mcrate[0m for pattern matches and possibly replaces them with something else.
[0m[35mcrates/ide-ssr/src/lib.rs[0m:[0m[32m354[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn match_failure_reason(&self) -> Option<&str> {
[0m[35mcrates/proc-macro-api/src/lib.rs[0m:[0m[32m1[0m:[0m28[0m://! Client-side Proc-Macro [0m[1m[31mcrate[0m
[0m[35mcrates/proc-macro-api/src/lib.rs[0m:[0m[32m4[0m:[0m70[0m://! different implementations (e.g. wasm or dylib loading). And this [0m[1m[31mcrate[0m
[0m[35mcrates/proc-macro-api/src/lib.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-ssr/src/tests.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{MatchFinder, SsrRule};
[0m[35mcrates/ide-ssr/src/tests.rs[0m:[0m[32m67[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn single_file(code: &str) -> (ide_db::RootDatabase, FilePosition, Vec<FileRange>) {
[0m[35mcrates/ide-ssr/src/tests.rs[0m:[0m[32m269[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-ssr/src/tests.rs[0m:[0m[32m498[0m:[0m17[0m:            use [0m[1m[31mcrate[0m::m1::m2::Foo;
[0m[35mcrates/ide-ssr/src/tests.rs[0m:[0m[32m784[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::d::Bar::<i32>::default();
[0m[35mcrates/proc-macro-api/src/version.rs[0m:[0m[32m77[0m:[0m23[0m:/// from a proc macro [0m[1m[31mcrate[0m's binary file.
[0m[35mcrates/proc-macro-api/src/version.rs[0m:[0m[32m87[0m:[0m70[0m:/// Check the version of rustc that was used to compile a proc macro [0m[1m[31mcrate[0m's
[0m[35mcrates/proc-macro-api/src/version.rs[0m:[0m[32m90[0m:[0m18[0m:/// A proc macro [0m[1m[31mcrate[0m binary's ".rustc" section has following byte layout:
[0m[35mcrates/proc-macro-api/src/version.rs[0m:[0m[32m99[0m:[0m8[0m:/// * [[0m[1m[31mcrate[0m root bytes] next 4 bytes is to store [0m[1m[31mcrate[0m root position,
[0m[35mcrates/proc-macro-api/src/version.rs[0m:[0m[32m147[0m:[0m21[0m:    // 4 bytes for [[0m[1m[31mcrate[0m root bytes]
[0m[35mcrates/syntax/src/validation/block.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/validation/block.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn validate_block_expr(block: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ProcMacroProcessSrv {
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m25[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run(process_path: AbsPathBuf) -> io::Result<ProcMacroProcessSrv> {
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m55[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn version(&self) -> u32 {
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m59[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn version_check(&mut self) -> Result<u32, ServerError> {
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m71[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_proc_macros(
[0m[35mcrates/proc-macro-api/src/process.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn send_task(&mut self, req: Request) -> Result<Response, ServerError> {
[0m[35mcrates/syntax/src/ast.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-ssr/src/search.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-ssr/src/search.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct UsageCache {
[0m[35mcrates/ide-ssr/src/search.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_matches_for_rule(
[0m[35mcrates/syntax/src/utils.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ast, match_ast, AstNode, SyntaxKind};
[0m[35mcrates/syntax/src/utils.rs[0m:[0m[32m28[0m:[0m45[0m:    is_keyword && !matches!(name, "self" | "[0m[1m[31mcrate[0m" | "super" | "Self")
[0m[35mcrates/syntax/src/utils.rs[0m:[0m[32m34[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::ast::make;
[0m[35mcrates/syntax/src/parsing/reparsing.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/parsing/reparsing.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn incremental_reparse(
[0m[35mcrates/syntax/src/parsing/reparsing.rs[0m:[0m[32m180[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{AstNode, Parse, SourceFile};
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m261[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{AstNode, SyntaxElement};
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m457[0m:[0m5[0m:use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m462[0m:[0m5[0m:use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m469[0m:[0m24[0m:                -> use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m479[0m:[0m29[0m:                Line 4: use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m491[0m:[0m5[0m:use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m494[0m:[0m5[0m:use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m503[0m:[0m59[0m:                Line 2: Token(IDENT@5..14 "text_edit") -> [0m[1m[31mcrate[0m
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m509[0m:[0m29[0m:                Line 3: use [0m[1m[31mcrate[0m::AstNode;
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m610[0m:[0m25[0m:        let from_node = [0m[1m[31mcrate[0m::SourceFile::parse(from).tree().syntax().clone();
[0m[35mcrates/syntax/src/algo.rs[0m:[0m[32m611[0m:[0m23[0m:        let to_node = [0m[1m[31mcrate[0m::SourceFile::parse(to).tree().syntax().clone();
[0m[35mcrates/syntax/src/ast/expr_ext.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/proc-macro-api/src/msg/flat.rs[0m:[0m[32m42[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/proc-macro-api/src/msg/flat.rs[0m:[0m[32m286[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn intern(&mut self, text: &'a str) -> u32 {
[0m[35mcrates/proc-macro-api/src/msg/flat.rs[0m:[0m[32m306[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn read(self) -> tt::Subtree {
[0m[35mcrates/syntax/src/tests.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ast, fuzz, AstNode, SourceFile, SyntaxError};
[0m[35mcrates/syntax/src/tests.rs[0m:[0m[32m82[0m:[0m9[0m:    let [0m[1m[31mcrate[0ms_dir = project_root().join("[0m[1m[31mcrate[0ms");
[0m[35mcrates/syntax/src/tests.rs[0m:[0m[32m84[0m:[0m51[0m:    let mut files = ::sourcegen::list_rust_files(&[0m[1m[31mcrate[0ms_dir);
[0m[35mcrates/syntax/src/tests.rs[0m:[0m[32m86[0m:[0m47[0m:        // Get all files which are not in the [0m[1m[31mcrate[0ms/syntax/test_data folder
[0m[35mcrates/syntax/src/tests.rs[0m:[0m[32m116[0m:[0m26[0m:    project_root().join("[0m[1m[31mcrate[0ms/syntax/test_data")
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ast, utils::is_raw_identifier, AstNode, SourceFile, SyntaxKind, SyntaxToken};
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m327[0m:[0m21[0m:pub fn path_segment_[0m[1m[31mcrate[0m() -> ast::PathSegment {
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m328[0m:[0m24[0m:    ast_from_text("use [0m[1m[31mcrate[0m;")
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m475[0m:[0m40[0m:    elements: impl IntoIterator<Item = [0m[1m[31mcrate[0m::SyntaxElement>,
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m940[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_arg_list(
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m947[0m:[0m23[0m:pub fn visibility_pub_[0m[1m[31mcrate[0m() -> ast::Visibility {
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m948[0m:[0m24[0m:    ast_from_text("pub([0m[1m[31mcrate[0m) struct S")
[0m[35mcrates/syntax/src/ast/make.rs[0m:[0m[32m1121[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m201[0m:[0m5[0m:    [0m[1m[31mCrate[0mKw,
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m212[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_token(&self) -> Option<SyntaxToken> {
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m213[0m:[0m42[0m:        self.name_ref().and_then(|it| it.[0m[1m[31mcrate[0m_token())
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m234[0m:[0m20[0m:                T![[0m[1m[31mcrate[0m] => PathSegmentKind::[0m[1m[31mCrate[0mKw,
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m768[0m:[0m8[0m:    Pub[0m[1m[31mCrate[0m,
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m781[0m:[0m32[0m:                    if segment.[0m[1m[31mcrate[0m_token().is_some() {
[0m[35mcrates/syntax/src/ast/node_ext.rs[0m:[0m[32m782[0m:[0m51[0m:                        return VisibilityKind::Pub[0m[1m[31mCrate[0m;
[0m[35mcrates/syntax/src/ast/prec.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/traits.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/edit.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/fuzz.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{validation, AstNode, SourceFile, TextRange};
[0m[35mcrates/proc-macro-api/src/msg.rs[0m:[0m[32m2[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod flat;
[0m[35mcrates/proc-macro-api/src/msg.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::ProcMacroKind;
[0m[35mcrates/proc-macro-api/src/msg.rs[0m:[0m[32m13[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::msg::flat::FlatTree;
[0m[35mcrates/proc-macro-api/src/msg.rs[0m:[0m[32m119[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tt::*;
[0m[35mcrates/syntax/src/hacks.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{ast, AstNode};
[0m[35mcrates/syntax/src/ast/edit_in_place.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/edit_in_place.rs[0m:[0m[32m838[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::SourceFile;
[0m[35mcrates/syntax/src/ptr.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{syntax_node::RustLanguage, AstNode, SyntaxNode};
[0m[35mcrates/syntax/src/ptr.rs[0m:[0m[32m97[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{ast, AstNode, SourceFile};
[0m[35mcrates/syntax/src/ast/generated.rs[0m:[0m[32m3[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod nodes;
[0m[35mcrates/syntax/src/ast/generated.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod tokens;
[0m[35mcrates/syntax/src/ast/generated.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/generated.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use nodes::*;
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m3[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct KindsSrc<'a> {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m4[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) punct: &'a [(&'a str, &'a str)],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m5[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) keywords: &'a [&'a str],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m6[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) contextual_keywords: &'a [&'a str],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m7[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) literals: &'a [&'a str],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m8[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) tokens: &'a [&'a str],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m9[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) nodes: &'a [&'a str],
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const KINDS_SRC: KindsSrc<'_> = KindsSrc {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m68[0m:[0m71[0m:        "as", "async", "await", "box", "break", "const", "continue", "[0m[1m[31mcrate[0m", "do", "dyn", "else",
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m95[0m:[0m17[0m:        "EXTERN_[0m[1m[31mCRATE[0m",
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m239[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct AstSrc {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m240[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) tokens: Vec<String>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m241[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) nodes: Vec<AstNodeSrc>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m242[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) enums: Vec<AstEnumSrc>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m246[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct AstNodeSrc {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m247[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) doc: Vec<String>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m248[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) name: String,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m249[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) traits: Vec<String>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m250[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fields: Vec<Field>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m254[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Field {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m260[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Cardinality {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m266[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct AstEnumSrc {
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m267[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) doc: Vec<String>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m268[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) name: String,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m269[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) traits: Vec<String>,
[0m[35mcrates/syntax/src/tests/ast_src.rs[0m:[0m[32m270[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) variants: Vec<String>,
[0m[35mcrates/syntax/src/ast/token_ext.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/token_ext.rs[0m:[0m[32m102[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_text(text: &str) -> CommentKind {
[0m[35mcrates/syntax/src/ast/token_ext.rs[0m:[0m[32m472[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::ast::{self, make, FloatNumber, IntNumber};
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::ast_src::{
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m24[0m:[0m41[0m:        sourcegen::project_root().join("[0m[1m[31mcrate[0ms/parser/src/syntax_kind/generated.rs");
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m33[0m:[0m41[0m:        sourcegen::project_root().join("[0m[1m[31mcrate[0ms/syntax/src/ast/generated/tokens.rs");
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m37[0m:[0m58[0m:    let ast_nodes_file = sourcegen::project_root().join("[0m[1m[31mcrate[0ms/syntax/src/ast/generated/nodes.rs");
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m48[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m69[0m:[0m21[0m:                use [0m[1m[31mcrate[0m::{SyntaxKind::{self, *}, SyntaxToken, ast::AstToken};
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m127[0m:[0m29[0m:                        pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m238[0m:[0m29[0m:                        pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m296[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m447[0m:[0m43[0m:            #([#punctuation_values] => { $[0m[1m[31mcrate[0m::SyntaxKind::#punctuation };)*
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m448[0m:[0m44[0m:            #([#all_keywords_idents] => { $[0m[1m[31mcrate[0m::SyntaxKind::#all_keywords };)*
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m449[0m:[0m36[0m:            [lifetime_ident] => { $[0m[1m[31mcrate[0m::SyntaxKind::LIFETIME_IDENT };
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m450[0m:[0m27[0m:            [ident] => { $[0m[1m[31mcrate[0m::SyntaxKind::IDENT };
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m451[0m:[0m29[0m:            [shebang] => { $[0m[1m[31mcrate[0m::SyntaxKind::SHEBANG };
[0m[35mcrates/syntax/src/tests/sourcegen_ast.rs[0m:[0m[32m799[0m:[0m16[0m:        "Extern[0m[1m[31mCrate[0m",
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m11[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m32[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m74[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m95[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m116[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m137[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m158[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m179[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/ast/generated/tokens.rs[0m:[0m[32m200[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxToken,
[0m[35mcrates/syntax/src/token_text.rs[0m:[0m[32m8[0m:[0m30[0m:pub struct TokenText<'a>(pub([0m[1m[31mcrate[0m) Repr<'a>);
[0m[35mcrates/syntax/src/token_text.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Repr<'a> {
[0m[35mcrates/syntax/src/token_text.rs[0m:[0m[32m16[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn borrowed(text: &'a str) -> Self {
[0m[35mcrates/syntax/src/token_text.rs[0m:[0m[32m20[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn owned(green: GreenToken) -> Self {
[0m[35mcrates/syntax/src/validation.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/validation.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {
[0m[35mcrates/syntax/src/validation.rs[0m:[0m[32m194[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn validate_block_structure(root: &SyntaxNode) {
[0m[35mcrates/syntax/src/validation.rs[0m:[0m[32m285[0m:[0m41[0m:    } else if let Some(token) = segment.[0m[1m[31mcrate[0m_token() {
[0m[35mcrates/syntax/src/validation.rs[0m:[0m[32m288[0m:[0m23[0m:                "The `[0m[1m[31mcrate[0m` keyword is only allowed as the first segment of a path",
[0m[35mcrates/syntax/src/syntax_node.rs[0m:[0m[32m6[0m:[0m69[0m://! The *real* implementation is in the (language-agnostic) `rowan` [0m[1m[31mcrate[0m, this
[0m[35mcrates/syntax/src/syntax_node.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Parse, SyntaxError, SyntaxKind, TextSize};
[0m[35mcrates/syntax/src/syntax_node.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use rowan::{GreenNode, GreenToken, NodeOrToken};
[0m[35mcrates/syntax/src/syntax_node.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish_raw(self) -> (GreenNode, Vec<SyntaxError>) {
[0m[35mcrates/syntax/src/syntax_node.rs[0m:[0m[32m54[0m:[0m13[0m:            [0m[1m[31mcrate[0m::validation::validate_block_structure(&node);
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m1[0m:[0m10[0m://! `tt` [0m[1m[31mcrate[0m defines a `TokenTree` data structure: this is the interface (both
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m2[0m:[0m66[0m://! input and output) of macros. It closely mirrors `proc_macro` [0m[1m[31mcrate[0m's
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m36[0m:[0m13[0m:    pub use [0m[1m[31mcrate[0m::{DelimiterKind, Spacing, TokenId};
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m37[0m:[0m21[0m:    pub type Span = [0m[1m[31mcrate[0m::TokenId;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m38[0m:[0m24[0m:    pub type Subtree = [0m[1m[31mcrate[0m::Subtree<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m39[0m:[0m22[0m:    pub type Punct = [0m[1m[31mcrate[0m::Punct<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m40[0m:[0m26[0m:    pub type Delimiter = [0m[1m[31mcrate[0m::Delimiter<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m41[0m:[0m21[0m:    pub type Leaf = [0m[1m[31mcrate[0m::Leaf<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m42[0m:[0m22[0m:    pub type Ident = [0m[1m[31mcrate[0m::Ident<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m43[0m:[0m24[0m:    pub type Literal = [0m[1m[31mcrate[0m::Literal<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m44[0m:[0m26[0m:    pub type TokenTree = [0m[1m[31mcrate[0m::TokenTree<Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m46[0m:[0m36[0m:        pub type TokenBuffer<'a> = [0m[1m[31mcrate[0m::buffer::TokenBuffer<'a, super::Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m47[0m:[0m31[0m:        pub type Cursor<'a> = [0m[1m[31mcrate[0m::buffer::Cursor<'a, super::Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m48[0m:[0m37[0m:        pub type TokenTreeRef<'a> = [0m[1m[31mcrate[0m::buffer::TokenTreeRef<'a, super::Span>;
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m77[0m:[0m17[0m:                [0m[1m[31mcrate[0m::TokenTree::Leaf(leaf) => match leaf {
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m78[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::Leaf::Literal(it) => it.span = f(it.span),
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m79[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::Leaf::Punct(it) => it.span = f(it.span),
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m80[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::Leaf::Ident(it) => it.span = f(it.span),
[0m[35mcrates/tt/src/lib.rs[0m:[0m[32m82[0m:[0m17[0m:                [0m[1m[31mcrate[0m::TokenTree::Subtree(s) => s.visit_ids(f),
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m12[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m27[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![[0m[1m[31mcrate[0m]) }
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m69[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m93[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m102[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m110[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m118[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m133[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m149[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m157[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m170[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m182[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m195[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m202[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m216[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m225[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m236[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m255[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m269[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m280[0m:[0m18[0m:pub struct Extern[0m[1m[31mCrate[0m {
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m281[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m283[0m:[0m30[0m:impl ast::HasAttrs for Extern[0m[1m[31mCrate[0m {}
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m284[0m:[0m35[0m:impl ast::HasVisibility for Extern[0m[1m[31mCrate[0m {}
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m285[0m:[0m36[0m:impl ast::HasDocComments for Extern[0m[1m[31mCrate[0m {}
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m286[0m:[0m12[0m:impl Extern[0m[1m[31mCrate[0m {
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m288[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![[0m[1m[31mcrate[0m]) }
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m296[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m318[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m336[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m352[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m366[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m380[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m398[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m413[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m430[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m446[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m464[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m478[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m491[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m503[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m514[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m524[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m536[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m546[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m554[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m564[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m573[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m587[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m601[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m613[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m623[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m633[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m646[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m657[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m667[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m681[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m692[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m703[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m717[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m727[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m739[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m751[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m762[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m771[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m787[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m796[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m809[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m823[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m834[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m841[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m852[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m862[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m873[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m890[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m902[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m913[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m924[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m942[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m952[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m962[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m969[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m979[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m987[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m998[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1011[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1029[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1040[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1049[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1058[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1065[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1076[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1089[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1099[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1109[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1120[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1129[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1139[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1150[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1162[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1171[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1181[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1193[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1202[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1215[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1226[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1236[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1247[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1260[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1268[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1280[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1289[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1303[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1313[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1322[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1330[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1338[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1346[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1356[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1367[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1378[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1388[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1398[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1410[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1423[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1432[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1441[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1450[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1458[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1466[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1476[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1484[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1492[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1498[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1509[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1519[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1529[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1539[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1550[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1559[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1570[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1649[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m(Extern[0m[1m[31mCrate[0m),
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1742[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1748[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1754[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1760[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1766[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1772[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1778[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1784[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m1790[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) syntax: SyntaxNode,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m2057[0m:[0m24[0m:impl AstNode for Extern[0m[1m[31mCrate[0m {
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m2058[0m:[0m60[0m:    fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_[0m[1m[31mCRATE[0m }
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m3694[0m:[0m17[0m:impl From<Extern[0m[1m[31mCrate[0m> for Item {
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m3695[0m:[0m25[0m:    fn from(node: Extern[0m[1m[31mCrate[0m) -> Item { Item::Extern[0m[1m[31mCrate[0m(node) }
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m3743[0m:[0m26[0m:                | EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m3764[0m:[0m20[0m:            EXTERN_[0m[1m[31mCRATE[0m => Item::Extern[0m[1m[31mCrate[0m(Extern[0m[1m[31mCrate[0m { syntax }),
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m3787[0m:[0m25[0m:            Item::Extern[0m[1m[31mCrate[0m(it) => &it.syntax,
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m4101[0m:[0m26[0m:                | EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m4189[0m:[0m26[0m:                | EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m4320[0m:[0m26[0m:                | EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/syntax/src/ast/generated/nodes.rs[0m:[0m[32m4518[0m:[0m34[0m:impl std::fmt::Display for Extern[0m[1m[31mCrate[0m {
[0m[35mcrates/syntax/src/ted.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/syntax/src/syntax_error.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{TextRange, TextSize};
[0m[35mcrates/profile/src/stop_watch.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::MemoryUsage;
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Tree<T> {
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type Idx<T> = la_arena::Idx<Node<T>>;
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m15[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn start(&mut self)
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(&mut self, data: T) {
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn root(&self) -> Option<Idx<T>> {
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m42[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn children(&self, idx: Idx<T>) -> impl Iterator<Item = Idx<T>> + '_ {
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn clear(&mut self) {
[0m[35mcrates/profile/src/tree.rs[0m:[0m[32m58[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Node<T> {
[0m[35mcrates/syntax/test_data/parser/validation/0037_visibility_in_traits.rs[0m:[0m[32m4[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) type Baz = ();
[0m[35mcrates/syntax/test_data/parser/validation/0037_visibility_in_traits.rs[0m:[0m[32m5[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const C: i32 = 92;
[0m[35mcrates/proc-macro-test/imp/Cargo.toml[0m:[0m[32m15[0m:[0m8[0m:# this [0m[1m[31mcrate[0m should not have any dependencies, since it uses its own workspace,
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rs[0m:[0m[32m1[0m:[0m7[0m:use ::[0m[1m[31mcrate[0m;
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rs[0m:[0m[32m2[0m:[0m6[0m:use {[0m[1m[31mcrate[0m, foo::{[0m[1m[31mcrate[0m::foo::bar::baz}};
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rs[0m:[0m[32m3[0m:[0m12[0m:use hello::[0m[1m[31mcrate[0m;
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rs[0m:[0m[32m4[0m:[0m12[0m:use hello::[0m[1m[31mcrate[0m::there;
[0m[35mcrates/syntax/test_data/parser/validation/0037_visibility_in_traits.rast[0m:[0m[32m58[0m:[0m17[0m:                [0m[1m[31mCRATE[0m_KW@60..65 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0037_visibility_in_traits.rast[0m:[0m[32m80[0m:[0m17[0m:                [0m[1m[31mCRATE[0m_KW@90..95 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m10[0m:[0m13[0m:            [0m[1m[31mCRATE[0m_KW@6..11 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m23[0m:[0m17[0m:                [0m[1m[31mCRATE[0m_KW@18..23 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m41[0m:[0m27[0m:                          [0m[1m[31mCRATE[0m_KW@31..36 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m70[0m:[0m13[0m:            [0m[1m[31mCRATE[0m_KW@66..71 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m86[0m:[0m15[0m:              [0m[1m[31mCRATE[0m_KW@84..89 "[0m[1m[31mcrate[0m"
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m93[0m:[0m19[0m:error 6..11: The `[0m[1m[31mcrate[0m` keyword is only allowed as the first segment of a path
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m94[0m:[0m20[0m:error 31..36: The `[0m[1m[31mcrate[0m` keyword is only allowed as the first segment of a path
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m95[0m:[0m20[0m:error 66..71: The `[0m[1m[31mcrate[0m` keyword is only allowed as the first segment of a path
[0m[35mcrates/syntax/test_data/parser/validation/0040_illegal_crate_kw_location.rast[0m:[0m[32m96[0m:[0m20[0m:error 84..89: The `[0m[1m[31mcrate[0m` keyword is only allowed as the first segment of a path
[0m[35mcrates/profile/src/google_cpu_profiler.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn start(path: &Path) {
[0m[35mcrates/profile/src/google_cpu_profiler.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn stop() {
[0m[35mcrates/syntax/src/parsing.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{syntax_node::GreenNode, SyntaxError, SyntaxTreeBuilder};
[0m[35mcrates/syntax/src/parsing.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use [0m[1m[31mcrate[0m::parsing::reparsing::incremental_reparse;
[0m[35mcrates/syntax/src/parsing.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn parse_text(text: &str) -> (GreenNode, Vec<SyntaxError>) {
[0m[35mcrates/syntax/src/parsing.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn build_tree(
[0m[35mcrates/profile/src/hprof.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tree::{Idx, Tree};
[0m[35mcrates/profile/Cargo.toml[0m:[0m[32m32[0m:[0m37[0m:# Uncomment to enable for the whole [0m[1m[31mcrate[0m graph
[0m[35mcrates/profile/src/lib.rs[0m:[0m[32m14[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/profile/src/lib.rs[0m:[0m[32m75[0m:[0m69[0m:/// $ pprof -svg target/release/deps/rust_analyzer-8739592dc93d63cb [0m[1m[31mcrate[0ms/rust-analyzer/out.profile > profile.svg
[0m[35mcrates/syntax/test_data/parser/fuzz-failures/0001.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {
[0m[35mcrates/syntax/test_data/parser/fuzz-failures/0001.rs[0m:[0m[32m67[0m:[0m42[0m:            IDENT | SELF_KW | SUPER_KW | [0m[1m[31mCRATE[0m_KW => 2,
[0m[35mcrates/intern/src/lib.rs[0m:[0m[32m198[0m:[0m15[0m:        impl $[0m[1m[31mcrate[0m::Internable for $t {
[0m[35mcrates/intern/src/lib.rs[0m:[0m[32m199[0m:[0m39[0m:            fn storage() -> &'static $[0m[1m[31mcrate[0m::InternStorage<Self> {
[0m[35mcrates/intern/src/lib.rs[0m:[0m[32m200[0m:[0m34[0m:                static STORAGE: $[0m[1m[31mcrate[0m::InternStorage<$t> = $[0m[1m[31mcrate[0m::InternStorage::new();
[0m[35mcrates/intern/src/lib.rs[0m:[0m[32m207[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::_impl_internable as impl_internable;
[0m[35mcrates/intern/Cargo.toml[0m:[0m[32m16[0m:[0m40[0m:# We need to freeze the version of the [0m[1m[31mcrate[0m, as the raw-api feature is considered unstable
[0m[35mcrates/ide-completion/src/lib.rs[0m:[0m[32m1[0m:[0m19[0m://! `completions` [0m[1m[31mcrate[0m provides utilities for generating completions of user input.
[0m[35mcrates/ide-completion/src/lib.rs[0m:[0m[32m27[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/lib.rs[0m:[0m[32m35[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/lib.rs[0m:[0m[32m225[0m:[0m17[0m:    let current_[0m[1m[31mcrate[0m = current_module.krate();
[0m[35mcrates/ide-completion/src/lib.rs[0m:[0m[32m232[0m:[0m21[0m:            current_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m37[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m62[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const TEST_CONFIG: CompletionConfig = CompletionConfig {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m72[0m:[0m41[0m:        granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m82[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_list(ra_fixture: &str) -> String {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m86[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_list_no_kw(ra_fixture: &str) -> String {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m90[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_list_no_kw_with_private_editable(ra_fixture: &str) -> String {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m96[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_list_with_trigger_character(
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m122[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m132[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn do_completion(code: &str, kind: CompletionItemKind) -> Vec<CompletionItem> {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m136[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn do_completion_with_config(
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m174[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m179[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_edit_with_config(
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m188[0m:[0m9[0m:        [0m[1m[31mcrate[0m::completions(&db, &config, position, None).unwrap();
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m225[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn get_all_items(
[0m[35mcrates/ide-completion/src/tests.rs[0m:[0m[32m231[0m:[0m15[0m:    let res = [0m[1m[31mcrate[0m::completions(&db, &config, position, trigger_character)
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod macro_;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod function;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod const_;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod pattern;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod type_alias;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod variant;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod union_literal;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod literal;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct RenderContext<'a> {
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m42[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(completion: &'a CompletionContext<'a>) -> RenderContext<'a> {
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn private_editable(mut self, private_editable: bool) -> Self {
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m56[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn import_to_add(mut self, import_to_add: Option<LocatedImport>) -> Self {
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m61[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn doc_aliases(mut self, doc_aliases: Vec<SmolStr>) -> Self {
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m125[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_field(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m173[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_tuple_field(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m188[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_type_inference(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m198[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_path_resolution(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m207[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_pattern_resolution(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m216[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_resolution_with_import(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m229[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_resolution_with_import_pat(
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m514[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m1073[0m:[0m5[0m:use [0m[1m[31mcrate[0m::m::f$0;
[0m[35mcrates/ide-completion/src/render.rs[0m:[0m[32m1077[0m:[0m5[0m:use [0m[1m[31mcrate[0m::m::foo;
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m15[0m:[0m26[0m:    helpers::is_editable_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum PatternRefutability {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Visible {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct PathCompletionCtx {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m74[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) original_path: Option<ast::Path>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m79[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) use_tree_parent: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m126[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type ExistingDerives = FxHashSet<hir::Macro>;
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m129[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct AttrCtx {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m130[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) kind: AttrKind,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m131[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) annotated_item_kind: Option<SyntaxKind>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m135[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ExprCtx {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m136[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) in_block_expr: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m137[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) in_loop_body: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m138[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) after_if_expr: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m140[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) in_condition: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) incomplete_let: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m142[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ref_expr_parent: Option<ast::RefExpr>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m144[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) is_func_update: Option<ast::RecordExpr>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m145[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) self_param: Option<hir::SelfParam>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m146[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) innermost_ret_ty: Option<hir::Type>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m147[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) impl_: Option<ast::Impl>,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m150[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) in_match_guard: bool,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m155[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum TypeLocation {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m178[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete_lifetimes(&self) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m188[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete_consts(&self) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m199[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete_types(&self) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m210[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete_self_type(&self) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m216[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum TypeAscriptionTarget {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m354[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m398[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ParamKind {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m406[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct CompletionContext<'a> {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m417[0m:[0m13[0m:    /// The [0m[1m[31mcrate[0m of the current file.
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m418[0m:[0m28[0m:    pub(super) krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m435[0m:[0m11[0m:    /// - [0m[1m[31mcrate[0m-root
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m439[0m:[0m27[0m:    pub(super) depth_from_[0m[1m[31mcrate[0m_root: usize,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m444[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn source_range(&self) -> TextRange {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m458[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn famous_defs(&self) -> FamousDefs<'_, '_> {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m463[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn def_is_visible(&self, item: &ScopeDef) -> Visible {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m488[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_visible<I>(&self, item: &I) -> Visible
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m490[0m:[0m57[0m:        I: hir::HasVisibility + hir::HasAttrs + hir::Has[0m[1m[31mCrate[0m + Copy,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m497[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn doc_aliases<I>(&self, item: &I) -> Vec<SmolStr>
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m506[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_item_hidden(&self, item: &hir::ItemInNs) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m516[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn check_stability(&self, attrs: Option<&hir::Attrs>) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m524[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_ops_trait(&self, trait_: hir::Trait) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m532[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn traits_in_scope(&self) -> hir::VisibleTraits {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m540[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iterate_path_candidates(
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m565[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef, Vec<SmolStr>)) {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m576[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn process_all_names_raw(&self, f: &mut dyn FnMut(Name, ScopeDef)) {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m593[0m:[0m18[0m:        defining_[0m[1m[31mcrate[0m: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m600[0m:[0m35[0m:            return if is_editable_[0m[1m[31mcrate[0m(defining_[0m[1m[31mcrate[0m, self.db) {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m607[0m:[0m47[0m:        if self.is_doc_hidden(attrs, defining_[0m[1m[31mcrate[0m) {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m614[0m:[0m58[0m:    fn is_doc_hidden(&self, attrs: &hir::Attrs, defining_[0m[1m[31mcrate[0m: hir::[0m[1m[31mCrate[0m) -> bool {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m615[0m:[0m71[0m:        // `doc(hidden)` items are only completed within the defining [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m616[0m:[0m32[0m:        self.krate != defining_[0m[1m[31mcrate[0m && attrs.has_doc_hidden()
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m619[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn doc_aliases_in_scope(&self, scope_def: ScopeDef) -> Vec<SmolStr> {
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m696[0m:[0m28[0m:        let toolchain = db.[0m[1m[31mcrate[0m_graph()[krate.into()].channel;
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m708[0m:[0m24[0m:        let depth_from_[0m[1m[31mcrate[0m_root = iter::successors(module.parent(db), |m| m.parent(db)).count();
[0m[35mcrates/ide-completion/src/context.rs[0m:[0m[32m725[0m:[0m24[0m:            depth_from_[0m[1m[31mcrate[0m_root,
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m3[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod attribute;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod dot;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod expr;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod extern_abi;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod field;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod flyimport;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod fn_param;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod format_string;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod item_list;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod keyword;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod lifetime;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod mod_;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod pattern;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod postfix;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod record;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod snippet;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod r#type;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod use_;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod vis;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod env_vars;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod extern_[0m[1m[31mcrate[0m;
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m31[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m66[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_to(self, acc: &mut Completions, db: &RootDatabase) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m82[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_keyword(&mut self, ctx: &CompletionContext<'_>, keyword: &'static str) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_nameref_keywords_with_colon(&mut self, ctx: &CompletionContext<'_>) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m88[0m:[0m21[0m:        ["self::", "[0m[1m[31mcrate[0m::"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m90[0m:[0m27[0m:        if ctx.depth_from_[0m[1m[31mcrate[0m_root > 0 {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m95[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_nameref_keywords(&mut self, ctx: &CompletionContext<'_>) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m96[0m:[0m19[0m:        ["self", "[0m[1m[31mcrate[0m"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m98[0m:[0m27[0m:        if ctx.depth_from_[0m[1m[31mcrate[0m_root > 0 {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m103[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_super_keyword(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m109[0m:[0m48[0m:            if len > 0 && len < ctx.depth_from_[0m[1m[31mcrate[0m_root {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m115[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_keyword_snippet_expr(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_keyword_snippet(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m156[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_[0m[1m[31mcrate[0m_roots(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m162[0m:[0m68[0m:            ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_[0m[1m[31mcrate[0m_root() => {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m169[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_path_resolution(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m198[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_pattern_resolution(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m224[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_enum_variants(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m238[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_module(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m258[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_macro(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m284[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_function(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m313[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_method(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m344[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_method_with_import(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m375[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_const(&mut self, ctx: &CompletionContext<'_>, konst: hir::Const) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m390[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_type_alias(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m409[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_type_alias_with_eq(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m420[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_qualified_enum_variant(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m437[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_enum_variant(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m460[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_field(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m487[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_struct_literal(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m505[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_union_literal(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m519[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_tuple_field(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m532[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_lifetime(&mut self, ctx: &CompletionContext<'_>, name: hir::Name) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m537[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_label(&mut self, ctx: &CompletionContext<'_>, name: hir::Name) {
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m542[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_variant_pat(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m563[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_qualified_variant_pat(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m584[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_struct_pat(
[0m[35mcrates/ide-completion/src/completions.rs[0m:[0m[32m743[0m:[0m28[0m:        NameRefKind::Extern[0m[1m[31mCrate[0m => extern_[0m[1m[31mcrate[0m::complete_extern_[0m[1m[31mcrate[0m(acc, ctx),
[0m[35mcrates/ide-completion/src/completions/keyword.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{CompletionContext, Completions};
[0m[35mcrates/ide-completion/src/completions/keyword.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_for_and_where(
[0m[35mcrates/ide-completion/src/completions/keyword.rs[0m:[0m[32m37[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list};
[0m[35mcrates/ide-completion/src/completions/use_.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/use_.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_use_path(
[0m[35mcrates/ide-completion/src/completions/use_.rs[0m:[0m[32m89[0m:[0m58[0m:        // fresh use tree with leading colon2, only show [0m[1m[31mcrate[0m roots
[0m[35mcrates/ide-completion/src/completions/use_.rs[0m:[0m[32m91[0m:[0m37[0m:            cov_mark::hit!(use_tree_[0m[1m[31mcrate[0m_roots_only);
[0m[35mcrates/ide-completion/src/completions/use_.rs[0m:[0m[32m92[0m:[0m21[0m:            acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx);
[0m[35mcrates/proc-macro-srv/build.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const RUSTC_VERSION_STRING: &str = {version_string:?};
[0m[35mcrates/ide-completion/Cargo.toml[0m:[0m[32m29[0m:[0m15[0m:# completions [0m[1m[31mcrate[0m should depend only on the top-level `hir` package. if you need
[0m[35mcrates/hir-expand/src/builtin_attr_macro.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::ExpandDatabase, name, tt, ExpandResult, MacroCallId, MacroCallKind};
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m4[0m:[0m65[0m://! this moment, this is horribly incomplete and handles only `$[0m[1m[31mcrate[0m`.
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m5[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m41[0m:[0m23[0m:    ) -> Either<Name, [0m[1m[31mCrate[0mId> {
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m43[0m:[0m37[0m:            if name_ref.text() == "$[0m[1m[31mcrate[0m" {
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m44[0m:[0m50[0m:                if let Some(krate) = frames.root_[0m[1m[31mcrate[0m(db, name_ref.syntax()) {
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m53[0m:[0m90[0m:    pub fn local_inner_macros(&self, db: &dyn ExpandDatabase, path: ast::Path) -> Option<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m62[0m:[0m33[0m:                    frames.root_[0m[1m[31mcrate[0m(db, path.syntax())
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m82[0m:[0m19[0m:    krate: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m95[0m:[0m13[0m:    fn root_[0m[1m[31mcrate[0m(&self, db: &dyn ExpandDatabase, node: &SyntaxNode) -> Option<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m130[0m:[0m21[0m:    macro_arg: Arc<([0m[1m[31mcrate[0m::tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)>,
[0m[35mcrates/hir-expand/src/hygiene.rs[0m:[0m[32m219[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(db: &dyn ExpandDatabase, file_id: HirFileId) -> HygieneFrame {
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m4[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m51[0m:[0m55[0m:                    path: Interned::new(ModPath::from([0m[1m[31mcrate[0m::name!(doc))),
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m94[0m:[0m57[0m:    pub fn filter(self, db: &dyn ExpandDatabase, krate: [0m[1m[31mCrate[0mId) -> RawAttrs {
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m97[0m:[0m76[0m:            .any(|attr| attr.path.as_ident().map_or(false, |name| *name == [0m[1m[31mcrate[0m::name![cfg_attr]));
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m102[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m107[0m:[0m76[0m:                        attr.path.as_ident().map_or(false, |name| *name == [0m[1m[31mcrate[0m::name![cfg_attr]);
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m134[0m:[0m40[0m:                    let cfg_options = &[0m[1m[31mcrate[0m_graph[krate].cfg_options;
[0m[35mcrates/hir-expand/src/attrs.rs[0m:[0m[32m314[0m:[0m38[0m:        if *self.path.as_ident()? == [0m[1m[31mcrate[0m::name![cfg] {
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m34[0m:[0m5[0m:    [0m[1m[31mCrate[0mId, FileId, FileRange, ProcMacroKind,
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m43[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m58[0m:[0m25[0m:    UnresolvedProcMacro([0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m129[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m138[0m:[0m16[0m:    pub krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m341[0m:[0m15[0m:    /// See [`[0m[1m[31mcrate[0m::builtin_attr_macro::derive_attr_expand`].
[0m[35mcrates/hir-expand/src/lib.rs[0m:[0m[32m389[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_dot(
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_undotted_self(
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m151[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m186[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m188[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m204[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m206[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m267[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m272[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_field: u32,
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m276[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m286[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m291[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_field: u32,
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m295[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m305[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m312[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m322[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m327[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_method(&self) {}
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m331[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m340[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m345[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_method(&self) {}
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m349[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m362[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m367[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_field: u32,
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m371[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m375[0m:[0m20[0m:                fd [0m[1m[31mcrate[0m_field   u32
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m384[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m389[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_field: u32,
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m393[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m403[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m410[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m420[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m425[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_method(&self) {}
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m429[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m433[0m:[0m20[0m:                me [0m[1m[31mcrate[0m_method()   fn(&self)
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m440[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m445[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_method(&self) {}
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m449[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m491[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m493[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m823[0m:[0m24[0m:    ($val:expr,) => { $[0m[1m[31mcrate[0m::d!($val) };
[0m[35mcrates/ide-completion/src/completions/dot.rs[0m:[0m[32m825[0m:[0m13[0m:        ($($[0m[1m[31mcrate[0m::d!($val)),+,)
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m43[0m:[0m36[0m:    pub fn display(&self, db: &dyn [0m[1m[31mcrate[0m::db::ExpandDatabase) -> impl fmt::Display + '_ {
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m170[0m:[0m43[0m:    pub fn display<'a>(&'a self, db: &dyn [0m[1m[31mcrate[0m::db::ExpandDatabase) -> impl fmt::Display + 'a {
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m405[0m:[0m9[0m:        [0m[1m[31mcrate[0m_type,
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m477[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::name::known::SELF_PARAM
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m480[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::name::known::SELF_TYPE
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m483[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::name::known::STATIC_LIFETIME
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m486[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::name::known::$ident
[0m[35mcrates/hir-expand/src/name.rs[0m:[0m[32m491[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::name;
[0m[35mcrates/ide-completion/src/completions/postfix/format_like.rs[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/postfix/format_like.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_format_like_completions(
[0m[35mcrates/ide-completion/src/completions/fn_param.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/fn_param.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_fn_param(
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m3[0m:[0m22[0m:use base_db::{salsa, [0m[1m[31mCrate[0mId, Edition, SourceDatabase};
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m74[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn map_id_down(&self, id: tt::TokenId) -> tt::TokenId {
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m85[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn map_id_up(&self, id: tt::TokenId) -> (tt::TokenId, mbe::Origin) {
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m144[0m:[0m13[0m:        def_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m151[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::builtin_fn_macro::include_arg_to_tt)]
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m482[0m:[0m9[0m:    def_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/db.rs[0m:[0m[32m485[0m:[0m22[0m:    let is_2021 = db.[0m[1m[31mcrate[0m_graph()[def_[0m[1m[31mcrate[0m].edition >= Edition::Edition2021;
[0m[35mcrates/ide-completion/src/completions/expr.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/expr.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_expr_path(
[0m[35mcrates/ide-completion/src/completions/expr.rs[0m:[0m[32m161[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m13[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m28[0m:[0m42[0m:    pub fn display(&'a self, db: &'a dyn [0m[1m[31mcrate[0m::db::ExpandDatabase) -> impl fmt::Display + 'a {
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m38[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m41[0m:[0m11[0m:    /// `$[0m[1m[31mcrate[0m` from macro expansion
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m42[0m:[0m11[0m:    Dollar[0m[1m[31mCrate[0m([0m[1m[31mCrate[0mId),
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m76[0m:[0m86[0m:    /// Returns the number of segments in the path (counting special segments like `$[0m[1m[31mcrate[0m` and
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m83[0m:[0m27[0m:                PathKind::[0m[1m[31mCrate[0m => 1,
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m85[0m:[0m33[0m:                PathKind::Dollar[0m[1m[31mCrate[0m(_) => 1,
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m119[0m:[0m46[0m:    pub fn display<'a>(&'a self, db: &'a dyn [0m[1m[31mcrate[0m::db::ExpandDatabase) -> impl fmt::Display + 'a {
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m174[0m:[0m19[0m:        PathKind::[0m[1m[31mCrate[0m => add_segment("[0m[1m[31mcrate[0m")?,
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m176[0m:[0m25[0m:        PathKind::Dollar[0m[1m[31mCrate[0m(_) => add_segment("$[0m[1m[31mcrate[0m")?,
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m217[0m:[0m31[0m:                Either::Right([0m[1m[31mcrate[0m_id) => {
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m219[0m:[0m41[0m:                        PathKind::Dollar[0m[1m[31mCrate[0m([0m[1m[31mcrate[0m_id),
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m231[0m:[0m31[0m:        ast::PathSegmentKind::[0m[1m[31mCrate[0mKw => {
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m235[0m:[0m46[0m:            ModPath::from_segments(PathKind::[0m[1m[31mCrate[0m, iter::empty())
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m264[0m:[0m25[0m:            if let Some([0m[1m[31mcrate[0m_id) = hygiene.local_inner_macros(db, path) {
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m265[0m:[0m49[0m:                mod_path.kind = PathKind::Dollar[0m[1m[31mCrate[0m([0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m273[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::name as __name;
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m298[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::__known_path!($start $(:: $seg)*);
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m299[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::mod_path::ModPath::from_segments($[0m[1m[31mcrate[0m::mod_path::PathKind::Abs, vec![
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m300[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::mod_path::__name![$start], $($[0m[1m[31mcrate[0m::mod_path::__name![$seg],)*
[0m[35mcrates/hir-expand/src/mod_path.rs[0m:[0m[32m305[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::__path as path;
[0m[35mcrates/ide-completion/src/completions/format_string.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{context::CompletionContext, CompletionItem, CompletionItemKind, Completions};
[0m[35mcrates/ide-completion/src/completions/format_string.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn format_string(
[0m[35mcrates/ide-completion/src/completions/format_string.rs[0m:[0m[32m43[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list_no_kw};
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m89[0m:[0m21[0m:                use [0m[1m[31mcrate[0m::RUSTC_VERSION_STRING;
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m112[0m:[0m18[0m:    proc_macros: [0m[1m[31mcrate[0m::proc_macros::ProcMacros,
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m128[0m:[0m13[0m:            [0m[1m[31mcrate[0m::proc_macros::ProcMacros::from_lib(&lib, symbol_name, version_info)?;
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m153[0m:[0m22[0m:        macro_body: &[0m[1m[31mcrate[0m::tt::Subtree,
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m154[0m:[0m29[0m:        attributes: Option<&[0m[1m[31mcrate[0m::tt::Subtree>,
[0m[35mcrates/proc-macro-srv/src/dylib.rs[0m:[0m[32m155[0m:[0m17[0m:    ) -> Result<[0m[1m[31mcrate[0m::tt::Subtree, String> {
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct SyntaxFixups {
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) append: FxHashMap<SyntaxElement, Vec<SyntheticToken>>,
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m20[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) replace: FxHashMap<SyntaxElement, Vec<SyntheticToken>>,
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) undo_info: SyntaxFixupUndoInfo,
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) token_map: TokenMap,
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) next_id: u32,
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m291[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reverse_fixups(
[0m[35mcrates/hir-expand/src/fixup.rs[0m:[0m[32m332[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tt;
[0m[35mcrates/ide-completion/src/completions/lifetime.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/lifetime.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_lifetime(
[0m[35mcrates/ide-completion/src/completions/lifetime.rs[0m:[0m[32m55[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_label(
[0m[35mcrates/ide-completion/src/completions/lifetime.rs[0m:[0m[32m74[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list};
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m1[0m:[0m27[0m://! Completion for extern [0m[1m[31mcrate[0ms
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{context::CompletionContext, CompletionItem, CompletionItemKind};
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_extern_[0m[1m[31mcrate[0m(acc: &mut Completions, ctx: &CompletionContext<'_>) {
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m11[0m:[0m25[0m:    let imported_extern_[0m[1m[31mcrate[0ms: Vec<Name> = ctx.scope.extern_[0m[1m[31mcrate[0m_decls().collect();
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m13[0m:[0m44[0m:    for (name, module) in ctx.scope.extern_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m14[0m:[0m28[0m:        if imported_extern_[0m[1m[31mcrate[0ms.contains(&name) {
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m31[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::completion_list_no_kw;
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m34[0m:[0m28[0m:    fn can_complete_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m36[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m_a
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m38[0m:[0m12[0m://- /other_[0m[1m[31mcrate[0m_b.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m_b
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m40[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:[0m[1m[31mcrate[0m_c
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m42[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:other_[0m[1m[31mcrate[0m_a,other_[0m[1m[31mcrate[0m_b,[0m[1m[31mcrate[0m_c extern-prelude:other_[0m[1m[31mcrate[0m_a
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m43[0m:[0m8[0m:extern [0m[1m[31mcrate[0m oth$0
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m49[0m:[0m30[0m:        assert_eq!("md other_[0m[1m[31mcrate[0m_a\n".to_string(), completion_list);
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m55[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m_a
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m57[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:[0m[1m[31mcrate[0m_c
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m59[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m_b
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m61[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:other_[0m[1m[31mcrate[0m_a,other_[0m[1m[31mcrate[0m_b,[0m[1m[31mcrate[0m_c extern-prelude:other_[0m[1m[31mcrate[0m_a,other_[0m[1m[31mcrate[0m_b
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m62[0m:[0m8[0m:extern [0m[1m[31mcrate[0m other_[0m[1m[31mcrate[0m_b;
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m63[0m:[0m8[0m:extern [0m[1m[31mcrate[0m oth$0
[0m[35mcrates/ide-completion/src/completions/extern_crate.rs[0m:[0m[32m69[0m:[0m30[0m:        assert_eq!("md other_[0m[1m[31mcrate[0m_a\n".to_string(), completion_list);
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{dylib::LoadProcMacroDylibError, server::SYMBOL_INTERNER, tt};
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ProcMacros {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m12[0m:[0m49[0m:impl From<proc_macro::bridge::PanicMessage> for [0m[1m[31mcrate[0m::PanicMessage {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m26[0m:[0m25[0m:    ///           macro [0m[1m[31mcrate[0m. This is the information we use to figure out
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m28[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_lib(
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m33[0m:[0m35[0m:        if info.version_string == [0m[1m[31mcrate[0m::RUSTC_VERSION_STRING {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expand(
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m48[0m:[0m30[0m:    ) -> Result<tt::Subtree, [0m[1m[31mcrate[0m::PanicMessage> {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m49[0m:[0m27[0m:        let parsed_body = [0m[1m[31mcrate[0m::server::TokenStream::with_subtree(macro_body.clone());
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m51[0m:[0m51[0m:        let parsed_attributes = attributes.map_or([0m[1m[31mcrate[0m::server::TokenStream::new(), |attr| {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m52[0m:[0m13[0m:            [0m[1m[31mcrate[0m::server::TokenStream::with_subtree(attr.clone())
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m62[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::server::RustAnalyzer { interner: &SYMBOL_INTERNER },
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m66[0m:[0m68[0m:                    return res.map(|it| it.into_subtree()).map_err([0m[1m[31mcrate[0m::PanicMessage::from);
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m73[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::server::RustAnalyzer { interner: &SYMBOL_INTERNER },
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m77[0m:[0m68[0m:                    return res.map(|it| it.into_subtree()).map_err([0m[1m[31mcrate[0m::PanicMessage::from);
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m84[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::server::RustAnalyzer { interner: &SYMBOL_INTERNER },
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m89[0m:[0m68[0m:                    return res.map(|it| it.into_subtree()).map_err([0m[1m[31mcrate[0m::PanicMessage::from);
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m98[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn list_macros(&self) -> Vec<(String, ProcMacroKind)> {
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m118[0m:[0m42[0m:    let path = paths::AbsPathBuf::assert([0m[1m[31mcrate[0m::proc_macro_test_dylib_path());
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m122[0m:[0m9[0m:        [0m[1m[31mcrate[0m::RUSTC_VERSION_STRING,
[0m[35mcrates/proc-macro-srv/src/proc_macros.rs[0m:[0m[32m125[0m:[0m9[0m:        [0m[1m[31mcrate[0m::RUSTC_VERSION_STRING,
[0m[35mcrates/ide-completion/src/completions/record.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/record.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_record_pattern_fields(
[0m[35mcrates/ide-completion/src/completions/record.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_record_expr_fields(
[0m[35mcrates/ide-completion/src/completions/record.rs[0m:[0m[32m81[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_default_update(
[0m[35mcrates/ide-completion/src/completions/record.rs[0m:[0m[32m129[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/proc-macro-srv/src/server/token_stream.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tt::{self, TokenTree};
[0m[35mcrates/proc-macro-srv/src/server/token_stream.rs[0m:[0m[32m11[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new() -> Self {
[0m[35mcrates/proc-macro-srv/src/server/token_stream.rs[0m:[0m[32m15[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn with_subtree(subtree: tt::Subtree) -> Self {
[0m[35mcrates/proc-macro-srv/src/server/token_stream.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn into_subtree(self) -> tt::Subtree {
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m4[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mOrigin, Lang[0m[1m[31mCrate[0mOrigin};
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::ExpandDatabase, name, quote, ExpandError, ExpandResult, MacroCallId};
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m376[0m:[0m17[0m:fn find_builtin_[0m[1m[31mcrate[0m(db: &dyn ExpandDatabase, id: MacroCallId) -> tt::TokenTree {
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m378[0m:[0m19[0m:    // such that $[0m[1m[31mcrate[0m can be used here.
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m379[0m:[0m17[0m:    let cg = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m382[0m:[0m44[0m:    let tt = if matches!(cg[krate].origin, [0m[1m[31mCrate[0mOrigin::Lang(Lang[0m[1m[31mCrate[0mOrigin::Core)) {
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m384[0m:[0m18[0m:        quote! { [0m[1m[31mcrate[0m }
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m398[0m:[0m30[0m:    let krate = find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m408[0m:[0m30[0m:    let krate = find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m474[0m:[0m31[0m:    let krate = &find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m514[0m:[0m31[0m:    let krate = &find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m595[0m:[0m31[0m:    let krate = &find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m649[0m:[0m30[0m:    let krate = find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m659[0m:[0m30[0m:    let krate = find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m727[0m:[0m31[0m:    let krate = &find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/hir-expand/src/builtin_derive_macro.rs[0m:[0m[32m789[0m:[0m31[0m:    let krate = &find_builtin_[0m[1m[31mcrate[0m(db, id);
[0m[35mcrates/proc-macro-srv/src/server.rs[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tt;
[0m[35mcrates/proc-macro-srv/src/server.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) interner: SymbolInternerRef,
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod trait_impl;
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_item_list_in_expr(
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_item_list(
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m56[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/ide-completion/src/completions/item_list.rs[0m:[0m[32m113[0m:[0m30[0m:            add_keyword("pub([0m[1m[31mcrate[0m)", "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/ide-completion/src/completions/flyimport.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/flyimport.rs[0m:[0m[32m22[0m:[0m98[0m:// When completing names in the current scope, proposes additional imports from other modules or [0m[1m[31mcrate[0ms,
[0m[35mcrates/ide-completion/src/completions/flyimport.rs[0m:[0m[32m111[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn import_on_the_fly_path(
[0m[35mcrates/ide-completion/src/completions/flyimport.rs[0m:[0m[32m150[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn import_on_the_fly_pat(
[0m[35mcrates/ide-completion/src/completions/flyimport.rs[0m:[0m[32m175[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn import_on_the_fly_dot(
[0m[35mcrates/proc-macro-srv/src/tests/utils.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{dylib, proc_macro_test_dylib_path, ProcMacroSrv};
[0m[35mcrates/proc-macro-srv/src/tests/utils.rs[0m:[0m[32m8[0m:[0m39[0m:fn parse_string(code: &str) -> Option<[0m[1m[31mcrate[0m::server::TokenStream> {
[0m[35mcrates/proc-macro-srv/src/tests/utils.rs[0m:[0m[32m15[0m:[0m5[0m:    [0m[1m[31mcrate[0m::server::TokenStream::from_str(code).ok()
[0m[35mcrates/proc-macro-srv/src/tests/utils.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn list() -> Vec<String> {
[0m[35mcrates/ide-completion/src/completions/field.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/field.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_field_list_tuple_variant(
[0m[35mcrates/ide-completion/src/completions/field.rs[0m:[0m[32m25[0m:[0m30[0m:            add_keyword("pub([0m[1m[31mcrate[0m)", "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/ide-completion/src/completions/field.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_field_list_record_variant(
[0m[35mcrates/ide-completion/src/completions/field.rs[0m:[0m[32m39[0m:[0m26[0m:        add_keyword("pub([0m[1m[31mcrate[0m)", "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use self::derive::complete_derive_path;
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_known_attribute_input(
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m74[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_attribute_path(
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m103[0m:[0m58[0m:        // fresh use tree with leading colon2, only show [0m[1m[31mcrate[0m roots
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m104[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m222[0m:[0m18[0m:                "[0m[1m[31mcrate[0m_name", "feature", "no_implicit_prelude", "no_main", "no_std",
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m230[0m:[0m17[0m:        (EXTERN_[0m[1m[31mCRATE[0m, attrs!(item, "macro_use", "no_link")),
[0m[35mcrates/ide-completion/src/completions/attribute.rs[0m:[0m[32m283[0m:[0m13[0m:    attr(r#"[0m[1m[31mcrate[0m_name = """#, Some("[0m[1m[31mcrate[0m_name"), Some(r#"[0m[1m[31mcrate[0m_name = "${0:[0m[1m[31mcrate[0m_name}""#))
[0m[35mcrates/ide-completion/src/completions/extern_abi.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/extern_abi.rs[0m:[0m[32m45[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_extern_abi(
[0m[35mcrates/ide-completion/src/completions/extern_abi.rs[0m:[0m[32m65[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list_no_kw};
[0m[35mcrates/hir-expand/src/ast_id_map.rs[0m:[0m[32m89[0m:[0m15[0m:        Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/hir-expand/src/ast_id_map.rs[0m:[0m[32m129[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_source(node: &SyntaxNode) -> AstIdMap {
[0m[35mcrates/hir-expand/src/ast_id_map.rs[0m:[0m[32m167[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_raw(&self, id: ErasedFileAstId) -> SyntaxNodePtr {
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m12[0m:[0m81[0m://! > Eagerly expanded macros don't add anything to the module structure of the [0m[1m[31mcrate[0m and
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m21[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m37[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m114[0m:[0m25[0m:    subtree.delimiter = [0m[1m[31mcrate[0m::tt::Delimiter::unspecified();
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m134[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/eager.rs[0m:[0m[32m151[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/proc-macro-srv/src/server/symbol.rs[0m:[0m[32m7[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) static SYMBOL_INTERNER: RefCell<SymbolInterner> = Default::default();
[0m[35mcrates/proc-macro-srv/src/server/symbol.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type SymbolInternerRef = &'static LocalKey<RefCell<SymbolInterner>>;
[0m[35mcrates/proc-macro-srv/src/server/symbol.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct SymbolInterner {
[0m[35mcrates/ide-completion/src/completions/attribute/lint.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{context::CompletionContext, item::CompletionItem, Completions};
[0m[35mcrates/ide-completion/src/completions/postfix.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/postfix.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_postfix(
[0m[35mcrates/ide-completion/src/completions/postfix.rs[0m:[0m[32m335[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/postfix.rs[0m:[0m[32m599[0m:[0m17[0m:                [0m[1m[31mcrate[0m::SnippetScope::Expr,
[0m[35mcrates/ide-completion/src/completions/postfix.rs[0m:[0m[32m714[0m:[0m13[0m:            [0m[1m[31mcrate[0m::SnippetScope::Expr,
[0m[35mcrates/ide-completion/src/completions/attribute/cfg.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{completions::Completions, context::CompletionContext, CompletionItem};
[0m[35mcrates/ide-completion/src/completions/attribute/cfg.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext<'_>) {
[0m[35mcrates/ide-completion/src/completions/attribute/repr.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{context::CompletionContext, item::CompletionItem, Completions};
[0m[35mcrates/ide-completion/src/completions/vis.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/vis.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_vis_path(
[0m[35mcrates/ide-completion/src/completions/snippet.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/snippet.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_expr_snippet(
[0m[35mcrates/ide-completion/src/completions/snippet.rs[0m:[0m[32m51[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_item_snippet(
[0m[35mcrates/ide-completion/src/completions/snippet.rs[0m:[0m[32m156[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/snippet.rs[0m:[0m[32m171[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::SnippetScope::Expr,
[0m[35mcrates/ide-completion/src/completions/attribute/derive.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/attribute/derive.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_derive_path(
[0m[35mcrates/ide-completion/src/completions/attribute/derive.rs[0m:[0m[32m43[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m112[0m:[0m14[0m:const DOLLAR_[0m[1m[31mCRATE[0m: tt::Ident =
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m113[0m:[0m45[0m:    tt::Ident { text: SmolStr::new_inline("$[0m[1m[31mcrate[0m"), span: tt::TokenId::unspecified() };
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m200[0m:[0m29[0m:                    #DOLLAR_[0m[1m[31mCRATE[0m::panic!(##panic_args);
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m271[0m:[0m36[0m:                let krate = DOLLAR_[0m[1m[31mCRATE[0m.clone();
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m303[0m:[0m22[0m:    let enabled = db.[0m[1m[31mcrate[0m_graph()[loc.krate].cfg_options.check(&expr) != Some(false);
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m314[0m:[0m33[0m:    // Expand to a macro call `$[0m[1m[31mcrate[0m::panic::panic_{edition}`
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m315[0m:[0m26[0m:    let mut call = if db.[0m[1m[31mcrate[0m_graph()[loc.krate].edition >= Edition::Edition2021 {
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m316[0m:[0m24[0m:        quote!(#DOLLAR_[0m[1m[31mCRATE[0m::panic::panic_2021!)
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m318[0m:[0m24[0m:        quote!(#DOLLAR_[0m[1m[31mCRATE[0m::panic::panic_2015!)
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m332[0m:[0m33[0m:    // Expand to a macro call `$[0m[1m[31mcrate[0m::panic::unreachable_{edition}`
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m333[0m:[0m26[0m:    let mut call = if db.[0m[1m[31mcrate[0m_graph()[loc.krate].edition >= Edition::Edition2021 {
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m334[0m:[0m24[0m:        quote!(#DOLLAR_[0m[1m[31mCRATE[0m::panic::unreachable_2021!)
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m336[0m:[0m24[0m:        quote!(#DOLLAR_[0m[1m[31mCRATE[0m::panic::unreachable_2015!)
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m552[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn include_arg_to_tt(
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m617[0m:[0m8[0m:    db.[0m[1m[31mcrate[0m_graph()[krate].env.get(key)
[0m[35mcrates/hir-expand/src/builtin_fn_macro.rs[0m:[0m[32m658[0m:[0m27[0m:    // FIXME: Use `DOLLAR_[0m[1m[31mCRATE[0m` when that works in eager macros.
[0m[35mcrates/ide-completion/src/completions/mod_.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{context::CompletionContext, CompletionItem, Completions};
[0m[35mcrates/ide-completion/src/completions/mod_.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_mod(
[0m[35mcrates/ide-completion/src/completions/mod_.rs[0m:[0m[32m163[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::completion_list;
[0m[35mcrates/ide-completion/src/completions/mod_.rs[0m:[0m[32m320[0m:[0m17[0m://- /src/bin.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m3[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mId, ProcMacroExpansionError, ProcMacroId, ProcMacroKind};
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::ExpandDatabase, tt, ExpandError, ExpandResult};
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m32[0m:[0m13[0m:        def_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m33[0m:[0m17[0m:        calling_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m39[0m:[0m94[0m:                ExpandResult::new(tt::Subtree::empty(), ExpandError::UnresolvedProcMacro(def_[0m[1m[31mcrate[0m))
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m43[0m:[0m62[0m:                let proc_macros = match proc_macros.get(&def_[0m[1m[31mcrate[0m) {
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m68[0m:[0m38[0m:                let krate_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m69[0m:[0m89[0m:                // Proc macros have access to the environment variables of the invoking [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-expand/src/proc_macro.rs[0m:[0m[32m70[0m:[0m48[0m:                let env = &krate_graph[calling_[0m[1m[31mcrate[0m].env;
[0m[35mcrates/ide-completion/src/completions/env_vars.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/env_vars.rs[0m:[0m[32m26[0m:[0m13[0m:    ("CARGO_[0m[1m[31mCRATE[0m_NAME","The name of the [0m[1m[31mcrate[0m that is currently being compiled"),
[0m[35mcrates/ide-completion/src/completions/env_vars.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_cargo_env_vars(
[0m[35mcrates/ide-completion/src/completions/env_vars.rs[0m:[0m[32m63[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m1[0m:[0m35[0m://! A simplified version of quote-[0m[1m[31mcrate[0m like quasi quote macro
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m12[0m:[0m15[0m:        Vec::<[0m[1m[31mcrate[0m::tt::TokenTree>::new()
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m17[0m:[0m29[0m:            let children = $[0m[1m[31mcrate[0m::__quote!($($tt)*);
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m18[0m:[0m13[0m:            [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m19[0m:[0m28[0m:                delimiter: [0m[1m[31mcrate[0m::tt::Delimiter {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m20[0m:[0m27[0m:                    kind: [0m[1m[31mcrate[0m::tt::DelimiterKind::$delim,
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m21[0m:[0m27[0m:                    open: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m22[0m:[0m28[0m:                    close: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m24[0m:[0m31[0m:                token_trees: $[0m[1m[31mcrate[0m::quote::IntoTt::to_tokens(children),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m32[0m:[0m17[0m:                [0m[1m[31mcrate[0m::tt::Leaf::Punct([0m[1m[31mcrate[0m::tt::Punct {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m34[0m:[0m30[0m:                    spacing: [0m[1m[31mcrate[0m::tt::Spacing::Alone,
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m35[0m:[0m27[0m:                    span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m44[0m:[0m17[0m:                [0m[1m[31mcrate[0m::tt::Leaf::Punct([0m[1m[31mcrate[0m::tt::Punct {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m46[0m:[0m30[0m:                    spacing: [0m[1m[31mcrate[0m::tt::Spacing::Joint,
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m47[0m:[0m27[0m:                    span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m49[0m:[0m17[0m:                [0m[1m[31mcrate[0m::tt::Leaf::Punct([0m[1m[31mcrate[0m::tt::Punct {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m51[0m:[0m30[0m:                    spacing: [0m[1m[31mcrate[0m::tt::Spacing::Alone,
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m52[0m:[0m27[0m:                    span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m61[0m:[0m26[0m:            let token = $[0m[1m[31mcrate[0m::quote::ToTokenTree::to_token($first);
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m63[0m:[0m36[0m:            let mut tail_tokens = $[0m[1m[31mcrate[0m::quote::IntoTt::to_tokens($[0m[1m[31mcrate[0m::__quote!($($tail)*));
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m71[0m:[0m54[0m:            let mut tokens = $first.into_iter().map($[0m[1m[31mcrate[0m::quote::ToTokenTree::to_token).collect::<Vec<[0m[1m[31mcrate[0m::tt::TokenTree>>();
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m72[0m:[0m36[0m:            let mut tail_tokens = $[0m[1m[31mcrate[0m::quote::IntoTt::to_tokens($[0m[1m[31mcrate[0m::__quote!($($tail)*));
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m79[0m:[0m30[0m:    ( { $($tt:tt)* } ) => { $[0m[1m[31mcrate[0m::__quote!(@SUBTREE Brace $($tt)*) };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m81[0m:[0m30[0m:    ( [ $($tt:tt)* ] ) => { $[0m[1m[31mcrate[0m::__quote!(@SUBTREE Bracket $($tt)*) };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m83[0m:[0m30[0m:    ( ( $($tt:tt)* ) ) => { $[0m[1m[31mcrate[0m::__quote!(@SUBTREE Parenthesis $($tt)*) };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m86[0m:[0m32[0m:    ( $tt:literal ) => { vec![$[0m[1m[31mcrate[0m::quote::ToTokenTree::to_token($tt).into()] };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m90[0m:[0m13[0m:            [0m[1m[31mcrate[0m::tt::Leaf::Ident([0m[1m[31mcrate[0m::tt::Ident {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m92[0m:[0m23[0m:                span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m99[0m:[0m17[0m:    ( -> ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '-', '>')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m100[0m:[0m16[0m:    ( & ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '&')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m101[0m:[0m16[0m:    ( , ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT ',')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m102[0m:[0m16[0m:    ( : ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT ':')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m103[0m:[0m16[0m:    ( ; ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT ';')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m104[0m:[0m17[0m:    ( :: ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT ':', ':')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m105[0m:[0m16[0m:    ( . ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '.')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m106[0m:[0m16[0m:    ( < ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '<')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m107[0m:[0m16[0m:    ( > ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '>')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m108[0m:[0m16[0m:    ( ! ) => {$[0m[1m[31mcrate[0m::__quote!(@PUNCT '!')};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m112[0m:[0m31[0m:            let mut tokens = $[0m[1m[31mcrate[0m::quote::IntoTt::to_tokens($[0m[1m[31mcrate[0m::__quote!($first));
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m113[0m:[0m36[0m:            let mut tail_tokens = $[0m[1m[31mcrate[0m::quote::IntoTt::to_tokens($[0m[1m[31mcrate[0m::__quote!($($tail)*));
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m126[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::quote::IntoTt::to_subtree($[0m[1m[31mcrate[0m::__quote!($($tt)*))
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m130[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait IntoTt {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m131[0m:[0m28[0m:    fn to_subtree(self) -> [0m[1m[31mcrate[0m::tt::Subtree;
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m132[0m:[0m31[0m:    fn to_tokens(self) -> Vec<[0m[1m[31mcrate[0m::tt::TokenTree>;
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m135[0m:[0m21[0m:impl IntoTt for Vec<[0m[1m[31mcrate[0m::tt::TokenTree> {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m136[0m:[0m28[0m:    fn to_subtree(self) -> [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m137[0m:[0m9[0m:        [0m[1m[31mcrate[0m::tt::Subtree { delimiter: [0m[1m[31mcrate[0m::tt::Delimiter::unspecified(), token_trees: self }
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m140[0m:[0m31[0m:    fn to_tokens(self) -> Vec<[0m[1m[31mcrate[0m::tt::TokenTree> {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m145[0m:[0m17[0m:impl IntoTt for [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m146[0m:[0m28[0m:    fn to_subtree(self) -> [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m150[0m:[0m31[0m:    fn to_tokens(self) -> Vec<[0m[1m[31mcrate[0m::tt::TokenTree> {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m151[0m:[0m14[0m:        vec![[0m[1m[31mcrate[0m::tt::TokenTree::Subtree(self)]
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m155[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait ToTokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m156[0m:[0m26[0m:    fn to_token(self) -> [0m[1m[31mcrate[0m::tt::TokenTree;
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m159[0m:[0m22[0m:impl ToTokenTree for [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m160[0m:[0m26[0m:    fn to_token(self) -> [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m165[0m:[0m23[0m:impl ToTokenTree for &[0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m166[0m:[0m26[0m:    fn to_token(self) -> [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m171[0m:[0m22[0m:impl ToTokenTree for [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m172[0m:[0m26[0m:    fn to_token(self) -> [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m181[0m:[0m39[0m:                fn to_token($this) -> [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m182[0m:[0m31[0m:                    let leaf: [0m[1m[31mcrate[0m::tt::Leaf = $im.into();
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m188[0m:[0m39[0m:                fn to_token($this) -> [0m[1m[31mcrate[0m::tt::TokenTree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m189[0m:[0m31[0m:                    let leaf: [0m[1m[31mcrate[0m::tt::Leaf = $im.clone().into();
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m198[0m:[0m19[0m:    u32 => self { [0m[1m[31mcrate[0m::tt::Literal{text: self.to_string().into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()} };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m199[0m:[0m21[0m:    usize => self { [0m[1m[31mcrate[0m::tt::Literal{text: self.to_string().into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()} };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m200[0m:[0m19[0m:    i32 => self { [0m[1m[31mcrate[0m::tt::Literal{text: self.to_string().into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()} };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m201[0m:[0m20[0m:    bool => self { [0m[1m[31mcrate[0m::tt::Ident{text: self.to_string().into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()} };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m202[0m:[0m5[0m:    [0m[1m[31mcrate[0m::tt::Leaf => self { self };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m203[0m:[0m5[0m:    [0m[1m[31mcrate[0m::tt::Literal => self { self };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m204[0m:[0m5[0m:    [0m[1m[31mcrate[0m::tt::Ident => self { self };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m205[0m:[0m5[0m:    [0m[1m[31mcrate[0m::tt::Punct => self { self };
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m206[0m:[0m20[0m:    &str => self { [0m[1m[31mcrate[0m::tt::Literal{text: format!("\"{}\"", self.escape_default()).into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()}};
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m207[0m:[0m22[0m:    String => self { [0m[1m[31mcrate[0m::tt::Literal{text: format!("\"{}\"", self.escape_default()).into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified()}}
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m233[0m:[0m32[0m:    fn mk_ident(name: &str) -> [0m[1m[31mcrate[0m::tt::Ident {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m234[0m:[0m9[0m:        [0m[1m[31mcrate[0m::tt::Ident { text: name.into(), span: [0m[1m[31mcrate[0m::tt::TokenId::unspecified() }
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m273[0m:[0m20[0m:        let list = [0m[1m[31mcrate[0m::tt::Subtree {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m274[0m:[0m24[0m:            delimiter: [0m[1m[31mcrate[0m::tt::Delimiter {
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m275[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::tt::DelimiterKind::Brace,
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m276[0m:[0m23[0m:                open: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/hir-expand/src/quote.rs[0m:[0m[32m277[0m:[0m24[0m:                close: [0m[1m[31mcrate[0m::tt::TokenId::unspecified(),
[0m[35mcrates/ide-completion/src/render/pattern.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/pattern.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_struct_pat(
[0m[35mcrates/ide-completion/src/render/pattern.rs[0m:[0m[32m45[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_variant_pat(
[0m[35mcrates/ide-completion/src/completions/pattern.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/pattern.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_pattern(
[0m[35mcrates/ide-completion/src/completions/pattern.rs[0m:[0m[32m108[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_pattern_path(
[0m[35mcrates/ide-completion/src/completions/pattern.rs[0m:[0m[32m164[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/ide-completion/src/tests/proc_macros.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::completion_list;
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m296[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn tag(self) -> &'static str {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m339[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m390[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m410[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_resolution(
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m425[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn build(self, db: &RootDatabase) -> CompletionItem {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m495[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lookup_by(&mut self, lookup: impl Into<SmolStr>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m499[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn label(&mut self, label: impl Into<SmolStr>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m503[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_name(&mut self, trait_name: SmolStr) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m507[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn doc_aliases(&mut self, doc_aliases: Vec<SmolStr>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m511[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert_text(&mut self, insert_text: impl Into<String>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m515[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert_snippet(
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m524[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn text_edit(&mut self, edit: TextEdit) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m528[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn snippet_edit(&mut self, _cap: SnippetCap, edit: TextEdit) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m532[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn detail(&mut self, detail: impl Into<String>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m535[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_detail(&mut self, detail: Option<impl Into<String>>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m545[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn documentation(&mut self, docs: Documentation) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m548[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_documentation(&mut self, docs: Option<Documentation>) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m552[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_deprecated(&mut self, deprecated: bool) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m556[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_relevance(&mut self, relevance: CompletionRelevance) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m560[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trigger_call_info(&mut self) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m564[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_import(&mut self, import_to_add: LocatedImport) -> &mut Builder {
[0m[35mcrates/ide-completion/src/item.rs[0m:[0m[32m568[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn ref_match(&mut self, mutability: Mutability, offset: TextSize) -> &mut Builder {
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{completion_list, completion_list_with_trigger_character};
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m25[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m39[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m51[0m:[0m12[0m:    pub(in [0m[1m[31mcrate[0m::$0)
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m64[0m:[0m16[0m:        pub(in [0m[1m[31mcrate[0m::$0)
[0m[35mcrates/ide-completion/src/tests/visibility.rs[0m:[0m[32m79[0m:[0m16[0m:        pub(in [0m[1m[31mcrate[0m::qux::$0)
[0m[35mcrates/ide-completion/src/render/union_literal.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/union_literal.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_union_literal(
[0m[35mcrates/ide-completion/src/render/type_alias.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{item::CompletionItem, render::RenderContext};
[0m[35mcrates/ide-completion/src/render/type_alias.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_type_alias(
[0m[35mcrates/ide-completion/src/render/type_alias.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_type_alias_with_eq(
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::completion_list;
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m16[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m25[0m:[0m12[0m://- /other_[0m[1m[31mcrate[0m/lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m31[0m:[0m22[0m:            md other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m32[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m40[0m:[0m31[0m:    cov_mark::check!(use_tree_[0m[1m[31mcrate[0m_roots_only);
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m43[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m48[0m:[0m12[0m://- /other_[0m[1m[31mcrate[0m/lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m52[0m:[0m22[0m:            md other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m241[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_qualified_use_tree() {
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m244[0m:[0m5[0m:use [0m[1m[31mcrate[0m::$0
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m257[0m:[0m11[0m:fn extern_[0m[1m[31mcrate[0m_qualified_use_tree() {
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m260[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m261[0m:[0m11[0m:use other_[0m[1m[31mcrate[0m::$0
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m262[0m:[0m12[0m://- /other_[0m[1m[31mcrate[0m/lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m283[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m308[0m:[0m34[0m:    // Not suggest super when at [0m[1m[31mcrate[0m root
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m329[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m364[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m390[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m392[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m412[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/use_tree.rs[0m:[0m[32m414[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m45[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m58[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_trait_impl_const(
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m66[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_trait_impl_type_alias(
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m74[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_trait_impl_fn(
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m121[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_trait_impl_item_by_name(
[0m[35mcrates/ide-completion/src/completions/item_list/trait_impl.rs[0m:[0m[32m399[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list_no_kw};
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m45[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m87[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m139[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m216[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m261[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m308[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m335[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m374[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m408[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m443[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m474[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m501[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m691[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m754[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m794[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m833[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m857[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m882[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m922[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m962[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1000[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1005[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1014[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1051[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1056[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/expression.rs[0m:[0m[32m1066[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/fn_param.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{completion_list, completion_list_with_trigger_character};
[0m[35mcrates/ide-completion/src/tests/fn_param.rs[0m:[0m[32m92[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait SourceRoot {
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m18[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m25[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m51[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m58[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m83[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m90[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m110[0m:[0m12[0m:        r#"[0m[1m[31mcrate[0m::$0"#,
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m170[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m173[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m189[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m192[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m208[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m225[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m242[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m259[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m294[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m318[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m346[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m360[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item_list.rs[0m:[0m[32m367[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_with_trigger_character(
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m76[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m79[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m98[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m101[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m104[0m:[0m17[0m:        pub use [0m[1m[31mcrate[0m::concat;
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m127[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core,std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m130[0m:[0m18[0m://- /core/lib.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m137[0m:[0m17[0m://- /std/lib.rs [0m[1m[31mcrate[0m:std deps:core
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m157[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m162[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m185[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m191[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m212[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m224[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m396[0m:[0m21[0m:fn main() { let _ = [0m[1m[31mcrate[0m::$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m566[0m:[0m57[0m:fn completes_non_exhaustive_variant_within_the_defining_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m587[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m592[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m610[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:core
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m615[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m654[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m659[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m944[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m::$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m954[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m:$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m965[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m::$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m975[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m:$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m986[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m:::$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m992[0m:[0m10[0m:fn foo { [0m[1m[31mcrate[0m::::$0 }
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m1014[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m1063[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m1183[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m1272[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/special.rs[0m:[0m[32m1313[0m:[0m35[0m:    const FULL_SIGNATURES_CONFIG: [0m[1m[31mcrate[0m::CompletionConfig = {
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_edit, check_empty, completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m410[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m425[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m745[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m750[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m771[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/pattern.rs[0m:[0m[32m776[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/render/const_.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{item::CompletionItem, render::RenderContext};
[0m[35mcrates/ide-completion/src/render/const_.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_empty, completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m29[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m45[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m63[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m79[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m102[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m127[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m137[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m140[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m146[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m157[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m160[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/predicate.rs[0m:[0m[32m167[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/record.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::completion_list;
[0m[35mcrates/ide-completion/src/tests/record.rs[0m:[0m[32m193[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_empty, completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m32[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m57[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m59[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m83[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m113[0m:[0m12[0m:        kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m138[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m164[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m192[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m217[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m243[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m277[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m306[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m332[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m399[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m449[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m494[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m519[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m562[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m589[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m632[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m657[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m673[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m683[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m688[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m697[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m708[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m713[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m723[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m752[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m772[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m798[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m815[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m842[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m859[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m877[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m896[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m914[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m930[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m948[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m962[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m975[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/type_pos.rs[0m:[0m[32m987[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/render/function.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/function.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_fn(
[0m[35mcrates/ide-completion/src/render/function.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_method(
[0m[35mcrates/ide-completion/src/render/function.rs[0m:[0m[32m336[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::context::CompletionContext;
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m4[0m:[0m41[0m:use hir::{db::HirDatabase, HasAttrs, Has[0m[1m[31mCrate[0m, HasVisibility, HirDisplay, StructKind};
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct RenderedLiteral {
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m13[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) literal: String,
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m14[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) detail: String,
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_record_lit(
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m48[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_tuple_lit(
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m76[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn visible_fields(
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m79[0m:[0m30[0m:    item: impl HasAttrs + Has[0m[1m[31mCrate[0m + Copy,
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m96[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn format_literal_label(
[0m[35mcrates/ide-completion/src/render/variant.rs[0m:[0m[32m112[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn format_literal_lookup(name: &str, kind: StructKind) -> SmolStr {
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_macro(
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_macro_pat(
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m140[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_edit;
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m148[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-completion/src/render/macro_.rs[0m:[0m[32m150[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/proc-macro-srv/src/lib.rs[0m:[0m[32m18[0m:[0m8[0m:extern [0m[1m[31mcrate[0m proc_macro;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m10[0m:[0m26[0m:    let (db, position) = [0m[1m[31mcrate[0m::tests::position(ra_fixture);
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m11[0m:[0m27[0m:    let (ctx, analysis) = [0m[1m[31mcrate[0m::context::CompletionContext::new(&db, position, &config).unwrap();
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m13[0m:[0m19[0m:    let mut acc = [0m[1m[31mcrate[0m::completions::Completions::default();
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m17[0m:[0m9[0m:        [0m[1m[31mcrate[0m::completions::flyimport::import_on_the_fly_pat(&mut acc, &ctx, pat_ctx);
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m22[0m:[0m17[0m:                [0m[1m[31mcrate[0m::completions::flyimport::import_on_the_fly_path(&mut acc, &ctx, path);
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m25[0m:[0m17[0m:                [0m[1m[31mcrate[0m::completions::flyimport::import_on_the_fly_dot(&mut acc, &ctx, dot_access);
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m28[0m:[0m17[0m:                [0m[1m[31mcrate[0m::completions::flyimport::import_on_the_fly_pat(&mut acc, &ctx, pattern);
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m42[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m47[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m67[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m74[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m94[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m101[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m124[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m134[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m151[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m166[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m184[0m:[0m21[0m:        //- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m201[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m230[0m:[0m21[0m:        //- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m247[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m276[0m:[0m21[0m:        //- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m293[0m:[0m22[0m:        //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m324[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m336[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m366[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m383[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m396[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m413[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m427[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m444[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m459[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m470[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m489[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m507[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m520[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m538[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m554[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m559[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m577[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m584[0m:[0m56[0m:    config.insert_use.prefix_kind = hir::PrefixKind::By[0m[1m[31mCrate[0m;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m596[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar::{self, Item};
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m615[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m638[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m986[0m:[0m22[0m:    fn test(db: &dyn [0m[1m[31mcrate[0m::baz::HirDatabase) {
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1005[0m:[0m23[0m:    fn test(db: &impl [0m[1m[31mcrate[0m::baz::HirDatabase) {
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1024[0m:[0m16[0m:    fn test<T: [0m[1m[31mcrate[0m::baz::HirDatabase>(db: T) {
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1037[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1042[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1054[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1059[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1085[0m:[0m32[0m:                st Struct (use [0m[1m[31mcrate[0m::Struct)
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1114[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1118[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1131[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1135[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1253[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1255[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1273[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1275[0m:[0m8[0m:extern [0m[1m[31mcrate[0m dep;
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1280[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1294[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1298[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1317[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-completion/src/tests/flyimport.rs[0m:[0m[32m1321[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-completion/src/tests/item.rs[0m:[0m[32m4[0m:[0m9[0m://! in [[0m[1m[31mcrate[0m::completions::mod_].
[0m[35mcrates/ide-completion/src/tests/item.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{completion_list, BASE_ITEMS_FIXTURE};
[0m[35mcrates/ide-completion/src/tests/item.rs[0m:[0m[32m30[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item.rs[0m:[0m[32m52[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/item.rs[0m:[0m[32m150[0m:[0m20[0m:            kw pub([0m[1m[31mcrate[0m)
[0m[35mcrates/ide-completion/src/render/literal.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/render/literal.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_variant_lit(
[0m[35mcrates/ide-completion/src/render/literal.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_struct_literal(
[0m[35mcrates/ide-completion/src/config.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::snippet::Snippet;
[0m[35mcrates/ide-completion/src/context/tests.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/stdx/Cargo.toml[0m:[0m[32m27[0m:[0m37[0m:# Uncomment to enable for the whole [0m[1m[31mcrate[0m graph
[0m[35mcrates/ide-completion/src/snippet.rs[0m:[0m[32m3[0m:[0m38[0m://! Actual logic is implemented in [`[0m[1m[31mcrate[0m::completions::postfix`] and [`[0m[1m[31mcrate[0m::completions::snippet`] respectively.
[0m[35mcrates/ide-completion/src/snippet.rs[0m:[0m[32m41[0m:[0m93[0m:// * `requires` is an optional list of item paths that have to be resolvable in the current [0m[1m[31mcrate[0m where the completion is rendered.
[0m[35mcrates/ide-completion/src/snippet.rs[0m:[0m[32m107[0m:[0m5[0m:use [0m[1m[31mcrate[0m::context::CompletionContext;
[0m[35mcrates/ide-completion/src/snippet.rs[0m:[0m[32m157[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn imports(&self, ctx: &CompletionContext<'_>) -> Option<Vec<LocatedImport>> {
[0m[35mcrates/mbe/src/lib.rs[0m:[0m[32m1[0m:[0m40[0m://! `mbe` (short for Macro By Example) [0m[1m[31mcrate[0m contains code for handling
[0m[35mcrates/mbe/src/lib.rs[0m:[0m[32m6[0m:[0m52[0m://! The tes for this functionality live in another [0m[1m[31mcrate[0m:
[0m[35mcrates/mbe/src/lib.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/mbe/src/lib.rs[0m:[0m[32m34[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/mbe/src/lib.rs[0m:[0m[32m350[0m:[0m12[0m:        Ok([0m[1m[31mcrate[0m::Rule { lhs, rhs })
[0m[35mcrates/ide-completion/src/completions/type.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-completion/src/completions/type.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_type_path(
[0m[35mcrates/ide-completion/src/completions/type.rs[0m:[0m[32m138[0m:[0m40[0m:        Qualified::Absolute => acc.add_[0m[1m[31mcrate[0m_roots(ctx, path_ctx),
[0m[35mcrates/ide-completion/src/completions/type.rs[0m:[0m[32m200[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn complete_ascribed_type(
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::{check_edit, completion_list};
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m36[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m80[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m94[0m:[0m16[0m:            at [0m[1m[31mcrate[0m_name = ""
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m111[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m136[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m157[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m183[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m206[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m213[0m:[0m19[0m:fn attr_on_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m215[0m:[0m25[0m:        r#"#[$0] extern [0m[1m[31mcrate[0m foo;"#,
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m230[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m253[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m276[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m309[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m335[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m358[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m386[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m410[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m434[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m453[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m477[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m497[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m515[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m553[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m600[0m:[0m16[0m:            kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m713[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m734[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m755[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m775[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m793[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/ide-completion/src/tests/attribute.rs[0m:[0m[32m808[0m:[0m20[0m:                kw [0m[1m[31mcrate[0m::
[0m[35mcrates/vfs-notify/src/lib.rs[0m:[0m[32m7[0m:[0m57[0m://! Hopefully, one day a reliable file watching/walking [0m[1m[31mcrate[0m appears on
[0m[35mcrates/vfs-notify/src/lib.rs[0m:[0m[32m8[0m:[0m5[0m://! [0m[1m[31mcrate[0ms.io, and we can reduce this to trivial glue code.
[0m[35mcrates/stdx/src/thread/pool.rs[0m:[0m[32m2[0m:[0m35[0m://! inspired by the [`threadpool` [0m[1m[31mcrate[0m](http://docs.rs/threadpool).
[0m[35mcrates/stdx/src/thread/pool.rs[0m:[0m[32m8[0m:[0m34[0m://! the threading utilities in [`[0m[1m[31mcrate[0m::thread`].
[0m[35mcrates/ide-db/src/use_trivial_constructor.rs[0m:[0m[32m8[0m:[0m10[0m:    db: &[0m[1m[31mcrate[0m::RootDatabase,
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m82[0m:[0m14[0m:/// For `pub([0m[1m[31mcrate[0m)` things it's a [0m[1m[31mcrate[0m, for `pub` things it's a [0m[1m[31mcrate[0m and dependant [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m95[0m:[0m50[0m:    /// Build a search scope spanning the entire [0m[1m[31mcrate[0m graph of files.
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m96[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_graph(db: &RootDatabase) -> SearchScope {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m99[0m:[0m24[0m:        let graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m109[0m:[0m81[0m:    /// Build a search scope spanning all the reverse dependencies of the given [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m110[0m:[0m57[0m:    fn reverse_dependencies(db: &RootDatabase, of: hir::[0m[1m[31mCrate[0m) -> SearchScope {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m121[0m:[0m49[0m:    /// Build a search scope spanning the given [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m122[0m:[0m42[0m:    fn krate(db: &RootDatabase, of: hir::[0m[1m[31mCrate[0m) -> SearchScope {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m220[0m:[0m33[0m:            return SearchScope::[0m[1m[31mcrate[0m_graph(db);
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m223[0m:[0m19[0m:        // def is [0m[1m[31mcrate[0m root
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m225[0m:[0m26[0m:            if module.is_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m285[0m:[0m57[0m:                hir::MacroKind::BuiltIn => SearchScope::[0m[1m[31mcrate[0m_graph(db),
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m393[0m:[0m29[0m:            // special case [0m[1m[31mcrate[0m modules as these do not have a proper name
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m394[0m:[0m53[0m:            Definition::Module(module) if module.is_[0m[1m[31mcrate[0m_root() => {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m395[0m:[0m44[0m:                // FIXME: This assumes the [0m[1m[31mcrate[0m name is always equal to its display name when it
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m402[0m:[0m27[0m:                    .map(|[0m[1m[31mcrate[0m_name| [0m[1m[31mcrate[0m_name.[0m[1m[31mcrate[0m_name().as_smol_str().clone())
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m501[0m:[0m36[0m:        // Search for `super` and `[0m[1m[31mcrate[0m` resolving to our module
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m506[0m:[0m20[0m:            let is_[0m[1m[31mcrate[0m_root = module.is_[0m[1m[31mcrate[0m_root().then(|| Finder::new("[0m[1m[31mcrate[0m"));
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m522[0m:[0m43[0m:                if let Some(finder) = &is_[0m[1m[31mcrate[0m_root {
[0m[35mcrates/ide-db/src/search.rs[0m:[0m[32m525[0m:[0m41[0m:                            find_nodes("[0m[1m[31mcrate[0m", &tree, offset).filter_map(ast::NameRef::cast)
[0m[35mcrates/ide-db/src/rust_doc.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::documentation::Documentation;
[0m[35mcrates/ide-db/src/active_parameter.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m6[0m:[0m36[0m:use hir::{import_map, AsAssocItem, [0m[1m[31mCrate[0m, ItemInNs, Semantics};
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{imports::import_assets::NameToImport, symbol_index, RootDatabase};
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m16[0m:[0m62[0m:/// Searches for importable items with the given name in the [0m[1m[31mcrate[0m and its dependencies.
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m19[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m26[0m:[0m24[0m:            "Name: {}, [0m[1m[31mcrate[0m: {:?}, assoc items: {:?}, limit: {:?}",
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m72[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m90[0m:[0m24[0m:    // Query the local [0m[1m[31mcrate[0m using the symbol index.
[0m[35mcrates/ide-db/src/items_locator.rs[0m:[0m[32m92[0m:[0m32[0m:        .search(&symbol_index::[0m[1m[31mcrate[0m_symbols(db, krate))
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m5[0m:[0m65[0m://! symbols. The backbone of the index is the **awesome** `fst` [0m[1m[31mcrate[0m by
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m38[0m:[0m5[0m:    [0m[1m[31mCrate[0m, Module,
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m44[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m102[0m:[0m60[0m:    /// The symbol indices of modules that make up a given [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m103[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_symbols(&self, krate: [0m[1m[31mCrate[0m) -> Box<[Arc<SymbolIndex>]>;
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m110[0m:[0m30[0m:    /// The set of roots for [0m[1m[31mcrate[0ms.io libraries.
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m121[0m:[0m20[0m:    db.source_root_[0m[1m[31mcrate[0ms(source_root_id)
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m123[0m:[0m28[0m:        .flat_map(|&krate| [0m[1m[31mCrate[0m::from(krate).modules(db.upcast()))
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m126[0m:[0m26[0m:        // the module or [0m[1m[31mcrate[0m indices for those in salsa unless we need to.
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m141[0m:[0m8[0m:pub fn [0m[1m[31mcrate[0m_symbols(db: &dyn SymbolsDatabase, krate: [0m[1m[31mCrate[0m) -> Box<[Arc<SymbolIndex>]> {
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m142[0m:[0m29[0m:    let _p = profile::span("[0m[1m[31mcrate[0m_symbols");
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m201[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0ms = Vec::new();
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m204[0m:[0m13[0m:            [0m[1m[31mcrate[0ms.extend(db.source_root_[0m[1m[31mcrate[0ms(root).iter().copied())
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m206[0m:[0m31[0m:        let indices: Vec<_> = [0m[1m[31mcrate[0ms
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m208[0m:[0m57[0m:            .map_with(Snap::new(db), |snap, krate| snap.[0m[1m[31mcrate[0m_symbols(krate.into()))
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m305[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn search(self, indices: &[Arc<SymbolIndex>]) -> Vec<FileSymbol> {
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m429[0m:[0m5[0m:use [0m[1m[31mcrate[0m::b_mod::StructInModB as ThisStruct;
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m430[0m:[0m5[0m:use [0m[1m[31mcrate[0m::Trait as IsThisJustATrait;
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m434[0m:[0m31[0m:        let symbols: Vec<_> = [0m[1m[31mCrate[0m::from(db.test_[0m[1m[31mcrate[0m())
[0m[35mcrates/ide-db/src/symbol_index.rs[0m:[0m[32m461[0m:[0m31[0m:        let symbols: Vec<_> = [0m[1m[31mCrate[0m::from(db.test_[0m[1m[31mcrate[0m())
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m227[0m:[0m29[0m:impl HasDocs for hir::Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m229[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_docs =
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m230[0m:[0m44[0m:            docs_from_attrs(&self.resolved_[0m[1m[31mcrate[0m(db)?.root_module().attrs(db)).map(String::from);
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m232[0m:[0m27[0m:        match (decl_docs, [0m[1m[31mcrate[0m_docs) {
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m235[0m:[0m25[0m:            (None, Some([0m[1m[31mcrate[0m_docs)) => Some([0m[1m[31mcrate[0m_docs),
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m236[0m:[0m40[0m:            (Some(mut decl_docs), Some([0m[1m[31mcrate[0m_docs)) => {
[0m[35mcrates/ide-db/src/documentation.rs[0m:[0m[32m239[0m:[0m31[0m:                decl_docs += &[0m[1m[31mcrate[0m_docs;
[0m[35mcrates/ide-completion/src/context/analysis.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::context::{
[0m[35mcrates/ide-completion/src/context/analysis.rs[0m:[0m[32m627[0m:[0m24[0m:            ast::Extern[0m[1m[31mCrate[0m(_) => {
[0m[35mcrates/ide-completion/src/context/analysis.rs[0m:[0m[32m628[0m:[0m47[0m:                let kind = NameRefKind::Extern[0m[1m[31mCrate[0m;
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m6[0m:[0m11[0m:use hir::{[0m[1m[31mCrate[0m, ItemInNs, ModuleDef, Name, Semantics};
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m46[0m:[0m30[0m:        hir::PathKind::Dollar[0m[1m[31mCrate[0m(_) | hir::PathKind::[0m[1m[31mCrate[0m => {
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m47[0m:[0m46[0m:            segments.push(make::path_segment_[0m[1m[31mcrate[0m())
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m83[0m:[0m29[0m:    let is_root = module.is_[0m[1m[31mcrate[0m_root();
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m87[0m:[0m53[0m:        // don't show legacy macros declared in the [0m[1m[31mcrate[0m-root that were already covered in declarations earlier
[0m[35mcrates/ide-db/src/helpers.rs[0m:[0m[32m110[0m:[0m20[0m:pub fn is_editable_[0m[1m[31mcrate[0m(krate: [0m[1m[31mCrate[0m, db: &RootDatabase) -> bool {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m10[0m:[0m67[0m:    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, [0m[1m[31mCrate[0m, DeriveHelper, DocLinkDef,
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m11[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mDecl, Field, Function, GenericParam, HasVisibility, Impl, Label, Local, Macro,
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m45[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mDecl(Extern[0m[1m[31mCrate[0mDecl),
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m53[0m:[0m54[0m:    pub fn krate(&self, db: &RootDatabase) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m77[0m:[0m31[0m:            Definition::Extern[0m[1m[31mCrate[0mDecl(it) => it.module(db),
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m98[0m:[0m31[0m:            Definition::Extern[0m[1m[31mCrate[0mDecl(it) => it.visibility(db),
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m133[0m:[0m31[0m:            Definition::Extern[0m[1m[31mCrate[0mDecl(it) => return it.alias_or_name(db),
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m203[0m:[0m58[0m:            IdentClass::NameRefClass(NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, krate }) => {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m204[0m:[0m44[0m:                res.push(Definition::Extern[0m[1m[31mCrate[0mDecl(decl));
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m233[0m:[0m58[0m:            IdentClass::NameRefClass(NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { decl, krate }) => {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m234[0m:[0m44[0m:                res.push(Definition::Extern[0m[1m[31mCrate[0mDecl(decl));
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m325[0m:[0m34[0m:                ast::Item::Extern[0m[1m[31mCrate[0m(it) => Definition::Extern[0m[1m[31mCrate[0mDecl(sema.to_def(&it)?),
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m362[0m:[0m75[0m:                sema.to_def(&rename.syntax().parent().and_then(ast::Extern[0m[1m[31mCrate[0m::cast)?)
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m363[0m:[0m44[0m:                    .map(Definition::Extern[0m[1m[31mCrate[0mDecl)
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m445[0m:[0m56[0m:    /// The specific situation where we have an extern [0m[1m[31mcrate[0m decl without a rename
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m448[0m:[0m16[0m:    /// extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m450[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0mShorthand {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m451[0m:[0m21[0m:        decl: Extern[0m[1m[31mCrate[0mDecl,
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m452[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m539[0m:[0m28[0m:                ast::Extern[0m[1m[31mCrate[0m(extern_[0m[1m[31mcrate[0m_ast) => {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m540[0m:[0m32[0m:                    let extern_[0m[1m[31mcrate[0m = sema.to_def(&extern_[0m[1m[31mcrate[0m_ast)?;
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m541[0m:[0m40[0m:                    let krate = extern_[0m[1m[31mcrate[0m.resolved_[0m[1m[31mcrate[0m(sema.db)?;
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m542[0m:[0m36[0m:                    Some(if extern_[0m[1m[31mcrate[0m_ast.rename().is_some() {
[0m[35mcrates/ide-db/src/defs.rs[0m:[0m[32m545[0m:[0m45[0m:                        NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { krate, decl: extern_[0m[1m[31mcrate[0m }
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{defs::Definition, RootDatabase};
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m75[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_to_def_in_trait(db: &dyn HirDatabase, def: Definition) -> Definition {
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m85[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn as_trait_assoc_def(db: &dyn HirDatabase, def: Definition) -> Option<Definition> {
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m121[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m124[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m140[0m:[0m22[0m:        let trait_ = [0m[1m[31mcrate[0m::traits::resolve_target_trait(&sema, &impl_block);
[0m[35mcrates/ide-db/src/traits.rs[0m:[0m[32m154[0m:[0m21[0m:        let items = [0m[1m[31mcrate[0m::traits::get_missing_assoc_items(&sema, &impl_block);
[0m[35mcrates/ide-db/src/assists.rs[0m:[0m[32m2[0m:[0m34[0m://! the `ide_assists` downstream [0m[1m[31mcrate[0m. We want to define the data structures in
[0m[35mcrates/ide-db/src/assists.rs[0m:[0m[32m3[0m:[0m20[0m://! this low-level [0m[1m[31mcrate[0m though, because `ide_diagnostics` also need them
[0m[35mcrates/ide-db/src/assists.rs[0m:[0m[32m6[0m:[0m54[0m://! we pull the common definitions upstream, to this [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-db/src/assists.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{label::Label, source_change::SourceChange};
[0m[35mcrates/ide-db/src/source_change.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::SnippetCap;
[0m[35mcrates/ide-db/src/imports/merge_imports.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::syntax_helpers::node_ext::vis_eq;
[0m[35mcrates/ide-db/src/imports/merge_imports.rs[0m:[0m[32m15[0m:[0m37[0m:    /// Merge imports from the same [0m[1m[31mcrate[0m into a single use statement.
[0m[35mcrates/ide-db/src/imports/merge_imports.rs[0m:[0m[32m16[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/merge_imports.rs[0m:[0m[32m24[0m:[0m28[0m:            MergeBehavior::[0m[1m[31mCrate[0m => true,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m31[0m:[0m37[0m:    /// Merge imports from the same [0m[1m[31mcrate[0m into a single use statement.
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m32[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m162[0m:[0m28[0m:        ImportGranularity::[0m[1m[31mCrate[0m => Some(MergeBehavior::[0m[1m[31mCrate[0m),
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m173[0m:[0m37[0m:            ImportGranularityGuess::[0m[1m[31mCrate[0m => Some(MergeBehavior::[0m[1m[31mCrate[0m),
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m174[0m:[0m37[0m:            ImportGranularityGuess::[0m[1m[31mCrate[0mOrModule => mb.or(Some(MergeBehavior::[0m[1m[31mCrate[0m)),
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m223[0m:[0m11[0m:    Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m224[0m:[0m9[0m:    This[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m231[0m:[0m42[0m:        let default = ImportGroup::Extern[0m[1m[31mCrate[0m;
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m242[0m:[0m30[0m:            PathSegmentKind::[0m[1m[31mCrate[0mKw => ImportGroup::This[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m246[0m:[0m41[0m:                _ => ImportGroup::Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m249[0m:[0m63[0m:            PathSegmentKind::SelfTypeKw => ImportGroup::Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m250[0m:[0m64[0m:            PathSegmentKind::Type { .. } => ImportGroup::Extern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m261[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m262[0m:[0m5[0m:    [0m[1m[31mCrate[0mOrModule,
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m289[0m:[0m56[0m:                // Nested tree lists can only occur in [0m[1m[31mcrate[0m style, or with no proper style being enforced in the file.
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m290[0m:[0m47[0m:                break ImportGranularityGuess::[0m[1m[31mCrate[0m;
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m292[0m:[0m35[0m:                // Could still be [0m[1m[31mcrate[0m-style so continue looking.
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m293[0m:[0m47[0m:                res = ImportGranularityGuess::[0m[1m[31mCrate[0mOrModule;
[0m[35mcrates/ide-db/src/imports/insert_use.rs[0m:[0m[32m317[0m:[0m37[0m:                        // can't be [0m[1m[31mcrate[0m style since the trees wouldn't share a prefix then.
[0m[35mcrates/ide-db/src/ty_filter.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/syntax_helpers/node_ext.rs[0m:[0m[32m211[0m:[0m39[0m:                    (PathSegmentKind::[0m[1m[31mCrate[0mKw, PathSegmentKind::[0m[1m[31mCrate[0mKw)
[0m[35mcrates/ide-db/src/syntax_helpers/node_ext.rs[0m:[0m[32m223[0m:[0m31[0m:        | (VisibilityKind::Pub[0m[1m[31mCrate[0m, VisibilityKind::Pub[0m[1m[31mCrate[0m)
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m3[0m:[0m87[0m://! <https://github.com/rust-lang/cargo/blob/905af549966f23a9288e9993a85d1249a5436556/[0m[1m[31mcrate[0ms/cargo-util/src/read2.rs>
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m4[0m:[0m87[0m://! <https://github.com/rust-lang/cargo/blob/58a961314437258065e23cb6316dfc121d96fb71/[0m[1m[31mcrate[0ms/cargo-util/src/process_builder.rs#L231>
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::JodChild;
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn read2(
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m169[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn read2(
[0m[35mcrates/stdx/src/process.rs[0m:[0m[32m260[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn read2(
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m3[0m:[0m49[0m:    AsAssocItem, AssocItem, AssocItemContainer, [0m[1m[31mCrate[0m, ItemInNs, ModPath, Module, ModuleDef,
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m300[0m:[0m13[0m:    current_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m310[0m:[0m25[0m:                current_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m335[0m:[0m25[0m:                current_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m467[0m:[0m13[0m:    current_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/import_assets.rs[0m:[0m[32m484[0m:[0m17[0m:        current_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{symbol_index::SymbolsDatabase, RootDatabase};
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m89[0m:[0m22[0m:            base_db::[0m[1m[31mCrate[0mGraphQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m96[0m:[0m32[0m:            base_db::SourceRoot[0m[1m[31mCrate[0msQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m110[0m:[0m22[0m:            hir::db::[0m[1m[31mCrate[0mDefMapQueryQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m139[0m:[0m22[0m:            hir::db::[0m[1m[31mCrate[0mLangItemsQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m145[0m:[0m22[0m:            hir::db::[0m[1m[31mCrate[0mSupportsNoStdQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m167[0m:[0m37[0m:            hir::db::InherentImplsIn[0m[1m[31mCrate[0mQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m169[0m:[0m44[0m:            hir::db::IncoherentInherentImpl[0m[1m[31mCrate[0msQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m170[0m:[0m34[0m:            hir::db::TraitImplsIn[0m[1m[31mCrate[0mQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m191[0m:[0m13[0m:            [0m[1m[31mcrate[0m::symbol_index::ModuleSymbolsQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m192[0m:[0m13[0m:            [0m[1m[31mcrate[0m::symbol_index::LibrarySymbolsQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m193[0m:[0m13[0m:            [0m[1m[31mcrate[0m::symbol_index::LocalRootsQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m194[0m:[0m13[0m:            [0m[1m[31mcrate[0m::symbol_index::LibraryRootsQuery
[0m[35mcrates/ide-db/src/apply_change.rs[0m:[0m[32m197[0m:[0m13[0m:            [0m[1m[31mcrate[0m::LineIndexQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m1[0m:[0m10[0m://! This [0m[1m[31mcrate[0m defines the core datastructure representing IDE state -- `RootDatabase`.
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m50[0m:[0m19[0m:    AnchoredPath, [0m[1m[31mCrate[0mId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m55[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{line_index::LineIndex, symbol_index::SymbolsDatabase};
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m81[0m:[0m52[0m:    // compile times of all `ide_*` and downstream [0m[1m[31mcrate[0ms suffer greatly.
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m125[0m:[0m17[0m:    fn relevant_[0m[1m[31mcrate[0ms(&self, file_id: FileId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m126[0m:[0m43[0m:        FileLoaderDelegate(self).relevant_[0m[1m[31mcrate[0ms(file_id)
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m141[0m:[0m16[0m:        db.set_[0m[1m[31mcrate[0m_graph_with_durability(Default::default(), Durability::HIGH);
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m194[0m:[0m25[0m:            // base_db::[0m[1m[31mCrate[0mGraphQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m201[0m:[0m32[0m:            base_db::SourceRoot[0m[1m[31mCrate[0msQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m216[0m:[0m21[0m:            hir_db::[0m[1m[31mCrate[0mDefMapQueryQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m245[0m:[0m21[0m:            hir_db::[0m[1m[31mCrate[0mLangItemsQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m251[0m:[0m21[0m:            hir_db::[0m[1m[31mCrate[0mSupportsNoStdQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m273[0m:[0m36[0m:            hir_db::InherentImplsIn[0m[1m[31mCrate[0mQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m275[0m:[0m43[0m:            hir_db::IncoherentInherentImpl[0m[1m[31mCrate[0msQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m276[0m:[0m33[0m:            hir_db::TraitImplsIn[0m[1m[31mCrate[0mQuery
[0m[35mcrates/ide-db/src/lib.rs[0m:[0m[32m303[0m:[0m13[0m:            [0m[1m[31mcrate[0m::LineIndexQuery
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m22[0m:[0m28[0m:        ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m40[0m:[0m28[0m:        ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m58[0m:[0m28[0m:        ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m73[0m:[0m28[0m:        ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m81[0m:[0m23[0m:        "use external_[0m[1m[31mcrate[0m2::bar::A",
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m84[0m:[0m14[0m:use external_[0m[1m[31mcrate[0m::bar::A;
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m85[0m:[0m5[0m:use [0m[1m[31mcrate[0m::bar::A;
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m90[0m:[0m14[0m:use external_[0m[1m[31mcrate[0m::bar::A;
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m91[0m:[0m5[0m:use [0m[1m[31mcrate[0m::bar::A;
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m94[0m:[0m14[0m:use external_[0m[1m[31mcrate[0m2::bar::A;",
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m107[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m("std::fs", "use std::fs;", "use std::fs;")
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m312[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m328[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m338[0m:[0m23[0m:        "use external_[0m[1m[31mcrate[0m2::bar::A",
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m340[0m:[0m24[0m:        r"use external_[0m[1m[31mcrate[0m2::bar::A;
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m393[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m420[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m590[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m599[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m("std::foo::bar::Baz", r"use std::foo::bar::Qux;", r"use std::foo::bar::{Qux, Baz};")
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m613[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m631[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m650[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m659[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m668[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m677[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m686[0m:[0m26[0m:fn merge_groups_skip_pub_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m687[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m689[0m:[0m15[0m:        r"pub([0m[1m[31mcrate[0m) use std::fmt::{Result, Display};",
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m690[0m:[0m15[0m:        r"pub([0m[1m[31mcrate[0m) use std::fmt::{Result, Display};
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m697[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m723[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m("std::fmt::Result", r"use std::{fmt, io};", r"use std::{fmt::{self, Result}, io};")
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m728[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m("std::fmt::Debug", r"use std::fmt;", r"use std::fmt::{self, Debug};")
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m738[0m:[0m45[0m:            granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m755[0m:[0m45[0m:            granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m767[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m778[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m787[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m867[0m:[0m79[0m:    check_guess(r"use foo::{baz::{qux, quux}, bar};", ImportGranularityGuess::[0m[1m[31mCrate[0m);
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m869[0m:[0m71[0m:    check_guess(r"use foo::bar::{baz, qux};", ImportGranularityGuess::[0m[1m[31mCrate[0mOrModule);
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m940[0m:[0m10[0m:fn guess_[0m[1m[31mcrate[0m_or_module() {
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m946[0m:[0m33[0m:        ImportGranularityGuess::[0m[1m[31mCrate[0mOrModule,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m951[0m:[0m10[0m:fn guess_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m957[0m:[0m33[0m:        ImportGranularityGuess::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m1007[0m:[0m45[0m:            granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m1027[0m:[0m45[0m:            granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m1089[0m:[0m10[0m:fn check_[0m[1m[31mcrate[0m(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-db/src/imports/insert_use/tests.rs[0m:[0m[32m1090[0m:[0m73[0m:    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::[0m[1m[31mCrate[0m)
[0m[35mcrates/ide-db/src/tests/sourcegen_lints.rs[0m:[0m[32m54[0m:[0m44[0m:    let destination = project_root().join("[0m[1m[31mcrate[0ms/ide_db/src/generated/lints.rs");
[0m[35mcrates/ide-db/src/tests/sourcegen_lints.rs[0m:[0m[32m65[0m:[0m69[0m:        stdout.find("Lint checks provided by plugins loaded by this [0m[1m[31mcrate[0m:").unwrap();
[0m[35mcrates/ide-db/src/tests/sourcegen_lints.rs[0m:[0m[32m67[0m:[0m69[0m:        stdout.find("Lint groups provided by plugins loaded by this [0m[1m[31mcrate[0m:").unwrap();
[0m[35mcrates/stdx/src/macros.rs[0m:[0m[32m6[0m:[0m13[0m:        if $[0m[1m[31mcrate[0m::is_ci() {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m3[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mOrigin, Lang[0m[1m[31mCrate[0mOrigin, SourceDatabase};
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m4[0m:[0m11[0m:use hir::{[0m[1m[31mCrate[0m, Enum, Macro, Module, ScopeDef, Semantics, Trait};
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::RootDatabase;
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m21[0m:[0m72[0m:pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub [0m[1m[31mCrate[0m);
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m25[0m:[0m33[0m:    pub fn std(&self) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m26[0m:[0m24[0m:        self.find_lang_[0m[1m[31mcrate[0m(Lang[0m[1m[31mCrate[0mOrigin::Std)
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m29[0m:[0m34[0m:    pub fn core(&self) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m30[0m:[0m24[0m:        self.find_lang_[0m[1m[31mcrate[0m(Lang[0m[1m[31mCrate[0mOrigin::Core)
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m33[0m:[0m35[0m:    pub fn alloc(&self) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m34[0m:[0m24[0m:        self.find_lang_[0m[1m[31mcrate[0m(Lang[0m[1m[31mCrate[0mOrigin::Alloc)
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m37[0m:[0m34[0m:    pub fn test(&self) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m38[0m:[0m24[0m:        self.find_lang_[0m[1m[31mcrate[0m(Lang[0m[1m[31mCrate[0mOrigin::Test)
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m41[0m:[0m40[0m:    pub fn proc_macro(&self) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m42[0m:[0m24[0m:        self.find_lang_[0m[1m[31mcrate[0m(Lang[0m[1m[31mCrate[0mOrigin::ProcMacro)
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m109[0m:[0m20[0m:    pub fn builtin_[0m[1m[31mcrate[0ms(&self) -> impl Iterator<Item = [0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m148[0m:[0m18[0m:    fn find_lang_[0m[1m[31mcrate[0m(&self, origin: Lang[0m[1m[31mCrate[0mOrigin) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m151[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = self.0.db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m155[0m:[0m25[0m:            .find(|dep| [0m[1m[31mcrate[0m_graph[dep.krate.into()].origin == [0m[1m[31mCrate[0mOrigin::Lang(origin))?
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m164[0m:[0m18[0m:        let lang_[0m[1m[31mcrate[0m = path.next()?;
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m165[0m:[0m18[0m:        let lang_[0m[1m[31mcrate[0m = match Lang[0m[1m[31mCrate[0mOrigin::from(lang_[0m[1m[31mcrate[0m) {
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m166[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Other => return None,
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m167[0m:[0m18[0m:            lang_[0m[1m[31mcrate[0m => lang_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m169[0m:[0m17[0m:        let std_[0m[1m[31mcrate[0m = self.find_lang_[0m[1m[31mcrate[0m(lang_[0m[1m[31mcrate[0m)?;
[0m[35mcrates/ide-db/src/famous_defs.rs[0m:[0m[32m170[0m:[0m30[0m:        let mut module = std_[0m[1m[31mcrate[0m.root_module();
[0m[35mcrates/ide-db/src/test_data/test_doc_alias.txt[0m:[0m[32m5[0m:[0m30[0m:                krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/test_data/test_symbol_index_collection.txt[0m:[0m[32m5[0m:[0m30[0m:                krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/test_data/test_symbol_index_collection.txt[0m:[0m[32m447[0m:[0m42[0m:                            krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/test_data/test_symbol_index_collection.txt[0m:[0m[32m476[0m:[0m42[0m:                            krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/test_data/test_symbol_index_collection.txt[0m:[0m[32m675[0m:[0m30[0m:                krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/test_data/test_symbol_index_collection.txt[0m:[0m[32m715[0m:[0m30[0m:                krate: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/ide-db/src/path_transform.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::helpers::mod_path_to_ast;
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{tt, tt_iter::TtIter, ParseError};
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MetaTemplate(pub([0m[1m[31mcrate[0m) Box<[Op]>);
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parse_pattern(pattern: &tt::Subtree) -> Result<MetaTemplate, ParseError> {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parse_template(template: &tt::Subtree) -> Result<MetaTemplate, ParseError> {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m34[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter(&self) -> impl Iterator<Item = &Op> {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m52[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Op {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m65[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum RepeatKind {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m72[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum MetaVarKind {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m90[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Separator {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m159[0m:[0m62[0m:                    tt::Leaf::Ident(ident) if ident.text == "[0m[1m[31mcrate[0m" => {
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m160[0m:[0m59[0m:                        // We simply produce identifier `$[0m[1m[31mcrate[0m` here. And it will be resolved when lowering ast to Path.
[0m[35mcrates/mbe/src/parser.rs[0m:[0m[32m161[0m:[0m55[0m:                        Op::Ident(tt::Ident { text: "$[0m[1m[31mcrate[0m".into(), span: ident.span })
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m6[0m:[0m24[0m://! It leverages the [`[0m[1m[31mcrate[0m::search`] functionality to find what needs to be
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m35[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m103[0m:[0m28[0m:    /// renamed and extern [0m[1m[31mcrate[0m names will report its range, though a rename will introduce
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m167[0m:[0m31[0m:            Definition::Extern[0m[1m[31mCrate[0mDecl(it) => {
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m209[0m:[0m18[0m:    if module.is_[0m[1m[31mcrate[0m_root() {
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m557[0m:[0m27[0m:        Definition::Extern[0m[1m[31mCrate[0mDecl(decl) if decl.alias(sema.db).is_none() => {
[0m[35mcrates/ide-db/src/rename.rs[0m:[0m[32m579[0m:[0m54[0m:                        if matches!(inner, "self" | "[0m[1m[31mcrate[0m" | "super" | "Self") {
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::syntax_bridge::SyntheticTokenId;
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m75[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn shrink_to_fit(&mut self) {
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert(&mut self, token_id: tt::TokenId, relative_range: TextRange) {
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m84[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert_synthetic(&mut self, token_id: tt::TokenId, id: SyntheticTokenId) {
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m88[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert_delim(
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m101[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn update_close_delim(&mut self, idx: usize, close_relative_range: TextRange) {
[0m[35mcrates/mbe/src/token_map.rs[0m:[0m[32m109[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn remove_delim(&mut self, idx: usize) {
[0m[35mcrates/mbe/src/expander.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{parser::MetaVarKind, tt, ExpandError, ExpandResult};
[0m[35mcrates/mbe/src/expander.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn expand_rules(
[0m[35mcrates/mbe/src/expander.rs[0m:[0m[32m14[0m:[0m14[0m:    rules: &[[0m[1m[31mcrate[0m::Rule],
[0m[35mcrates/mbe/src/expander.rs[0m:[0m[32m18[0m:[0m46[0m:    let mut match_: Option<(matcher::Match, &[0m[1m[31mcrate[0m::Rule)> = None;
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{to_parser_input::to_parser_input, tt, ExpandError, ExpandResult};
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TtIter<'a> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m11[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) inner: std::slice::Iter<'a, tt::TokenTree>,
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m15[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(subtree: &'a tt::Subtree) -> TtIter<'a> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_char(&mut self, char: char) -> Result<(), ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m28[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_any_char(&mut self, chars: &[char]) -> Result<(), ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_subtree(&mut self) -> Result<&'a tt::Subtree, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m46[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_leaf(&mut self) -> Result<&'a tt::Leaf, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_ident(&mut self) -> Result<&'a tt::Ident, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m60[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_ident_or_underscore(&mut self) -> Result<&'a tt::Ident, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m67[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_literal(&mut self) -> Result<&'a tt::Leaf, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m76[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_single_punct(&mut self) -> Result<&'a tt::Punct, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_glued_punct(&mut self) -> Result<SmallVec<[tt::Punct; 3]>, ()> {
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m126[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect_fragment(
[0m[35mcrates/mbe/src/tt_iter.rs[0m:[0m[32m184[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn peek_n(&self, n: usize) -> Option<&'a tt::TokenTree> {
[0m[35mcrates/mbe/src/expander/matcher.rs[0m:[0m[32m67[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/stdx/src/panic_context.rs[0m:[0m[32m1[0m:[0m13[0m://! A micro-[0m[1m[31mcrate[0m to enhance panic messages with context info.
[0m[35mcrates/stdx/src/lib.rs[0m:[0m[32m37[0m:[0m43[0m:Uncomment `default = [ "backtrace" ]` in `[0m[1m[31mcrate[0ms/stdx/Cargo.toml`.
[0m[35mcrates/mbe/src/expander/transcriber.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/mbe/src/expander/transcriber.rs[0m:[0m[32m261[0m:[0m27[0m:    // We already handle $[0m[1m[31mcrate[0m case in mbe parser
[0m[35mcrates/mbe/src/expander/transcriber.rs[0m:[0m[32m262[0m:[0m25[0m:    debug_assert!(v != "[0m[1m[31mcrate[0m");
[0m[35mcrates/mbe/src/benchmark.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/mbe/src/syntax_bridge.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/project-model/test_data/is-proc-macro-project.json[0m:[0m[32m3[0m:[0m6[0m:    "[0m[1m[31mcrate[0ms": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m14[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m30[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m44[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m58[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m72[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m100[0m:[0m71[0m:            "id": "libc 0.2.98 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m104[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m108[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m124[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m138[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m152[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m213[0m:[0m73[0m:                    "libc 0.2.98 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m218[0m:[0m84[0m:                        "pkg": "libc 0.2.98 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/hello-world-metadata.json[0m:[0m[32m230[0m:[0m75[0m:                "id": "libc 0.2.98 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m23[0m:[0m6[0m://! `[0m[1m[31mcrate[0ms/syntax/test_data/parser/`, and run `cargo test` once to
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m41[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m47[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod entry {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod prefix {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m53[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn vis(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m57[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn block(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m61[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn stmt(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m65[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn pat(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m69[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn pat_top(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m73[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn ty(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m76[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn expr(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m79[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn path(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m82[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn item(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m86[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn meta_item(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m91[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod top {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m94[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn source_file(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m101[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn macro_stmts(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m111[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn macro_items(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m117[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn pattern(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m130[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn type_(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m143[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn expr(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m156[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn meta_item(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m169[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn eager_macro_input(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m207[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reparser(
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m247[0m:[0m64[0m:const VISIBILITY_FIRST: TokenSet = TokenSet::new(&[T![pub], T![[0m[1m[31mcrate[0m]]);
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m258[0m:[0m21[0m:            // test [0m[1m[31mcrate[0m_visibility
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m259[0m:[0m20[0m:            // pub([0m[1m[31mcrate[0m) struct S;
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m263[0m:[0m25[0m:            // test_err [0m[1m[31mcrate[0m_visibility_empty_recover
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m268[0m:[0m30[0m:            // struct B(pub ([0m[1m[31mcrate[0m::A,));
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m269[0m:[0m16[0m:            T![[0m[1m[31mcrate[0m] | T![self] | T![super] | T![ident] | T![')'] if p.nth(2) != T![:] => {
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m284[0m:[0m21[0m:            // test [0m[1m[31mcrate[0m_visibility_in
[0m[35mcrates/parser/src/grammar.rs[0m:[0m[32m286[0m:[0m23[0m:            // pub(in [0m[1m[31mcrate[0m) struct S;
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Parser<'t> {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(self) -> Vec<Event> {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn current(&self) -> SyntaxKind {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn nth(&self, n: usize) -> SyntaxKind {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn at(&self, kind: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m66[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn nth_at(&self, n: usize, kind: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m99[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn eat(&mut self, kind: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m147[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn at_ts(&self, kinds: TokenSet) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m152[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn at_contextual_kw(&self, kw: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m157[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn nth_at_contextual_kw(&self, n: usize, kw: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m164[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn start(&mut self) -> Marker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m171[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bump(&mut self, kind: SyntaxKind) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m176[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bump_any(&mut self) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m185[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn split_float(&mut self, mut marker: Marker) -> (bool, Marker) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m219[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bump_remap(&mut self, kind: SyntaxKind) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m231[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn error<T: Into<String>>(&mut self, message: T) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m238[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expect(&mut self, kind: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m247[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn err_and_bump(&mut self, message: &str) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m252[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn err_recover(&mut self, message: &str, recovery: TokenSet) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m284[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Marker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m297[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete(mut self, p: &mut Parser<'_>, kind: SyntaxKind) -> CompletedMarker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m312[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn abandon(mut self, p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m324[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct CompletedMarker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m340[0m:[0m42[0m:    /// [`Event::Start::forward_parent`]([0m[1m[31mcrate[0m::event::Event::Start::forward_parent).
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m347[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn precede(self, p: &mut Parser<'_>) -> Marker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m360[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn extend_to(self, p: &mut Parser<'_>, mut m: Marker) -> CompletedMarker {
[0m[35mcrates/parser/src/parser.rs[0m:[0m[32m372[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn kind(&self) -> SyntaxKind {
[0m[35mcrates/parser/src/tests/prefix_entries.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{LexedStr, PrefixEntryPoint, Step};
[0m[35mcrates/parser/src/tests/prefix_entries.rs[0m:[0m[32m5[0m:[0m39[0m:    check(PrefixEntryPoint::Vis, "pub([0m[1m[31mcrate[0m) fn foo() {}", "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/parser/src/tests/prefix_entries.rs[0m:[0m[32m8[0m:[0m39[0m:    check(PrefixEntryPoint::Vis, "pub([0m[1m[31mcrate[0m fn foo() {}", "pub([0m[1m[31mcrate[0m");
[0m[35mcrates/mbe/src/to_parser_input.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tt::buffer::TokenBuffer;
[0m[35mcrates/mbe/src/to_parser_input.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn to_parser_input(buffer: &TokenBuffer<'_>) -> parser::Input {
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_method.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_method.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_method(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_method.rs[0m:[0m[32m87[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m7[0m:[0m80[0m:// This diagnostic is triggered if the targe type of an impl is from a foreign [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn incoherent_impl(ctx: &DiagnosticsContext<'_>, d: &hir::IncoherentImpl) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m19[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m47[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m50[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m59[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m61[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m68[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-diagnostics/src/handlers/incoherent_impl.rs[0m:[0m[32m71[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode, DiagnosticsConfig, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m89[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn json_in_items(
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m169[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m191[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib deps:serde
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m205[0m:[0m27[0m:            //- /serde.rs [0m[1m[31mcrate[0m:serde
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m250[0m:[0m25[0m:            //- /lib.rs [0m[1m[31mcrate[0m:lib deps:serde
[0m[35mcrates/ide-diagnostics/src/handlers/json_is_not_rust.rs[0m:[0m[32m263[0m:[0m27[0m:            //- /serde.rs [0m[1m[31mcrate[0m:serde
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m24[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct BuildScriptOutput {
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) cfgs: Vec<CfgFlag>,
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) envs: Vec<(String, String)>,
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) out_dir: Option<AbsPathBuf>,
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m47[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) proc_macro_dylib_path: Option<AbsPathBuf>,
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m123[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run_for_workspace(
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m164[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run_once(
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m185[0m:[0m53[0m:        // some workspaces might depend on the same [0m[1m[31mcrate[0ms, so we need to duplicate the outputs
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m332[0m:[0m47[0m:                            // cargo_metadata [0m[1m[31mcrate[0m returns default (empty) path for
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m393[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_output(&self, idx: Package) -> Option<&BuildScriptOutput> {
[0m[35mcrates/project-model/src/build_scripts.rs[0m:[0m[32m397[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn rustc_[0m[1m[31mcrate[0ms(
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m1[0m:[0m21[0m://! Loads "sysroot" [0m[1m[31mcrate[0m.
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m10[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mName;
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utf8_stdout, CargoConfig, CargoWorkspace, ManifestPath};
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m21[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: Arena<Sysroot[0m[1m[31mCrate[0mData>,
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type Sysroot[0m[1m[31mCrate[0m = Idx<Sysroot[0m[1m[31mCrate[0mData>;
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m29[0m:[0m19[0m:pub struct Sysroot[0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m32[0m:[0m26[0m:    pub deps: Vec<Sysroot[0m[1m[31mCrate[0m>,
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m35[0m:[0m24[0m:impl ops::Index<Sysroot[0m[1m[31mCrate[0m> for Sysroot {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m36[0m:[0m26[0m:    type Output = Sysroot[0m[1m[31mCrate[0mData;
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m37[0m:[0m35[0m:    fn index(&self, index: Sysroot[0m[1m[31mCrate[0m) -> &Sysroot[0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m38[0m:[0m15[0m:        &self.[0m[1m[31mcrate[0ms[index]
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m56[0m:[0m56[0m:    pub fn public_deps(&self) -> impl Iterator<Item = ([0m[1m[31mCrate[0mName, Sysroot[0m[1m[31mCrate[0m, bool)> + '_ {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m64[0m:[0m23[0m:                Some(([0m[1m[31mCrate[0mName::new(name).unwrap(), self.by_name(name)?, prelude))
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m68[0m:[0m47[0m:    pub fn proc_macro(&self) -> Option<Sysroot[0m[1m[31mCrate[0m> {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m72[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0ms(&self) -> impl Iterator<Item = Sysroot[0m[1m[31mCrate[0m> + ExactSizeIterator + '_ {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m73[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms.iter().map(|(id, _data)| id)
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m77[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms.is_empty()
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m160[0m:[0m13[0m:            [0m[1m[31mcrate[0ms: Arena::default(),
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m164[0m:[0m29[0m:        for path in SYSROOT_[0m[1m[31mCRATE[0mS.trim().lines() {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m173[0m:[0m25[0m:                sysroot.[0m[1m[31mcrate[0ms.alloc(Sysroot[0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m184[0m:[0m29[0m:                    sysroot.[0m[1m[31mcrate[0ms[std].deps.push(dep)
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m192[0m:[0m29[0m:                    sysroot.[0m[1m[31mcrate[0ms[alloc].deps.push(dep)
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m200[0m:[0m29[0m:                    sysroot.[0m[1m[31mcrate[0ms[proc_macro].deps.push(dep)
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m208[0m:[0m52[0m:    fn by_name(&self, name: &str) -> Option<Sysroot[0m[1m[31mCrate[0m> {
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m209[0m:[0m32[0m:        let (id, _data) = self.[0m[1m[31mcrate[0ms.iter().find(|(_id, data)| data.name == name)?;
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m289[0m:[0m15[0m:const SYSROOT_[0m[1m[31mCRATE[0mS: &str = "
[0m[35mcrates/project-model/src/sysroot.rs[0m:[0m[32m298[0m:[0m9[0m:stdarch/[0m[1m[31mcrate[0ms/std_detect
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utf8_stdout, InvocationLocation, ManifestPath};
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{CfgOverrides, InvocationStrategy};
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m23[0m:[0m6[0m:/// `[0m[1m[31mCrate[0mGraph`. `[0m[1m[31mCrate[0mGraph` is lower-level: it knows only about the [0m[1m[31mcrate[0ms,
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m86[0m:[0m23[0m:    /// rustc private [0m[1m[31mcrate[0m source
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m105[0m:[0m41[0m:/// Information associated with a cargo [0m[1m[31mcrate[0m
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m116[0m:[0m33[0m:    /// Targets provided by the [0m[1m[31mcrate[0m (lib, bin, example, test, ...)
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m126[0m:[0m34[0m:    /// Features provided by the [0m[1m[31mcrate[0m, mapped to the features required by that feature.
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m196[0m:[0m31[0m:    /// Any kind of Cargo lib [0m[1m[31mcrate[0m-type (dylib, rlib, proc-macro, ...).
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m282[0m:[0m20[0m:        // calling [0m[1m[31mcrate[0ms.io. We should be reporting progress here, but it's
[0m[35mcrates/project-model/src/cargo_workspace.rs[0m:[0m[32m454[0m:[0m57[0m:    /// Returns the union of the features of all member [0m[1m[31mcrate[0ms in this workspace.
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn missing_match_arms(
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m20[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m25[0m:[0m9[0m:        [0m[1m[31mcrate[0m::tests::check_diagnostics(ra_fixture)
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m778[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m792[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m985[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib
[0m[35mcrates/ide-diagnostics/src/handlers/missing_match_arms.rs[0m:[0m[32m992[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib
[0m[35mcrates/project-model/src/target_data_layout.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utf8_stdout, ManifestPath};
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m14[0m:[0m50[0m:        label: "absolute_paths_not_starting_with_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m15[0m:[0m90[0m:        description: r##"fully qualified paths that start with a module name instead of `[0m[1m[31mcrate[0m`, `self`, or an extern [0m[1m[31mcrate[0m name"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m123[0m:[0m150[0m:        description: r##"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-[0m[1m[31mcrate[0m, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m193[0m:[0m80[0m:        description: r##"macro-expanded `macro_export` macros from the current [0m[1m[31mcrate[0m cannot be referred to by absolute paths"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m196[0m:[0m34[0m:        label: "macro_use_extern_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m303[0m:[0m78[0m:        description: r##"detects usage of old versions of certain proc-macro [0m[1m[31mcrate[0ms"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m310[0m:[0m43[0m:        label: "pub_use_of_private_extern_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m311[0m:[0m69[0m:        description: r##"detect public re-exports of private extern [0m[1m[31mcrate[0ms"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m323[0m:[0m139[0m:        description: r##"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-[0m[1m[31mcrate[0m"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m327[0m:[0m76[0m:        description: r##"lint group for: bare-trait-objects, unused-extern-[0m[1m[31mcrate[0ms, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m359[0m:[0m70[0m:        description: r##"a feature gate that doesn't break dependent [0m[1m[31mcrate[0ms"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m415[0m:[0m25[0m:        label: "unknown_[0m[1m[31mcrate[0m_types",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m416[0m:[0m34[0m:        description: r##"unknown [0m[1m[31mcrate[0m type found in `#[[0m[1m[31mcrate[0m_type]` directive"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m427[0m:[0m57[0m:        description: r##"`pub` items not reachable from [0m[1m[31mcrate[0m root"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m452[0m:[0m296[0m:        description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-[0m[1m[31mcrate[0ms, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m472[0m:[0m24[0m:        label: "unused_[0m[1m[31mcrate[0m_dependencies",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m473[0m:[0m26[0m:        description: r##"[0m[1m[31mcrate[0m dependencies that are never used"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m479[0m:[0m34[0m:    Lint { label: "unused_extern_[0m[1m[31mcrate[0ms", description: r##"extern [0m[1m[31mcrate[0ms that are never used"## },
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m482[0m:[0m51[0m:        description: r##"unused features found in [0m[1m[31mcrate[0m-level `#[feature]` directives"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m549[0m:[0m154[0m:            description: r##"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-[0m[1m[31mcrate[0m, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m555[0m:[0m40[0m:            "pub_use_of_private_extern_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m598[0m:[0m143[0m:            description: r##"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-[0m[1m[31mcrate[0m"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m604[0m:[0m47[0m:            "absolute_paths_not_starting_with_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m610[0m:[0m80[0m:            description: r##"lint group for: bare-trait-objects, unused-extern-[0m[1m[31mcrate[0ms, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m614[0m:[0m28[0m:            "unused_extern_[0m[1m[31mcrate[0ms",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m639[0m:[0m300[0m:            description: r##"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-[0m[1m[31mcrate[0ms, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m656[0m:[0m28[0m:            "unused_extern_[0m[1m[31mcrate[0ms",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m676[0m:[0m311[0m:        description: r##"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-[0m[1m[31mcrate[0m-level-docs"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m696[0m:[0m34[0m:        label: "rustdoc::missing_[0m[1m[31mcrate[0m_level_docs",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m697[0m:[0m34[0m:        description: r##"detects [0m[1m[31mcrate[0ms with no [0m[1m[31mcrate[0m-level documentation"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m715[0m:[0m311[0m:        description: r##"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-[0m[1m[31mcrate[0m-level-docs"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m726[0m:[0m27[0m:        "rustdoc::missing_[0m[1m[31mcrate[0m_level_docs",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m781[0m:[0m22[0m:$ rustc --emit asm --[0m[1m[31mcrate[0m-type lib --target thumbv8m.main-none-eabi function.rs
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m881[0m:[0m15[0m:CUDA API so a [0m[1m[31mcrate[0m with only device functions is not too useful!
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m884[0m:[0m32[0m:as the real public API of your [0m[1m[31mcrate[0m. To produce a global function use the
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1624[0m:[0m22[0m:$ rustc --emit obj --[0m[1m[31mcrate[0m-type lib --target thumbv8m.main-none-eabi function.rs
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1740[0m:[0m17[0m:        label: "[0m[1m[31mcrate[0m_visibility_modifier",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1741[0m:[0m29[0m:        description: r##"# `[0m[1m[31mcrate[0m_visibility_modifier`
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1749[0m:[0m6[0m:The `[0m[1m[31mcrate[0m_visibility_modifier` feature allows the `[0m[1m[31mcrate[0m` keyword to be used
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1750[0m:[0m45[0m:as a visibility modifier synonymous to `pub([0m[1m[31mcrate[0m)`, indicating that a type
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1751[0m:[0m60[0m:(function, _&c._) is to be visible to the entire enclosing [0m[1m[31mcrate[0m, but not to
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1752[0m:[0m7[0m:other [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1755[0m:[0m12[0m:#![feature([0m[1m[31mcrate[0m_visibility_modifier)]
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1757[0m:[0m1[0m:[0m[1m[31mcrate[0m struct Foo {
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1775[0m:[0m70[0m:and be passed to the test runner determined by the `#![test_runner]` [0m[1m[31mcrate[0m attribute.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1895[0m:[0m1[0m:[0m[1m[31mcrate[0m.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1910[0m:[0m12[0m:/// extern [0m[1m[31mcrate[0m my_awesome_ui_library;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1935[0m:[0m35[0m:The `doc_masked` feature allows a [0m[1m[31mcrate[0m to exclude types from a given [0m[1m[31mcrate[0m from appearing in lists
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1938[0m:[0m39[0m:1. When rustdoc encounters an `extern [0m[1m[31mcrate[0m` statement annotated with a `#[doc(masked)]` attribute,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1939[0m:[0m17[0m:   it marks the [0m[1m[31mcrate[0m as being masked.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1941[0m:[0m89[0m:2. When listing traits a given type implements, rustdoc ensures that traits from masked [0m[1m[31mcrate[0ms are
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m1944[0m:[0m92[0m:3. When listing types that implement a given trait, rustdoc ensures that types from masked [0m[1m[31mcrate[0ms
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2773[0m:[0m8[0m:extern [0m[1m[31mcrate[0m libc;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2828[0m:[0m30[0m:but not found in the current [0m[1m[31mcrate[0m or any that it depends on.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2865[0m:[0m8[0m:extern [0m[1m[31mcrate[0m libc;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2902[0m:[0m8[0m:extern [0m[1m[31mcrate[0m libc;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2925[0m:[0m73[0m:In many cases, you may need to manually link to the `compiler_builtins` [0m[1m[31mcrate[0m
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m2939[0m:[0m69[0m:(see the [libstd implementation][unwind] for more information), but [0m[1m[31mcrate[0ms
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3098[0m:[0m1[0m:[0m[1m[31mcrate[0m to allow) and of course requires an `unsafe` block.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3391[0m:[0m79[0m:`+bundle` means objects from the static library are bundled into the produced [0m[1m[31mcrate[0m (a rlib, for example) and are used from this [0m[1m[31mcrate[0m later during linking of the final binary.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3478[0m:[0m142[0m:Negative impls must obey the same orphan rules as a positive impl. This implies you cannot add a negative impl for types defined in upstream [0m[1m[31mcrate[0ms and so forth.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3504[0m:[0m26[0m:* It prevents downstream [0m[1m[31mcrate[0ms from creating such impls.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3591[0m:[0m31[0m:A plugin is a dynamic library [0m[1m[31mcrate[0m with a designated *registrar* function that
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3592[0m:[0m42[0m:registers extensions with `rustc`. Other [0m[1m[31mcrate[0ms can load these extensions using
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3593[0m:[0m5[0m:the [0m[1m[31mcrate[0m attribute `#![plugin(...)]`.  See the
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3598[0m:[0m41[0m:`#![plugin]` and not through an `extern [0m[1m[31mcrate[0m` item.  Linking a plugin would
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3599[0m:[0m66[0m:pull in all of librustc_ast and librustc as dependencies of your [0m[1m[31mcrate[0m.  This is
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3602[0m:[0m60[0m:The usual practice is to put compiler plugins in their own [0m[1m[31mcrate[0m, separate from
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3617[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_ast;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3620[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_driver;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3622[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_lint;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3624[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_session;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3873[0m:[0m29[0m:The internals of the `test` [0m[1m[31mcrate[0m are unstable, behind the `test` flag.  The
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3874[0m:[0m37[0m:most widely used part of the `test` [0m[1m[31mcrate[0m are benchmark tests, which can test
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3881[0m:[0m8[0m:extern [0m[1m[31mcrate[0m test;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3906[0m:[0m27[0m:We've imported the `test` [0m[1m[31mcrate[0m, which contains our benchmarking support.
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3955[0m:[0m8[0m:extern [0m[1m[31mcrate[0m test;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m3997[0m:[0m8[0m:extern [0m[1m[31mcrate[0m test;
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m4072[0m:[0m16[0m:  = note: to `$[0m[1m[31mcrate[0m :: io :: _print ( format_args ! ( concat ! ( "Hello, Rust!" , "\n" ) )
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m5420[0m:[0m49[0m:        description: r##"Checks [regex](https://[0m[1m[31mcrate[0ms.io/[0m[1m[31mcrate[0ms/regex) creation
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m5822[0m:[0m34[0m:        label: "clippy::multiple_[0m[1m[31mcrate[0m_versions",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m5823[0m:[0m66[0m:        description: r##"Checks to see if multiple versions of a [0m[1m[31mcrate[0m are being
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m6272[0m:[0m39[0m:        label: "clippy::redundant_pub_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m6273[0m:[0m57[0m:        description: r##"Checks for items declared `pub([0m[1m[31mcrate[0m)` that are not [0m[1m[31mcrate[0m visible because they
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m6659[0m:[0m61[0m:        description: r##"Checks for trivial [regex](https://[0m[1m[31mcrate[0ms.io/[0m[1m[31mcrate[0ms/regex)
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m6913[0m:[0m45[0m:        description: r##"Checks for `extern [0m[1m[31mcrate[0m` and `use` items annotated with
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m6919[0m:[0m9[0m:`extern [0m[1m[31mcrate[0m` items with a `#[macro_use]` attribute."##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m7076[0m:[0m94[0m:            description: r##"lint group for: clippy::cargo_common_metadata, clippy::multiple_[0m[1m[31mcrate[0m_versions, clippy::negative_feature_names, clippy::redundant_feature_names, clippy::wildcard_dependencies"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m7080[0m:[0m31[0m:            "clippy::multiple_[0m[1m[31mcrate[0m_versions",
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m7289[0m:[0m575[0m:            description: r##"lint group for: clippy::branches_sharing_code, clippy::cognitive_complexity, clippy::debug_assert_with_mut_call, clippy::disallowed_methods, clippy::disallowed_types, clippy::empty_line_after_outer_attr, clippy::equatable_if_let, clippy::fallible_impl_from, clippy::future_not_send, clippy::imprecise_flops, clippy::index_refutable_slice, clippy::missing_const_for_fn, clippy::mutex_integer, clippy::non_send_fields_in_send_ty, clippy::nonstandard_macro_braces, clippy::option_if_let_else, clippy::path_buf_push_overwrite, clippy::redundant_pub_[0m[1m[31mcrate[0m, clippy::string_lit_as_bytes, clippy::suboptimal_flops, clippy::suspicious_operation_groupings, clippy::trailing_empty_array, clippy::trivial_regex, clippy::use_self, clippy::useless_let_if_seq, clippy::useless_transmute"##,
[0m[35mcrates/ide-db/src/generated/lints.rs[0m:[0m[32m7309[0m:[0m36[0m:            "clippy::redundant_pub_[0m[1m[31mcrate[0m",
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m1[0m:[0m58[0m://! Diagnostic emitted for files that aren't part of any [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Assist, Diagnostic, DiagnosticCode, DiagnosticsContext, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m21[0m:[0m68[0m:// This diagnostic is shown for files that are not included in any [0m[1m[31mcrate[0m, or files that are part of
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m22[0m:[0m4[0m:// [0m[1m[31mcrate[0ms rust-analyzer failed to discover. The file will not have IDE features available.
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unlinked_file(
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m34[0m:[0m31[0m:        "file not included in [0m[1m[31mcrate[0m hierarchy"
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m72[0m:[0m14[0m:    // check [0m[1m[31mcrate[0m roots, i.e. main.rs, lib.rs, ...
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m73[0m:[0m6[0m:    '[0m[1m[31mcrate[0ms: for &krate in &*ctx.sema.db.relevant_[0m[1m[31mcrate[0ms(file_id) {
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m74[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = ctx.sema.db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m76[0m:[0m28[0m:        let root_module = &[0m[1m[31mcrate[0m_def_map[DefMap::ROOT];
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m78[0m:[0m18[0m:        let Some([0m[1m[31mcrate[0m_root_path) = source_root.path_for_file(&root_file_id) else { continue };
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m79[0m:[0m46[0m:        let Some(rel) = parent.strip_prefix(&[0m[1m[31mcrate[0m_root_path.parent()?) else { continue };
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m88[0m:[0m32[0m:                _ => continue '[0m[1m[31mcrate[0ms,
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m91[0m:[0m49[0m:                Some((_, &child)) => current = &[0m[1m[31mcrate[0m_def_map[child],
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m92[0m:[0m35[0m:                None => continue '[0m[1m[31mcrate[0ms,
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m95[0m:[0m27[0m:                continue '[0m[1m[31mcrate[0ms;
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m105[0m:[0m33[0m:    // if we aren't adding to a [0m[1m[31mcrate[0m root, walk backwards such that we support `#[path = ...]` overrides if possible
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m119[0m:[0m6[0m:    '[0m[1m[31mcrate[0ms: for &krate in ctx.sema.db.relevant_[0m[1m[31mcrate[0ms(parent_id).iter() {
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m120[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = ctx.sema.db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m121[0m:[0m33[0m:        let Some((_, module)) = [0m[1m[31mcrate[0m_def_map.modules().find(|(_, module)| {
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m142[0m:[0m36[0m:                        current = &[0m[1m[31mcrate[0m_def_map[*child];
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m144[0m:[0m39[0m:                    None => continue '[0m[1m[31mcrate[0ms,
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m147[0m:[0m31[0m:                    continue '[0m[1m[31mcrate[0ms;
[0m[35mcrates/ide-diagnostics/src/handlers/unlinked_file.rs[0m:[0m[32m255[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix, check_fixes, check_no_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/break_outside_of_loop.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/break_outside_of_loop.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn break_outside_of_loop(
[0m[35mcrates/ide-diagnostics/src/handlers/break_outside_of_loop.rs[0m:[0m[32m26[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/project-model/src/rustc_cfg.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{cfg_flag::CfgFlag, utf8_stdout, ManifestPath, Sysroot};
[0m[35mcrates/project-model/src/rustc_cfg.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum RustcCfgConfig<'a> {
[0m[35mcrates/project-model/src/rustc_cfg.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn get(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_macro_call.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_macro_call.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_macro_call(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_macro_call.rs[0m:[0m[32m24[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/malformed_derive.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/malformed_derive.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn malformed_derive(
[0m[35mcrates/ide-diagnostics/src/handlers/malformed_derive.rs[0m:[0m[32m21[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Assist, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_filter_map_next_with_find_map(
[0m[35mcrates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs[0m:[0m[32m58[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn check_diagnostics(ra_fixture: &str) {
[0m[35mcrates/ide-diagnostics/src/handlers/expected_function.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/expected_function.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn expected_function(
[0m[35mcrates/ide-diagnostics/src/handlers/expected_function.rs[0m:[0m[32m23[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_field.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_field.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_field(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_field.rs[0m:[0m[32m71[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m6[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mGraph, FileId, ProcMacroPaths};
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m18[0m:[0m31[0m:fn load_cargo(file: &str) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m25[0m:[0m7[0m:) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m38[0m:[0m8[0m:    to_[0m[1m[31mcrate[0m_graph(project_workspace)
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m44[0m:[0m7[0m:) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m57[0m:[0m26[0m:    project_workspace.to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m68[0m:[0m38[0m:fn load_rust_project(file: &str) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m74[0m:[0m8[0m:    to_[0m[1m[31mcrate[0m_graph(project_workspace)
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m139[0m:[0m7[0m:fn to_[0m[1m[31mcrate[0m_graph(project_workspace: ProjectWorkspace) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m140[0m:[0m26[0m:    project_workspace.to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m152[0m:[0m10[0m:fn check_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph: [0m[1m[31mCrate[0mGraph, expect: ExpectFile) {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m153[0m:[0m13[0m:    let mut [0m[1m[31mcrate[0m_graph = format!("{[0m[1m[31mcrate[0m_graph:#?}");
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m154[0m:[0m23[0m:    replace_root(&mut [0m[1m[31mcrate[0m_graph, false);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m155[0m:[0m32[0m:    replace_fake_sys_root(&mut [0m[1m[31mcrate[0m_graph);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m156[0m:[0m23[0m:    expect.assert_eq(&[0m[1m[31mcrate[0m_graph);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m165[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, _proc_macros) =
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m167[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m168[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m185[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, _proc_macros) =
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m187[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m188[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m197[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, _proc_macros) = load_cargo("hello-world-metadata.json");
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m198[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m199[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m206[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, _proc_macros) = load_rust_project("hello-world-project.json");
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m207[0m:[0m11[0m:    check_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m208[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m215[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, _proc_macros) = load_rust_project("is-proc-macro-project.json");
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m216[0m:[0m43[0m:    // Since the project only defines one [0m[1m[31mcrate[0m (outside the sysroot [0m[1m[31mcrate[0ms),
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m218[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.iter().max().unwrap();
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m219[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_data = &[0m[1m[31mcrate[0m_graph[[0m[1m[31mcrate[0m_id];
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m220[0m:[0m32[0m:    // Assert that the project [0m[1m[31mcrate[0m with `is_proc_macro` has a dependency
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m221[0m:[0m34[0m:    // on the proc_macro sysroot [0m[1m[31mcrate[0m.
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m222[0m:[0m5[0m:    [0m[1m[31mcrate[0m_data.dependencies.iter().find(|&dep| dep.name.deref() == "proc_macro").unwrap();
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m226[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_graph_dedup_identical() {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m227[0m:[0m14[0m:    let (mut [0m[1m[31mcrate[0m_graph, proc_macros) =
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m229[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph.sort_deps();
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m231[0m:[0m12[0m:    let (d_[0m[1m[31mcrate[0m_graph, mut d_proc_macros) = ([0m[1m[31mcrate[0m_graph.clone(), proc_macros.clone());
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m233[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph.extend(d_[0m[1m[31mcrate[0m_graph.clone(), &mut d_proc_macros);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m234[0m:[0m13[0m:    assert!([0m[1m[31mcrate[0m_graph.iter().eq(d_[0m[1m[31mcrate[0m_graph.iter()));
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m239[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_graph_dedup() {
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m241[0m:[0m14[0m:    let (mut [0m[1m[31mcrate[0m_graph, _proc_macros) =
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m243[0m:[0m16[0m:    assert_eq!([0m[1m[31mcrate[0m_graph.iter().count(), 81);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m244[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph.sort_deps();
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m245[0m:[0m16[0m:    let (regex_[0m[1m[31mcrate[0m_graph, mut regex_proc_macros) =
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m247[0m:[0m22[0m:    assert_eq!(regex_[0m[1m[31mcrate[0m_graph.iter().count(), 60);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m249[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph.extend(regex_[0m[1m[31mcrate[0m_graph, &mut regex_proc_macros);
[0m[35mcrates/project-model/src/tests.rs[0m:[0m[32m250[0m:[0m16[0m:    assert_eq!([0m[1m[31mcrate[0m_graph.iter().count(), 118);
[0m[35mcrates/ide-diagnostics/src/handlers/useless_braces.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode};
[0m[35mcrates/ide-diagnostics/src/handlers/useless_braces.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn useless_braces(
[0m[35mcrates/ide-diagnostics/src/handlers/useless_braces.rs[0m:[0m[32m58[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_module.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_module.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_module(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_module.rs[0m:[0m[32m63[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_expect};
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m3[0m:[0m62[0m://! This format is spiritually a serialization of [`base_db::[0m[1m[31mCrate[0mGraph`]. The
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m14[0m:[0m5[0m://! [0m[1m[31mcrate[0ms (compilation units) and dependencies between them. This is necessary
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m16[0m:[0m58[0m://! the whole project, rather than just in the "current" [0m[1m[31mcrate[0m.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m18[0m:[0m28[0m://! Normally, we get this "[0m[1m[31mcrate[0m graph" by calling `cargo metadata
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m52[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mDisplayName, [0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mName, Dependency, Edition};
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m59[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cfg_flag::CfgFlag;
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m61[0m:[0m15[0m:/// Roots and [0m[1m[31mcrate[0ms that compose this Rust project.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m65[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) sysroot: Option<AbsPathBuf>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m67[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) sysroot_src: Option<AbsPathBuf>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m69[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: Vec<[0m[1m[31mCrate[0m>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m72[0m:[0m7[0m:/// A [0m[1m[31mcrate[0m points to the root module of a [0m[1m[31mcrate[0m and lists the dependencies of the [0m[1m[31mcrate[0m. This is
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m73[0m:[0m28[0m:/// useful in creating the [0m[1m[31mcrate[0m graph.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m75[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0m {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m76[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) display_name: Option<[0m[1m[31mCrate[0mDisplayName>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m77[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) root_module: AbsPathBuf,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m78[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) edition: Edition,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m79[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) version: Option<String>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) deps: Vec<Dependency>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m81[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) cfg: Vec<CfgFlag>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m82[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) target: Option<String>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m83[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) env: FxHashMap<String, String>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m84[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) proc_macro_dylib_path: Option<AbsPathBuf>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m85[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) is_workspace_member: bool,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m86[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) include: Vec<AbsPathBuf>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) exclude: Vec<AbsPathBuf>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m88[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) is_proc_macro: bool,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m89[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) repository: Option<String>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m106[0m:[0m13[0m:            [0m[1m[31mcrate[0ms: data
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m107[0m:[0m18[0m:                .[0m[1m[31mcrate[0ms
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m109[0m:[0m23[0m:                .map(|[0m[1m[31mcrate[0m_data| {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m110[0m:[0m58[0m:                    let root_module = absolutize_on_base([0m[1m[31mcrate[0m_data.root_module);
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m111[0m:[0m47[0m:                    let is_workspace_member = [0m[1m[31mcrate[0m_data
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m114[0m:[0m52[0m:                    let (include, exclude) = match [0m[1m[31mcrate[0m_data.source {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m124[0m:[0m21[0m:                    [0m[1m[31mCrate[0m {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m125[0m:[0m39[0m:                        display_name: [0m[1m[31mcrate[0m_data
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m127[0m:[0m34[0m:                            .map([0m[1m[31mCrate[0mDisplayName::from_canonical_name),
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m129[0m:[0m34[0m:                        edition: [0m[1m[31mcrate[0m_data.edition.into(),
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m130[0m:[0m34[0m:                        version: [0m[1m[31mcrate[0m_data.version.as_ref().map(ToString::to_string),
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m131[0m:[0m31[0m:                        deps: [0m[1m[31mcrate[0m_data
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m137[0m:[0m37[0m:                                    [0m[1m[31mCrate[0mId::from_raw(RawIdx::from(dep_data.krate as u32)),
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m141[0m:[0m30[0m:                        cfg: [0m[1m[31mcrate[0m_data.cfg,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m142[0m:[0m33[0m:                        target: [0m[1m[31mcrate[0m_data.target,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m143[0m:[0m30[0m:                        env: [0m[1m[31mcrate[0m_data.env,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m144[0m:[0m48[0m:                        proc_macro_dylib_path: [0m[1m[31mcrate[0m_data
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m150[0m:[0m40[0m:                        is_proc_macro: [0m[1m[31mcrate[0m_data.is_proc_macro,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m151[0m:[0m37[0m:                        repository: [0m[1m[31mcrate[0m_data.repository,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m158[0m:[0m31[0m:    /// Returns the number of [0m[1m[31mcrate[0ms in the project.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m159[0m:[0m14[0m:    pub fn n_[0m[1m[31mcrate[0ms(&self) -> usize {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m160[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms.len()
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m163[0m:[0m38[0m:    /// Returns an iterator over the [0m[1m[31mcrate[0ms in the project.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m164[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0ms(&self) -> impl Iterator<Item = ([0m[1m[31mCrate[0mId, &[0m[1m[31mCrate[0m)> + '_ {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m165[0m:[0m14[0m:        self.[0m[1m[31mcrate[0ms
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m168[0m:[0m34[0m:            .map(|(idx, krate)| ([0m[1m[31mCrate[0mId::from_raw(RawIdx::from(idx as u32)), krate))
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m181[0m:[0m5[0m:    [0m[1m[31mcrate[0ms: Vec<[0m[1m[31mCrate[0mData>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m185[0m:[0m8[0m:struct [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m199[0m:[0m20[0m:    source: Option<[0m[1m[31mCrate[0mSource>,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m229[0m:[0m22[0m:    /// Identifies a [0m[1m[31mcrate[0m by position in the [0m[1m[31mcrate[0ms array.
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m230[0m:[0m23[0m:    #[serde(rename = "[0m[1m[31mcrate[0m")]
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m232[0m:[0m45[0m:    #[serde(deserialize_with = "deserialize_[0m[1m[31mcrate[0m_name")]
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m233[0m:[0m11[0m:    name: [0m[1m[31mCrate[0mName,
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m237[0m:[0m8[0m:struct [0m[1m[31mCrate[0mSource {
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m242[0m:[0m16[0m:fn deserialize_[0m[1m[31mcrate[0m_name<'de, D>(de: D) -> std::result::Result<[0m[1m[31mCrate[0mName, D::Error>
[0m[35mcrates/project-model/src/project_json.rs[0m:[0m[32m247[0m:[0m5[0m:    [0m[1m[31mCrate[0mName::new(&name).map_err(|err| de::Error::custom(format!("invalid [0m[1m[31mcrate[0m name: {err:?}")))
[0m[35mcrates/ide-diagnostics/src/handlers/inactive_code.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/inactive_code.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inactive_code(
[0m[35mcrates/ide-diagnostics/src/handlers/inactive_code.rs[0m:[0m[32m42[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{tests::check_diagnostics_with_config, DiagnosticsConfig};
[0m[35mcrates/ide-diagnostics/src/handlers/inactive_code.rs[0m:[0m[32m44[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn check(ra_fixture: &str) {
[0m[35mcrates/ide-diagnostics/src/handlers/inactive_code.rs[0m:[0m[32m84[0m:[0m38[0m:        // Additional tests in `cfg` [0m[1m[31mcrate[0m. This only tests disabled cfgs.
[0m[35mcrates/ide-diagnostics/src/handlers/unreachable_label.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unreachable_label.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unreachable_label(
[0m[35mcrates/ide-diagnostics/src/handlers/unreachable_label.rs[0m:[0m[32m19[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/project-model/src/lib.rs[0m:[0m[32m4[0m:[0m49[0m://! Pure model is represented by the [`base_db::[0m[1m[31mCrate[0mGraph`] from another [0m[1m[31mcrate[0m.
[0m[35mcrates/project-model/src/lib.rs[0m:[0m[32m6[0m:[0m13[0m://! In this [0m[1m[31mcrate[0m, we are concerned with "real world" project models.
[0m[35mcrates/project-model/src/lib.rs[0m:[0m[32m16[0m:[0m50[0m://! * Lowering of concrete model to a [`base_db::[0m[1m[31mCrate[0mGraph`]
[0m[35mcrates/project-model/src/lib.rs[0m:[0m[32m44[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn missing_fields(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m103[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ExprFillDefaultMode::Todo => make::ext::expr_todo(),
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m104[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ExprFillDefaultMode::Default => {
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m244[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m814[0m:[0m22[0m:    fn import_extern_[0m[1m[31mcrate[0m_clash_with_inner_item() {
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m819[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:jwt
[0m[35mcrates/ide-diagnostics/src/handlers/missing_fields.rs[0m:[0m[32m834[0m:[0m17[0m://- /jwt/lib.rs [0m[1m[31mcrate[0m:jwt
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m3[0m:[0m18[0m://! database -- `[0m[1m[31mCrate[0mGraph`.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m9[0m:[0m5[0m:    [0m[1m[31mCrate[0mDisplayName, [0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mName, [0m[1m[31mCrate[0mOrigin, Dependency, Edition, Env,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m10[0m:[0m17[0m:    FileId, Lang[0m[1m[31mCrate[0mOrigin, ProcMacroPaths, ReleaseChannel, TargetLayoutLoadResult,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m23[0m:[0m19[0m:    project_json::[0m[1m[31mCrate[0m,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m25[0m:[0m21[0m:    sysroot::Sysroot[0m[1m[31mCrate[0m,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m30[0m:[0m32[0m:/// A set of cfg-overrides per [0m[1m[31mcrate[0m.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m33[0m:[0m48[0m:    /// A global set of overrides matching all [0m[1m[31mcrate[0ms.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m35[0m:[0m46[0m:    /// A set of overrides matching specific [0m[1m[31mcrate[0ms.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m67[0m:[0m36[0m:        /// FIXME: make this a per-[0m[1m[31mcrate[0m map, as, eg, build.rs might have a
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m87[0m:[0m51[0m:    // In particular, we should split the unified [0m[1m[31mCrate[0mGraph (which currently has maximal durability) into proper [0m[1m[31mcrate[0m graph, and a set of ad hoc roots (with minimal durability).
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m88[0m:[0m106[0m:    // Then, we need to hide the graph behind the queries such that most queries look only at the proper [0m[1m[31mcrate[0m graph, and fall back to ad hoc roots only if there's no results.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m89[0m:[0m132[0m:    // After this, we should be able to tweak the logic in reload.rs to add newly opened files, which don't belong to any existing [0m[1m[31mcrate[0ms, to the set of the detached files.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m92[0m:[0m33[0m:    /// Backed by basic sysroot [0m[1m[31mcrate[0ms for basic completion and highlighting.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m121[0m:[0m39[0m:                    "n_rustc_compiler_[0m[1m[31mcrate[0ms",
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m131[0m:[0m39[0m:                debug_struct.field("n_[0m[1m[31mcrate[0ms", &project.n_[0m[1m[31mcrate[0ms());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m133[0m:[0m51[0m:                    debug_struct.field("n_sysroot_[0m[1m[31mcrate[0ms", &sysroot.[0m[1m[31mcrate[0ms().len());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m256[0m:[0m39[0m:                            features: [0m[1m[31mcrate[0m::CargoFeatures::default(),
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m263[0m:[0m77[0m:                            let buildscripts = WorkspaceBuildScripts::rustc_[0m[1m[31mcrate[0ms(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m508[0m:[0m18[0m:                .[0m[1m[31mcrate[0ms()
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m591[0m:[0m78[0m:                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.[0m[1m[31mcrate[0ms().len());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m592[0m:[0m49[0m:                sysroot_package_len + project.n_[0m[1m[31mcrate[0ms()
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m596[0m:[0m78[0m:                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.[0m[1m[31mcrate[0ms().len());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m600[0m:[0m78[0m:                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.[0m[1m[31mcrate[0ms().len());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m606[0m:[0m15[0m:    pub fn to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m610[0m:[0m11[0m:    ) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m611[0m:[0m54[0m:        let _p = profile::span("ProjectWorkspace::to_[0m[1m[31mcrate[0m_graph");
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m613[0m:[0m18[0m:        let (mut [0m[1m[31mcrate[0m_graph, proc_macros) = match self {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m615[0m:[0m33[0m:                project_json_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m634[0m:[0m27[0m:            } => cargo_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m650[0m:[0m35[0m:                detached_files_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m659[0m:[0m12[0m:        if [0m[1m[31mcrate[0m_graph.patch_cfg_if() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m664[0m:[0m10[0m:        ([0m[1m[31mcrate[0m_graph, proc_macros)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m729[0m:[0m20[0m:fn project_json_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m737[0m:[0m7[0m:) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m738[0m:[0m20[0m:    let mut res = ([0m[1m[31mCrate[0mGraph::default(), ProcMacroPaths::default());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m739[0m:[0m10[0m:    let ([0m[1m[31mcrate[0m_graph, proc_macros) = &mut res;
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m741[0m:[0m20[0m:        sysroot_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m742[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m753[0m:[0m9[0m:    let [0m[1m[31mcrate[0ms: FxHashMap<[0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mId> = project
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m754[0m:[0m10[0m:        .[0m[1m[31mcrate[0ms()
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m755[0m:[0m23[0m:        .filter_map(|([0m[1m[31mcrate[0m_id, krate)| Some(([0m[1m[31mcrate[0m_id, krate, load(&krate.root_module)?)))
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m758[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m759[0m:[0m17[0m:                [0m[1m[31mCrate[0m {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m787[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_graph_[0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m802[0m:[0m25[0m:                        [0m[1m[31mCrate[0mOrigin::Local {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m807[0m:[0m25[0m:                        [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None }
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m818[0m:[0m44[0m:                        proc_macros.insert([0m[1m[31mcrate[0m_graph_[0m[1m[31mcrate[0m_id, node);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m821[0m:[0m18[0m:                ([0m[1m[31mcrate[0m_id, [0m[1m[31mcrate[0m_graph_[0m[1m[31mcrate[0m_id)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m826[0m:[0m34[0m:    for (from, krate) in project.[0m[1m[31mcrate[0ms() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m827[0m:[0m30[0m:        if let Some(&from) = [0m[1m[31mcrate[0ms.get(&from) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m829[0m:[0m36[0m:                public_deps.add_to_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph, from);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m831[0m:[0m40[0m:                    add_proc_macro_dep([0m[1m[31mcrate[0m_graph, from, *proc_macro, krate.is_proc_macro);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m836[0m:[0m36[0m:                if let Some(&to) = [0m[1m[31mcrate[0ms.get(&dep.[0m[1m[31mcrate[0m_id) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m837[0m:[0m29[0m:                    add_dep([0m[1m[31mcrate[0m_graph, from, dep.name.clone(), to)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m845[0m:[0m13[0m:fn cargo_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m857[0m:[0m7[0m:) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m858[0m:[0m38[0m:    let _p = profile::span("cargo_to_[0m[1m[31mcrate[0m_graph");
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m859[0m:[0m20[0m:    let mut res = ([0m[1m[31mCrate[0mGraph::default(), ProcMacroPaths::default());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m860[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = &mut res.0;
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m863[0m:[0m37[0m:        Some(sysroot) => sysroot_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m864[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m877[0m:[0m24[0m:    let mut pkg_to_lib_[0m[1m[31mcrate[0m = FxHashMap::default();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m878[0m:[0m17[0m:    let mut pkg_[0m[1m[31mcrate[0ms = FxHashMap::default();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m879[0m:[0m17[0m:    // Does any [0m[1m[31mcrate[0m signal to rust-analyzer that they need the rustc_private [0m[1m[31mcrate[0ms?
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m882[0m:[0m21[0m:    // Next, create [0m[1m[31mcrate[0ms for each package, target pair
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m889[0m:[0m39[0m:            // Add test cfg for local [0m[1m[31mcrate[0ms
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m905[0m:[0m64[0m:                // A more ideal solution might be to reanalyze [0m[1m[31mcrate[0ms based on where the cursor is and
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m928[0m:[0m34[0m:                if let Some(&(_, [0m[1m[31mcrate[0m_id, _)) =
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m931[0m:[0m25[0m:                    pkg_[0m[1m[31mcrate[0ms.entry(pkg).or_insert_with(Vec::new).push(([0m[1m[31mcrate[0m_id, kind));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m933[0m:[0m37[0m:                    lib_tgt = Some(([0m[1m[31mcrate[0m_id, name.clone()));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m934[0m:[0m32[0m:                    pkg_to_lib_[0m[1m[31mcrate[0m.insert(pkg, [0m[1m[31mcrate[0m_id);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m935[0m:[0m77[0m:                    // sysroot is inside the workspace, prevent the sysroot [0m[1m[31mcrate[0ms from being duplicated here
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m942[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_id = add_target_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m943[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m956[0m:[0m33[0m:                lib_tgt = Some(([0m[1m[31mcrate[0m_id, name.clone()));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m957[0m:[0m28[0m:                pkg_to_lib_[0m[1m[31mcrate[0m.insert(pkg, [0m[1m[31mcrate[0m_id);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m959[0m:[0m21[0m:            // Even [0m[1m[31mcrate[0ms that don't set proc-macro = true are allowed to depend on proc_macro
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m962[0m:[0m36[0m:                add_proc_macro_dep([0m[1m[31mcrate[0m_graph, [0m[1m[31mcrate[0m_id, proc_macro, is_proc_macro);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m965[0m:[0m17[0m:            pkg_[0m[1m[31mcrate[0ms.entry(pkg).or_insert_with(Vec::new).push(([0m[1m[31mcrate[0m_id, kind));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m969[0m:[0m34[0m:        for &(from, kind) in pkg_[0m[1m[31mcrate[0ms.get(&pkg).into_iter().flatten() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m971[0m:[0m32[0m:            public_deps.add_to_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph, from);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m981[0m:[0m32[0m:                    let name = [0m[1m[31mCrate[0mName::normalize_dashes(&name);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m982[0m:[0m29[0m:                    add_dep([0m[1m[31mcrate[0m_graph, from, name, to);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m992[0m:[0m40[0m:            let Some(&to) = pkg_to_lib_[0m[1m[31mcrate[0m.get(&dep.pkg) else { continue };
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m993[0m:[0m37[0m:            let Some(targets) = pkg_[0m[1m[31mcrate[0ms.get(&pkg) else { continue };
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m995[0m:[0m24[0m:            let name = [0m[1m[31mCrate[0mName::new(&dep.name).unwrap();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1002[0m:[0m25[0m:                add_dep([0m[1m[31mcrate[0m_graph, from, name.clone(), to)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1008[0m:[0m87[0m:        // If the user provided a path to rustc sources, we add all the rustc_private [0m[1m[31mcrate[0ms
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1009[0m:[0m52[0m:        // and create dependencies on them for the [0m[1m[31mcrate[0ms which opt-in to that
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1011[0m:[0m26[0m:            handle_rustc_[0m[1m[31mcrate[0ms(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1012[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1014[0m:[0m33[0m:                &mut pkg_to_lib_[0m[1m[31mcrate[0m,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1020[0m:[0m22[0m:                &pkg_[0m[1m[31mcrate[0ms,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1038[0m:[0m22[0m:fn detached_files_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1044[0m:[0m7[0m:) -> ([0m[1m[31mCrate[0mGraph, ProcMacroPaths) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1045[0m:[0m47[0m:    let _p = profile::span("detached_files_to_[0m[1m[31mcrate[0m_graph");
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1046[0m:[0m13[0m:    let mut [0m[1m[31mcrate[0m_graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1048[0m:[0m37[0m:        Some(sysroot) => sysroot_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1049[0m:[0m18[0m:            &mut [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1073[0m:[0m30[0m:            .map(|file_stem| [0m[1m[31mCrate[0mDisplayName::from_canonical_name(file_stem.to_string()));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1074[0m:[0m27[0m:        let detached_file_[0m[1m[31mcrate[0m = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1083[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1091[0m:[0m28[0m:        public_deps.add_to_[0m[1m[31mcrate[0m_graph(&mut [0m[1m[31mcrate[0m_graph, detached_file_[0m[1m[31mcrate[0m);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1093[0m:[0m6[0m:    ([0m[1m[31mcrate[0m_graph, FxHashMap::default())
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1096[0m:[0m17[0m:fn handle_rustc_[0m[1m[31mcrate[0ms(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1097[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1099[0m:[0m16[0m:    pkg_to_lib_[0m[1m[31mcrate[0m: &mut FxHashMap<Package, [0m[1m[31mCrate[0mId>,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1104[0m:[0m27[0m:    libproc_macro: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1105[0m:[0m9[0m:    pkg_[0m[1m[31mcrate[0ms: &FxHashMap<Package, Vec<([0m[1m[31mCrate[0mId, TargetKind)>>,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1112[0m:[0m23[0m:    let mut rustc_pkg_[0m[1m[31mcrate[0ms = FxHashMap::default();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1119[0m:[0m34[0m:        // Iterate through every [0m[1m[31mcrate[0m in the dependency subtree of rustc_driver using BFS
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1124[0m:[0m79[0m:            // N.B. if this line is omitted, we try to analyze over 4_800_000 [0m[1m[31mcrate[0ms
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1126[0m:[0m26[0m:            if rustc_pkg_[0m[1m[31mcrate[0ms.contains_key(&pkg) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1143[0m:[0m64[0m:                // A more ideal solution might be to reanalyze [0m[1m[31mcrate[0ms based on where the cursor is and
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1154[0m:[0m25[0m:                    let [0m[1m[31mcrate[0m_id = add_target_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1155[0m:[0m25[0m:                        [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1167[0m:[0m32[0m:                    pkg_to_lib_[0m[1m[31mcrate[0m.insert(pkg, [0m[1m[31mcrate[0m_id);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1168[0m:[0m72[0m:                    // Add dependencies on core / std / alloc for this [0m[1m[31mcrate[0m
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1169[0m:[0m40[0m:                    public_deps.add_to_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph, [0m[1m[31mcrate[0m_id);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1172[0m:[0m29[0m:                            [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1173[0m:[0m29[0m:                            [0m[1m[31mcrate[0m_id,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1178[0m:[0m31[0m:                    rustc_pkg_[0m[1m[31mcrate[0ms.entry(pkg).or_insert_with(Vec::new).push([0m[1m[31mcrate[0m_id);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1185[0m:[0m26[0m:    for pkg in rustc_pkg_[0m[1m[31mcrate[0ms.keys().copied() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1187[0m:[0m24[0m:            let name = [0m[1m[31mCrate[0mName::new(&dep.name).unwrap();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1188[0m:[0m43[0m:            if let Some(&to) = pkg_to_lib_[0m[1m[31mcrate[0m.get(&dep.pkg) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1189[0m:[0m40[0m:                for &from in rustc_pkg_[0m[1m[31mcrate[0ms.get(&pkg).into_iter().flatten() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1190[0m:[0m29[0m:                    add_dep([0m[1m[31mcrate[0m_graph, from, name.clone(), to);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1195[0m:[0m46[0m:    // Add a dependency on the rustc_private [0m[1m[31mcrate[0ms for all targets of each package
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1198[0m:[0m20[0m:        let name = [0m[1m[31mCrate[0mName::normalize_dashes(&rustc_workspace[dep].name);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1200[0m:[0m39[0m:        if let Some(&to) = pkg_to_lib_[0m[1m[31mcrate[0m.get(&dep) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1206[0m:[0m38[0m:                for (from, _) in pkg_[0m[1m[31mcrate[0ms.get(&pkg).into_iter().flatten() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1210[0m:[0m49[0m:                    // instead of the one from `[0m[1m[31mcrate[0ms.io`
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1211[0m:[0m25[0m:                    if ![0m[1m[31mcrate[0m_graph[*from].dependencies.iter().any(|d| d.name == name) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1212[0m:[0m33[0m:                        add_dep([0m[1m[31mcrate[0m_graph, *from, name.clone(), to);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1220[0m:[0m15[0m:fn add_target_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1221[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1230[0m:[0m11[0m:    rustc_[0m[1m[31mcrate[0m: bool,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1232[0m:[0m6[0m:) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1259[0m:[0m18[0m:        // CARGO_[0m[1m[31mCRATE[0m_NAME is the name of the Cargo target with - converted to _, such as the name of the library, binary, example, integration test, or benchmark.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1260[0m:[0m24[0m:        env.set("CARGO_[0m[1m[31mCRATE[0m_NAME", cname.replace("-", "_"));
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1269[0m:[0m24[0m:    let display_name = [0m[1m[31mCrate[0mDisplayName::from_canonical_name(cargo_name.to_string());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1270[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1279[0m:[0m18[0m:        if rustc_[0m[1m[31mcrate[0m {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1280[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Rustc { name: pkg.name.clone() }
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1282[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) }
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1284[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Library { repo: pkg.repository.clone(), name: pkg.name.clone() }
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1292[0m:[0m31[0m:            None => Some(Err("[0m[1m[31mcrate[0m has not yet been built".to_owned())),
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1295[0m:[0m32[0m:            proc_macros.insert([0m[1m[31mcrate[0m_id, proc_macro);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1299[0m:[0m5[0m:    [0m[1m[31mcrate[0m_id
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1304[0m:[0m16[0m:    deps: Vec<([0m[1m[31mCrate[0mName, [0m[1m[31mCrate[0mId, bool)>,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1308[0m:[0m51[0m:    /// Makes `from` depend on the public sysroot [0m[1m[31mcrate[0ms.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1309[0m:[0m15[0m:    fn add_to_[0m[1m[31mcrate[0m_graph(&self, [0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph, from: [0m[1m[31mCrate[0mId) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1311[0m:[0m34[0m:            add_dep_with_prelude([0m[1m[31mcrate[0m_graph, from, name.clone(), *krate, *prelude);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1316[0m:[0m15[0m:fn sysroot_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1317[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1323[0m:[0m33[0m:) -> (SysrootPublicDeps, Option<[0m[1m[31mCrate[0mId>) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1324[0m:[0m40[0m:    let _p = profile::span("sysroot_to_[0m[1m[31mcrate[0m_graph");
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1326[0m:[0m17[0m:    let sysroot_[0m[1m[31mcrate[0ms: FxHashMap<Sysroot[0m[1m[31mCrate[0m, [0m[1m[31mCrate[0mId> = match &sysroot.hack_cargo_workspace {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1334[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1338[0m:[0m14[0m:            .[0m[1m[31mcrate[0ms()
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1344[0m:[0m21[0m:                    [0m[1m[31mCrate[0mDisplayName::from_canonical_name(sysroot[krate].name.clone());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1345[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1354[0m:[0m21[0m:                    [0m[1m[31mCrate[0mOrigin::Lang(Lang[0m[1m[31mCrate[0mOrigin::from(&*sysroot[krate].name)),
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1358[0m:[0m30[0m:                Some((krate, [0m[1m[31mcrate[0m_id))
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1362[0m:[0m25[0m:    for from in sysroot.[0m[1m[31mcrate[0ms() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1364[0m:[0m24[0m:            let name = [0m[1m[31mCrate[0mName::new(&sysroot[to].name).unwrap();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1365[0m:[0m56[0m:            if let (Some(&from), Some(&to)) = (sysroot_[0m[1m[31mcrate[0ms.get(&from), sysroot_[0m[1m[31mcrate[0ms.get(&to)) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1366[0m:[0m25[0m:                add_dep([0m[1m[31mcrate[0m_graph, from, name, to);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1374[0m:[0m56[0m:            .map(|(name, idx, prelude)| (name, sysroot_[0m[1m[31mcrate[0ms[&idx], prelude))
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1378[0m:[0m68[0m:    let libproc_macro = sysroot.proc_macro().and_then(|it| sysroot_[0m[1m[31mcrate[0ms.get(&it).copied());
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1389[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1391[0m:[0m23[0m:) -> FxHashMap<Sysroot[0m[1m[31mCrate[0m, [0m[1m[31mCrate[0mId> {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1392[0m:[0m33[0m:    let (cg, mut pm) = cargo_to_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1404[0m:[0m5[0m:    [0m[1m[31mcrate[0m_graph.extend(cg, &mut pm);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1405[0m:[0m9[0m:    for [0m[1m[31mcrate[0m_name in ["std", "alloc", "core"] {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1406[0m:[0m24[0m:        let original = [0m[1m[31mcrate[0m_graph
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1409[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph[*x]
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1412[0m:[0m52[0m:                    .map(|x| x.canonical_name() == [0m[1m[31mcrate[0m_name)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1416[0m:[0m18[0m:        let fake_[0m[1m[31mcrate[0m_name = format!("rustc-std-workspace-{}", [0m[1m[31mcrate[0m_name);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1417[0m:[0m20[0m:        let fake = [0m[1m[31mcrate[0m_graph
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1420[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph[*x]
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1423[0m:[0m57[0m:                    .map(|x| x.canonical_name() == fake_[0m[1m[31mcrate[0m_name)
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1427[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph.remove_and_replace(fake, original).unwrap();
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1429[0m:[0m19[0m:    for (_, c) in [0m[1m[31mcrate[0m_graph.iter_mut() {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1431[0m:[0m20[0m:            // Lang[0m[1m[31mCrate[0mOrigin::Other is good enough for a hack.
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1432[0m:[0m24[0m:            c.origin = [0m[1m[31mCrate[0mOrigin::Lang(Lang[0m[1m[31mCrate[0mOrigin::Other);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1436[0m:[0m10[0m:        .[0m[1m[31mcrate[0ms()
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1439[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.[0m[1m[31mcrate[0m_id_for_[0m[1m[31mcrate[0m_root(file_id)?;
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1440[0m:[0m26[0m:            Some((krate, [0m[1m[31mcrate[0m_id))
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1445[0m:[0m24[0m:fn add_dep(graph: &mut [0m[1m[31mCrate[0mGraph, from: [0m[1m[31mCrate[0mId, name: [0m[1m[31mCrate[0mName, to: [0m[1m[31mCrate[0mId) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1450[0m:[0m17[0m:    graph: &mut [0m[1m[31mCrate[0mGraph,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1451[0m:[0m11[0m:    from: [0m[1m[31mCrate[0mId,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1452[0m:[0m11[0m:    name: [0m[1m[31mCrate[0mName,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1453[0m:[0m9[0m:    to: [0m[1m[31mCrate[0mId,
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1459[0m:[0m23[0m:fn add_proc_macro_dep([0m[1m[31mcrate[0m_graph: &mut [0m[1m[31mCrate[0mGraph, from: [0m[1m[31mCrate[0mId, to: [0m[1m[31mCrate[0mId, prelude: bool) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1460[0m:[0m26[0m:    add_dep_with_prelude([0m[1m[31mcrate[0m_graph, from, [0m[1m[31mCrate[0mName::new("proc_macro").unwrap(), to, prelude);
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1463[0m:[0m30[0m:fn add_dep_inner(graph: &mut [0m[1m[31mCrate[0mGraph, from: [0m[1m[31mCrate[0mId, dep: Dependency) {
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1472[0m:[0m112[0m:/// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-[0m[1m[31mcrate[0ms>
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1494[0m:[0m66[0m:    // FIXME: This isn't really correct (a package can have many [0m[1m[31mcrate[0ms with different names), but
[0m[35mcrates/project-model/src/workspace.rs[0m:[0m[32m1496[0m:[0m20[0m:    env.set("CARGO_[0m[1m[31mCRATE[0m_NAME", [0m[1m[31mCrate[0mName::normalize_dashes(&package.name).to_string());
[0m[35mcrates/parser/test_data/parser/inline/ok/0153_pub_parens_typepath.rs[0m:[0m[32m2[0m:[0m15[0m:struct B(pub ([0m[1m[31mcrate[0m::A,));
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_rename.rs[0m:[0m[32m1[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo as bar;
[0m[35mcrates/parser/test_data/parser/inline/ok/0117_macro_call_type.rs[0m:[0m[32m2[0m:[0m10[0m:type B = [0m[1m[31mcrate[0m::foo!();
[0m[35mcrates/parser/test_data/parser/inline/ok/0067_crate_path.rast[0m:[0m[32m10[0m:[0m15[0m:              [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0153_pub_parens_typepath.rast[0m:[0m[32m47[0m:[0m21[0m:                    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_self.rast[0m:[0m[32m2[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_self.rast[0m:[0m[32m5[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0160_crate_visibility_in.rast[0m:[0m[32m34[0m:[0m13[0m:            [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0067_crate_path.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo;
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_self.rs[0m:[0m[32m1[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self;
[0m[35mcrates/parser/test_data/parser/inline/ok/0060_extern_crate.rs[0m:[0m[32m1[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/parser/test_data/parser/inline/ok/0060_extern_crate.rast[0m:[0m[32m2[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/inline/ok/0060_extern_crate.rast[0m:[0m[32m5[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0022_crate_visibility.rast[0m:[0m[32m9[0m:[0m13[0m:            [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_rename.rast[0m:[0m[32m2[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/inline/ok/0168_extern_crate_rename.rast[0m:[0m[32m5[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0022_crate_visibility.rs[0m:[0m[32m1[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct S;
[0m[35mcrates/parser/test_data/parser/inline/ok/0177_use_tree_path.rast[0m:[0m[32m66[0m:[0m15[0m:              [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/ok/0160_crate_visibility_in.rs[0m:[0m[32m2[0m:[0m8[0m:pub(in [0m[1m[31mcrate[0m) struct S;
[0m[35mcrates/parser/test_data/parser/inline/ok/0177_use_tree_path.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::m;
[0m[35mcrates/parser/test_data/parser/inline/ok/0117_macro_call_type.rast[0m:[0m[32m36[0m:[0m17[0m:                [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/inline/err/0015_empty_segment.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::;
[0m[35mcrates/parser/test_data/parser/inline/err/0015_empty_segment.rast[0m:[0m[32m10[0m:[0m15[0m:              [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/lexer/ok/keywords.rast[0m:[0m[32m23[0m:[0m1[0m:[0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/lexer/ok/keywords.rs[0m:[0m[32m1[0m:[0m58[0m:async fn use struct trait enum impl true false as extern [0m[1m[31mcrate[0m
[0m[35mcrates/parser/test_data/lexer/ok/keywords.txt[0m:[0m[32m23[0m:[0m1[0m:[0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/ide-diagnostics/src/handlers/unimplemented_builtin_macro.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/unimplemented_builtin_macro.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unimplemented_builtin_macro(
[0m[35mcrates/ide-diagnostics/src/handlers/undeclared_label.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/undeclared_label.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn undeclared_label(
[0m[35mcrates/ide-diagnostics/src/handlers/undeclared_label.rs[0m:[0m[32m19[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m3[0m:[0m34[0m:// Diagnostic: unresolved-extern-[0m[1m[31mcrate[0m
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m5[0m:[0m88[0m:// This diagnostic is triggered if rust-analyzer is unable to discover referred extern [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_extern_[0m[1m[31mcrate[0m(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m8[0m:[0m30[0m:    d: &hir::UnresolvedExtern[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m12[0m:[0m59[0m:        DiagnosticCode::RustcHardError("unresolved-extern-[0m[1m[31mcrate[0m"),
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m13[0m:[0m28[0m:        "unresolved extern [0m[1m[31mcrate[0m",
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m20[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m23[0m:[0m26[0m:    fn unresolved_extern_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m26[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m27[0m:[0m8[0m:extern [0m[1m[31mcrate[0m core;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m28[0m:[0m10[0m:  extern [0m[1m[31mcrate[0m doesnotexist;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m29[0m:[0m55[0m://^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern [0m[1m[31mcrate[0m
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m30[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m36[0m:[0m15[0m:    fn extern_[0m[1m[31mcrate[0m_self_as() {
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m37[0m:[0m33[0m:        cov_mark::check!(extern_[0m[1m[31mcrate[0m_self_as);
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m41[0m:[0m10[0m:  extern [0m[1m[31mcrate[0m doesnotexist;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m42[0m:[0m55[0m://^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern [0m[1m[31mcrate[0m
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_extern_crate.rs[0m:[0m[32m44[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self as foo;
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Assist, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn no_such_field(ctx: &DiagnosticsContext<'_>, d: &hir::NoSuchField) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m100[0m:[0m34[0m:        new_field = format!("pub([0m[1m[31mcrate[0m) {new_field}");
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m131[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix, check_no_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m177[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m186[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(my_val: usize, bar: bool) -> Self {
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m190[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(my_val: usize, _bar: bool) -> Self {
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m202[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m225[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo
[0m[35mcrates/ide-diagnostics/src/handlers/no_such_field.rs[0m:[0m[32m318[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) baz: bool
[0m[35mcrates/ide-diagnostics/src/handlers/mutability_errors.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/mutability_errors.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn need_mut(ctx: &DiagnosticsContext<'_>, d: &hir::NeedMut) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/mutability_errors.rs[0m:[0m[32m48[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unused_mut(ctx: &DiagnosticsContext<'_>, d: &hir::UnusedMut) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/mutability_errors.rs[0m:[0m[32m89[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/mismatched_arg_count.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{adjusted_display_range, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/mismatched_arg_count.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn mismatched_tuple_struct_pat_arg_count(
[0m[35mcrates/ide-diagnostics/src/handlers/mismatched_arg_count.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn mismatched_arg_count(
[0m[35mcrates/ide-diagnostics/src/handlers/mismatched_arg_count.rs[0m:[0m[32m110[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn macro_def_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroDefError) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m34[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m63[0m:[0m50[0m:        // FIXME: this is incorrectly handling `$[0m[1m[31mcrate[0m`, resulting in a wrong diagnostic.
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m68[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:core
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m77[0m:[0m25[0m:        panic!(concat!($[0m[1m[31mcrate[0m::private::concat!("")));
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m83[0m:[0m35[0m:  //^^^^ error: unresolved macro $[0m[1m[31mcrate[0m::private::concat
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m86[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m93[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::panicking::panic_str($msg)
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m214[0m:[0m15[0m:    fn dollar_[0m[1m[31mcrate[0m_in_builtin_macro() {
[0m[35mcrates/ide-diagnostics/src/handlers/macro_error.rs[0m:[0m[32m227[0m:[0m10[0m:        $[0m[1m[31mcrate[0m::format_args!( "", $[0m[1m[31mcrate[0m::arg!(1) )
[0m[35mcrates/ide-diagnostics/src/handlers/invalid_derive_target.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/invalid_derive_target.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn invalid_derive_target(
[0m[35mcrates/ide-diagnostics/src/handlers/invalid_derive_target.rs[0m:[0m[32m22[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn private_assoc_item(
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m43[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m133[0m:[0m14[0m:        impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m134[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) fn method(self) {}
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m135[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) const A: usize = 42;
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m140[0m:[0m18[0m:            impl [0m[1m[31mcrate[0m::S {
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m141[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) fn method2(self) {}
[0m[35mcrates/ide-diagnostics/src/handlers/private_assoc_item.rs[0m:[0m[32m142[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) const B: usize = 42;
[0m[35mcrates/parser/test_data/parser/ok/0034_crate_path_in_call.rs[0m:[0m[32m2[0m:[0m16[0m:    make_query([0m[1m[31mcrate[0m::module_map::module_tree);
[0m[35mcrates/parser/test_data/parser/ok/0012_visibility.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn c() {}
[0m[35mcrates/parser/test_data/parser/ok/0034_crate_path_in_call.rast[0m:[0m[32m30[0m:[0m27[0m:                          [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/ok/0035_weird_exprs.rs[0m:[0m[32m103[0m:[0m13[0m:            [0m[1m[31mcrate[0m::u8(0u8);
[0m[35mcrates/parser/test_data/parser/ok/0035_weird_exprs.rast[0m:[0m[32m1486[0m:[0m25[0m:                        [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m2[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m5[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m11[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m14[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m26[0m:[0m10[0m:  EXTERN_[0m[1m[31mCRATE[0m
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rast[0m:[0m[32m29[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rs[0m:[0m[32m1[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rs[0m:[0m[32m2[0m:[0m8[0m:extern [0m[1m[31mcrate[0m foo as bar;
[0m[35mcrates/parser/test_data/parser/ok/0007_extern_crate.rs[0m:[0m[32m3[0m:[0m8[0m:extern [0m[1m[31mcrate[0m self as baz;
[0m[35mcrates/parser/test_data/parser/ok/0012_visibility.rast[0m:[0m[32m60[0m:[0m13[0m:            [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/parser/test_data/parser/err/0035_use_recover.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::baz;
[0m[35mcrates/parser/test_data/parser/err/0035_use_recover.rast[0m:[0m[32m28[0m:[0m15[0m:              [0m[1m[31mCRATE[0m_KW "[0m[1m[31mcrate[0m"
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_import(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m26[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m69[0m:[0m48[0m:    fn dedup_unresolved_import_from_unresolved_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m72[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m74[0m:[0m12[0m:    extern [0m[1m[31mcrate[0m doesnotexist;
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m75[0m:[0m57[0m:  //^^^^^^^^^^^^^^^^^^^^^^^^^^ error: unresolved extern [0m[1m[31mcrate[0m
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m77[0m:[0m67[0m:    // Should not error, since we already errored for the missing [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_import.rs[0m:[0m[32m80[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::doesnotexist;
[0m[35mcrates/ide-diagnostics/src/handlers/field_shorthand.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode};
[0m[35mcrates/ide-diagnostics/src/handlers/field_shorthand.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn field_shorthand(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {
[0m[35mcrates/ide-diagnostics/src/handlers/field_shorthand.rs[0m:[0m[32m110[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/unused_variables.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/unused_variables.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unused_variables(
[0m[35mcrates/ide-diagnostics/src/handlers/unused_variables.rs[0m:[0m[32m21[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/moved_out_of_ref.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/moved_out_of_ref.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn moved_out_of_ref(ctx: &DiagnosticsContext<'_>, d: &hir::MovedOutOfRef) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/moved_out_of_ref.rs[0m:[0m[32m19[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/missing_unsafe.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{fix, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/missing_unsafe.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn missing_unsafe(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/missing_unsafe.rs[0m:[0m[32m95[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix, check_no_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/type_mismatch.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{adjusted_display_range, fix, Assist, Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/type_mismatch.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/type_mismatch.rs[0m:[0m[32m198[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix, check_no_fix};
[0m[35mcrates/parser/src/input.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::SyntaxKind;
[0m[35mcrates/parser/src/input.rs[0m:[0m[32m65[0m:[0m9[0m:/// pub([0m[1m[31mcrate[0m) impl used by the parser to consume `Tokens`.
[0m[35mcrates/parser/src/input.rs[0m:[0m[32m67[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn kind(&self, idx: usize) -> SyntaxKind {
[0m[35mcrates/parser/src/input.rs[0m:[0m[32m70[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn contextual_kind(&self, idx: usize) -> SyntaxKind {
[0m[35mcrates/parser/src/input.rs[0m:[0m[32m73[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_joint(&self, n: usize) -> bool {
[0m[35mcrates/parser/src/tests/sourcegen_inline_tests.rs[0m:[0m[32m12[0m:[0m65[0m:    let grammar_dir = sourcegen::project_root().join(Path::new("[0m[1m[31mcrate[0ms/parser/src/grammar"));
[0m[35mcrates/parser/src/tests/sourcegen_inline_tests.rs[0m:[0m[32m15[0m:[0m31[0m:    install_tests(&tests.ok, "[0m[1m[31mcrate[0ms/parser/test_data/parser/inline/ok");
[0m[35mcrates/parser/src/tests/sourcegen_inline_tests.rs[0m:[0m[32m16[0m:[0m32[0m:    install_tests(&tests.err, "[0m[1m[31mcrate[0ms/parser/test_data/parser/inline/err");
[0m[35mcrates/ide-diagnostics/src/handlers/typed_hole.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/typed_hole.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn typed_hole(ctx: &DiagnosticsContext<'_>, d: &hir::TypedHole) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/typed_hole.rs[0m:[0m[32m82[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fixes};
[0m[35mcrates/parser/src/lexed_str.rs[0m:[0m[32m3[0m:[0m52[0m://! Note that strictly speaking the parser in this [0m[1m[31mcrate[0m is not required to work
[0m[35mcrates/parser/src/lexed_str.rs[0m:[0m[32m5[0m:[0m61[0m://! of thin air. So, ideally, lexer should be an orthogonal [0m[1m[31mcrate[0m. It is however
[0m[35mcrates/parser/src/lexed_str.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/event.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/event.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Event {
[0m[35mcrates/parser/src/event.rs[0m:[0m[32m90[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn tombstone() -> Self {
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext, Severity};
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unresolved_proc_macro(
[0m[35mcrates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs[0m:[0m[32m33[0m:[0m31[0m:    let def_map = ctx.sema.db.[0m[1m[31mcrate[0m_def_map(d.krate);
[0m[35mcrates/ide-diagnostics/src/handlers/incorrect_case.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-diagnostics/src/handlers/incorrect_case.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/incorrect_case.rs[0m:[0m[32m55[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_diagnostics, check_fix};
[0m[35mcrates/ide-diagnostics/src/handlers/incorrect_case.rs[0m:[0m[32m341[0m:[0m25[0m:    fn allow_attributes_[0m[1m[31mcrate[0m_attr() {
[0m[35mcrates/ide-diagnostics/src/handlers/incorrect_case.rs[0m:[0m[32m356[0m:[0m24[0m:    fn CheckItWorksWith[0m[1m[31mCrate[0mAttr(BAD_NAME_HI: u8) {
[0m[35mcrates/parser/src/tests/top_entries.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::TopEntryPoint;
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m3[0m:[0m15[0m://! NOTE: The [0m[1m[31mcrate[0m is undergoing refactors, don't believe everything the docs
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m8[0m:[0m25[0m://! a consequence, this [0m[1m[31mcrate[0m does not contain a lexer.
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m16[0m:[0m20[0m://! Tests for this [0m[1m[31mcrate[0m live in the `syntax` [0m[1m[31mcrate[0m.
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m18[0m:[0m17[0m://! [`Parser`]: [0m[1m[31mcrate[0m::parser::Parser
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use token_set::TokenSet;
[0m[35mcrates/parser/src/lib.rs[0m:[0m[32m39[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/syntax_kind/generated.rs[0m:[0m[32m71[0m:[0m5[0m:    [0m[1m[31mCRATE[0m_KW,
[0m[35mcrates/parser/src/syntax_kind/generated.rs[0m:[0m[32m137[0m:[0m12[0m:    EXTERN_[0m[1m[31mCRATE[0m,
[0m[35mcrates/parser/src/syntax_kind/generated.rs[0m:[0m[32m288[0m:[0m19[0m:                | [0m[1m[31mCRATE[0m_KW
[0m[35mcrates/parser/src/syntax_kind/generated.rs[0m:[0m[32m406[0m:[0m14[0m:            "[0m[1m[31mcrate[0m" => [0m[1m[31mCRATE[0m_KW,
[0m[35mcrates/parser/src/syntax_kind/generated.rs[0m:[0m[32m499[0m:[0m30[0m:macro_rules ! T { [;] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SEMICOLON } ; [,] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: COMMA } ; ['('] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: L_PAREN } ; [')'] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: R_PAREN } ; ['{'] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: L_CURLY } ; ['}'] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: R_CURLY } ; ['['] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: L_BRACK } ; [']'] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: R_BRACK } ; [<] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: L_ANGLE } ; [>] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: R_ANGLE } ; [@] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AT } ; [#] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: POUND } ; [~] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: TILDE } ; [?] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: QUESTION } ; [$] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DOLLAR } ; [&] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AMP } ; [|] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PIPE } ; [+] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PLUS } ; [*] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: STAR } ; [/] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SLASH } ; [^] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: CARET } ; [%] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PERCENT } ; [_] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: UNDERSCORE } ; [.] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DOT } ; [..] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DOT2 } ; [...] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DOT3 } ; [..=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DOT2EQ } ; [:] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: COLON } ; [::] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: COLON2 } ; [=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: EQ } ; [==] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: EQ2 } ; [=>] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: FAT_ARROW } ; [!] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: BANG } ; [!=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: NEQ } ; [-] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MINUS } ; [->] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: LTEQ } ; [>=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: GTEQ } ; [+=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PLUSEQ } ; [-=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MINUSEQ } ; [|=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PIPEEQ } ; [&=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AMPEQ } ; [^=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: CARETEQ } ; [/=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SLASHEQ } ; [*=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: STAREQ } ; [%=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AMP2 } ; [||] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PIPE2 } ; [<<] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SHL } ; [>>] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SHR } ; [<<=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SHLEQ } ; [>>=] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SHREQ } ; [as] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AS_KW } ; [async] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: ASYNC_KW } ; [await] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AWAIT_KW } ; [box] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: BOX_KW } ; [break] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: BREAK_KW } ; [const] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: CONST_KW } ; [continue] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: CONTINUE_KW } ; [[0m[1m[31mcrate[0m] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: [0m[1m[31mCRATE[0m_KW } ; [do] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DO_KW } ; [dyn] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DYN_KW } ; [else] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: ELSE_KW } ; [enum] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: ENUM_KW } ; [extern] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: EXTERN_KW } ; [false] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: FALSE_KW } ; [fn] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: FN_KW } ; [for] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: FOR_KW } ; [if] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: IF_KW } ; [impl] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: IMPL_KW } ; [in] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: IN_KW } ; [let] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: LET_KW } ; [loop] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: LOOP_KW } ; [macro] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MACRO_KW } ; [match] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MATCH_KW } ; [mod] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MOD_KW } ; [move] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MOVE_KW } ; [mut] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MUT_KW } ; [pub] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: PUB_KW } ; [ref] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: REF_KW } ; [return] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: RETURN_KW } ; [self] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SELF_KW } ; [Self] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: STATIC_KW } ; [struct] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: STRUCT_KW } ; [super] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SUPER_KW } ; [trait] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: TRAIT_KW } ; [true] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: TRUE_KW } ; [try] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: TRY_KW } ; [type] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: USE_KW } ; [where] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: WHERE_KW } ; [while] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: WHILE_KW } ; [yield] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: YIELD_KW } ; [auto] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: AUTO_KW } ; [builtin] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: BUILTIN_KW } ; [default] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: UNION_KW } ; [raw] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: MACRO_RULES_KW } ; [yeet] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: YEET_KW } ; [offset_of] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: OFFSET_OF_KW } ; [asm] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: ASM_KW } ; [format_args] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: FORMAT_ARGS_KW } ; [lifetime_ident] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: IDENT } ; [shebang] => { $ [0m[1m[31mcrate[0m :: SyntaxKind :: SHEBANG } ; }
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{LexedStr, TopEntryPoint};
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m99[0m:[0m9[0m:        [0m[1m[31mcrate[0m::StrStep::Token { kind, text } => {
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m104[0m:[0m9[0m:        [0m[1m[31mcrate[0m::StrStep::Enter { kind } => {
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m110[0m:[0m9[0m:        [0m[1m[31mcrate[0m::StrStep::Exit => {
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m116[0m:[0m9[0m:        [0m[1m[31mcrate[0m::StrStep::Error { msg, pos } => {
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m150[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_root_dir = Path::new(env!("CARGO_MANIFEST_DIR"));
[0m[35mcrates/parser/src/tests.rs[0m:[0m[32m151[0m:[0m29[0m:        let test_data_dir = [0m[1m[31mcrate[0m_root_dir.join("test_data");
[0m[35mcrates/ide-diagnostics/src/handlers/private_field.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Diagnostic, DiagnosticCode, DiagnosticsContext};
[0m[35mcrates/ide-diagnostics/src/handlers/private_field.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn private_field(ctx: &DiagnosticsContext<'_>, d: &hir::PrivateField) -> Diagnostic {
[0m[35mcrates/ide-diagnostics/src/handlers/private_field.rs[0m:[0m[32m22[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_diagnostics;
[0m[35mcrates/ide-diagnostics/src/handlers/private_field.rs[0m:[0m[32m76[0m:[0m13[0m:        use [0m[1m[31mcrate[0m as ForceParentBlockDefMap;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m10[0m:[0m73[0m://! Instead, we "bubble up" raw, structured diagnostics until the `hir` [0m[1m[31mcrate[0m,
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod break_outside_of_loop;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod expected_function;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod inactive_code;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m32[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod incoherent_impl;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod incorrect_case;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m34[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod invalid_derive_target;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m35[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod macro_error;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m36[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod malformed_derive;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m37[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod mismatched_arg_count;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod missing_fields;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod missing_match_arms;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod missing_unsafe;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod moved_out_of_ref;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m42[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod mutability_errors;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod no_such_field;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m44[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod private_assoc_item;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod private_field;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m46[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod replace_filter_map_next_with_find_map;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m47[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod typed_hole;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m48[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod type_mismatch;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unimplemented_builtin_macro;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_extern_[0m[1m[31mcrate[0m;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_field;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m52[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_method;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_import;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m54[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_macro_call;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m55[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_module;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m56[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unresolved_proc_macro;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m57[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod undeclared_label;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m58[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unreachable_label;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m59[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unused_variables;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod field_shorthand;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m63[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod useless_braces;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod unlinked_file;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m65[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod json_is_not_rust;
[0m[35mcrates/ide-diagnostics/src/lib.rs[0m:[0m[32m364[0m:[0m44[0m:            AnyDiagnostic::UnresolvedExtern[0m[1m[31mCrate[0m(d) => handlers::unresolved_extern_[0m[1m[31mcrate[0m::unresolved_extern_[0m[1m[31mcrate[0m(&ctx, &d),
[0m[35mcrates/ide-diagnostics/src/tests/sourcegen.rs[0m:[0m[32m26[0m:[0m49[0m:        let handlers_dir = project_root().join("[0m[1m[31mcrate[0ms/ide-diagnostics/src/handlers");
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::SyntaxKind;
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TokenSet(u128);
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m10[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const EMPTY: TokenSet = TokenSet(0);
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m12[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const fn new(kinds: &[SyntaxKind]) -> TokenSet {
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const fn union(self, other: TokenSet) -> TokenSet {
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const fn contains(&self, kind: SyntaxKind) -> bool {
[0m[35mcrates/parser/src/token_set.rs[0m:[0m[32m37[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::SyntaxKind::*;
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use self::{
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m38[0m:[0m8[0m:    T![[0m[1m[31mcrate[0m],
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m220[0m:[0m32[0m:        T![extern] if la == T![[0m[1m[31mcrate[0m] => extern_[0m[1m[31mcrate[0m(p, m),
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m240[0m:[0m16[0m:// test extern_[0m[1m[31mcrate[0m
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m241[0m:[0m11[0m:// extern [0m[1m[31mcrate[0m foo;
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m242[0m:[0m11[0m:fn extern_[0m[1m[31mcrate[0m(p: &mut Parser<'_>, m: Marker) {
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m244[0m:[0m15[0m:    p.bump(T![[0m[1m[31mcrate[0m]);
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m247[0m:[0m24[0m:        // test extern_[0m[1m[31mcrate[0m_self
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m248[0m:[0m19[0m:        // extern [0m[1m[31mcrate[0m self;
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m256[0m:[0m20[0m:    // test extern_[0m[1m[31mcrate[0m_rename
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m257[0m:[0m15[0m:    // extern [0m[1m[31mcrate[0m foo as bar;
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m260[0m:[0m26[0m:    m.complete(p, EXTERN_[0m[1m[31mCRATE[0m);
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m265[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn mod_item(p: &mut Parser<'_>, m: Marker) {
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m308[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn item_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m317[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extern_item_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items.rs[0m:[0m[32m441[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn token_tree(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items/adt.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::grammar::attributes::ATTRIBUTE_FIRST;
[0m[35mcrates/parser/src/grammar/items/adt.rs[0m:[0m[32m68[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn variant_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items/adt.rs[0m:[0m[32m111[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn record_field_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items/traits.rs[0m:[0m[32m83[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn assoc_item_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/items/traits.rs[0m:[0m[32m134[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn impl_type(p: &mut Parser<'_>) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{DiagnosticsConfig, ExprFillDefaultMode, Severity};
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_fixes(ra_fixture_before: &str, ra_fixtures_after: Vec<&str>) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m71[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_no_fix(ra_fixture: &str) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m84[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_expect(ra_fixture: &str, expect: Expect) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m96[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_diagnostics(ra_fixture: &str) {
[0m[35mcrates/ide-diagnostics/src/tests.rs[0m:[0m[32m103[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_diagnostics_with_config(config: DiagnosticsConfig, ra_fixture: &str) {
[0m[35mcrates/parser/src/grammar/items/use_item.rs[0m:[0m[32m40[0m:[0m16[0m:        // use [0m[1m[31mcrate[0m::m;
[0m[35mcrates/parser/src/grammar/items/use_item.rs[0m:[0m[32m81[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn use_tree_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/params.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::grammar::attributes::ATTRIBUTE_FIRST;
[0m[35mcrates/parser/src/grammar/expressions/atom.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::grammar::types::type_;
[0m[35mcrates/parser/src/grammar/expressions/atom.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const LITERAL_FIRST: TokenSet = TokenSet::new(&[
[0m[35mcrates/parser/src/grammar/expressions/atom.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn literal(p: &mut Parser<'_>) -> Option<CompletedMarker> {
[0m[35mcrates/parser/src/grammar/expressions/atom.rs[0m:[0m[32m492[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn match_arm_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/expressions/atom.rs[0m:[0m[32m590[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn block_expr(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/patterns.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn pattern(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/patterns.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn pattern_single(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/expressions.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::grammar::attributes::ATTRIBUTE_FIRST;
[0m[35mcrates/parser/src/grammar/expressions.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use atom::{block_expr, match_arm_list};
[0m[35mcrates/parser/src/grammar/expressions.rs[0m:[0m[32m649[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn record_expr_field_list(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::SyntaxKind;
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m11[0m:[0m38[0m:/// interspersed into the original [`[0m[1m[31mcrate[0m::Input`]. The output is fundamentally
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m13[0m:[0m13[0m:/// times [`[0m[1m[31mcrate[0m::Input::push`] was called.
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn float_split_hack(&mut self, ends_in_dot: bool) {
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m94[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn enter_node(&mut self, kind: SyntaxKind) {
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m101[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn leave_node(&mut self) {
[0m[35mcrates/parser/src/output.rs[0m:[0m[32m106[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn error(&mut self, error: String) {
[0m[35mcrates/parser/src/grammar/types.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/types.rs[0m:[0m[32m302[0m:[0m13[0m:// type B = [0m[1m[31mcrate[0m::foo!();
[0m[35mcrates/parser/src/shortcuts.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/parser/src/shortcuts.rs[0m:[0m[32m28[0m:[0m31[0m:    pub fn to_input(&self) -> [0m[1m[31mcrate[0m::Input {
[0m[35mcrates/parser/src/shortcuts.rs[0m:[0m[32m29[0m:[0m23[0m:        let mut res = [0m[1m[31mcrate[0m::Input::default();
[0m[35mcrates/parser/src/shortcuts.rs[0m:[0m[32m65[0m:[0m18[0m:        output: &[0m[1m[31mcrate[0m::Output,
[0m[35mcrates/parser/src/shortcuts.rs[0m:[0m[32m230[0m:[0m18[0m:        | EXTERN_[0m[1m[31mCRATE[0m => {
[0m[35mcrates/project-model/test_data/hello-world-project.json[0m:[0m[32m3[0m:[0m6[0m:    "[0m[1m[31mcrate[0ms": [
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m4[0m:[0m52[0m:    TokenSet::new(&[IDENT, T![self], T![super], T![[0m[1m[31mcrate[0m], T![Self], T![:], T![<]]);
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m12[0m:[0m43[0m:        IDENT | T![self] | T![super] | T![[0m[1m[31mcrate[0m] => true,
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_path(p: &mut Parser<'_>) {
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_path_for_qualifier(
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m107[0m:[0m21[0m:            // test [0m[1m[31mcrate[0m_path
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m108[0m:[0m20[0m:            // use [0m[1m[31mcrate[0m::foo;
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m109[0m:[0m39[0m:            T![self] | T![super] | T![[0m[1m[31mcrate[0m] | T![Self] => {
[0m[35mcrates/parser/src/grammar/paths.rs[0m:[0m[32m123[0m:[0m28[0m:                    // use [0m[1m[31mcrate[0m::;
[0m[35mcrates/cfg/src/tests.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{CfgAtom, CfgExpr, CfgOptions, DnfExpr};
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m2[0m:[0m8[0m:    0: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m11[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m12[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m32[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m46[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m47[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m65[0m:[0m8[0m:    1: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m74[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m75[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m95[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m109[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m110[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m116[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m117[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m135[0m:[0m8[0m:    2: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m144[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m145[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m165[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "an_example",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m179[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m180[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m186[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m187[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m205[0m:[0m8[0m:    3: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m214[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m215[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m235[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "it",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m249[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m250[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m256[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m257[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m275[0m:[0m8[0m:    4: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m284[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m285[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_wildcard_overrides.txt[0m:[0m[32m319[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "libc",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m2[0m:[0m8[0m:    0: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m11[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m12[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m33[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m47[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m48[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m66[0m:[0m8[0m:    1: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m75[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m76[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m97[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m111[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m112[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m118[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m119[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m137[0m:[0m8[0m:    2: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m146[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m147[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m168[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "an_example",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m182[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m183[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m189[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m190[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m208[0m:[0m8[0m:    3: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m217[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m218[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m239[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "it",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m253[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m254[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m260[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m261[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m279[0m:[0m8[0m:    4: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m288[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m289[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model.txt[0m:[0m[32m323[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "libc",
[0m[35mcrates/parser/src/grammar/generic_params.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::grammar::attributes::ATTRIBUTE_FIRST;
[0m[35mcrates/cfg/src/dnf.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{CfgAtom, CfgDiff, CfgExpr, CfgOptions, InactiveReason};
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m2[0m:[0m8[0m:    0: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m9[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m10[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m27[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(1),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m28[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m43[0m:[0m8[0m:    1: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m50[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m51[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m76[0m:[0m8[0m:    2: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m83[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m84[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m109[0m:[0m8[0m:    3: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m116[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m117[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m142[0m:[0m8[0m:    4: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m149[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m150[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m167[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(6),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m168[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m174[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(1),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m175[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m190[0m:[0m8[0m:    5: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m197[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m198[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m223[0m:[0m8[0m:    6: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m230[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m231[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m248[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m249[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m255[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(3),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m256[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m262[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(2),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m263[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m269[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(1),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m270[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m276[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(5),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m277[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m283[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(9),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m284[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m290[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(7),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m291[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m297[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(8),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m298[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m313[0m:[0m8[0m:    7: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m320[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m321[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m346[0m:[0m8[0m:    8: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m353[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m354[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m379[0m:[0m8[0m:    9: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m386[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m387[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m412[0m:[0m9[0m:    10: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m419[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m420[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m437[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(1),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m438[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m444[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m445[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m451[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(6),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m452[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m458[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(8),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m459[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m465[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/rust_project_hello_world_project_model.txt[0m:[0m[32m466[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/paths/Cargo.toml[0m:[0m[32m15[0m:[0m53[0m:# Adding this dep sadly puts a lot of rust-analyzer [0m[1m[31mcrate[0ms after the
[0m[35mcrates/paths/Cargo.toml[0m:[0m[32m16[0m:[0m16[0m:# serde-derive [0m[1m[31mcrate[0m. Even though we don't activate the derive feature here,
[0m[35mcrates/paths/Cargo.toml[0m:[0m[32m17[0m:[0m23[0m:# someone else in the [0m[1m[31mcrate[0m graph certainly does!
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6[0m:[0m79[0m:            "id": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m10[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m14[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m30[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m34[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-0.7.20/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m49[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-0.7.20/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m77[0m:[0m69[0m:            "id": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m81[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m85[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m97[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m113[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m117[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m127[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m131[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/src/bin/gcc-shim.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m141[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m145[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cc_env.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m155[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m159[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cflags.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m169[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m173[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cxxflags.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m183[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m187[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/test.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m202[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m226[0m:[0m73[0m:            "id": "cfg-if 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m230[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m234[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m246[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m262[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m266[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-0.1.10/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m276[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m279[0m:[0m31[0m:                    "name": "x[0m[1m[31mcrate[0m",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m280[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-0.1.10/tests/x[0m[1m[31mcrate[0m.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m299[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-0.1.10/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m319[0m:[0m72[0m:            "id": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m323[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m327[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m339[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m355[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m359[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m369[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m372[0m:[0m31[0m:                    "name": "x[0m[1m[31mcrate[0m",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m373[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/tests/x[0m[1m[31mcrate[0m.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m392[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m412[0m:[0m72[0m:            "id": "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m416[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m420[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m432[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m447[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m461[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m477[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m481[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m491[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m495[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/src/wordlist.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m505[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m509[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/cargo.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m519[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m523[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/cp.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m533[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m537[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/decode.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m547[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m551[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/hashmap.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m561[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m565[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/optional_command.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m575[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m579[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/examples/verbose_multiple.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m587[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/docopt-1.1.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m614[0m:[0m75[0m:            "id": "getrandom 0.2.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m618[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m622[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m634[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m646[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m658[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m670[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m682[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m694[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m706[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m722[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m726[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m736[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m740[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/tests/custom.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m750[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m754[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/tests/normal.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m764[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m768[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/tests/rdrand.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m778[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m782[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/benches/buffer.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m817[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/getrandom-0.2.9/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m853[0m:[0m77[0m:            "id": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m857[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m861[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m873[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m889[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m893[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m903[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m907[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/tests/no_std.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m917[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m921[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/tests/test.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m936[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m964[0m:[0m72[0m:            "id": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m968[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m972[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m988[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m992[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1002[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1006[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/tests/const_fn.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1016[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1020[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1046[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1085[0m:[0m72[0m:            "id": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1089[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1093[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1105[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1117[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1129[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1145[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1149[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1159[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1163[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1192[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1219[0m:[0m72[0m:            "id": "memmap 0.6.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1223[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1227[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1239[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1251[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1274[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1278[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap-0.6.2/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1288[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1292[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap-0.6.2/examples/cat.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1300[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap-0.6.2/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1325[0m:[0m77[0m:            "id": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1329[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1333[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1349[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1353[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1363[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1367[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/tests/test.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1375[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1397[0m:[0m78[0m:            "id": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1401[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1405[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1417[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1429[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1445[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1449[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1459[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1463[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/comments.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1473[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1477[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/features.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1487[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1491[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/marker.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1501[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1505[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1515[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1519[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test_fmt.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1529[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1533[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test_size.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1543[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1547[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1562[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1611[0m:[0m76[0m:            "id": "quickcheck 1.0.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1615[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1619[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1631[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1643[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1662[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1666[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1676[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1680[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/btree_set_range.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1690[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1694[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/out_of_bounds.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1704[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1708[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/reverse.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1718[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1722[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/reverse_single.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1732[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1736[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/sieve.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1746[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1750[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/examples/sort.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1776[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quickcheck-1.0.3/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1804[0m:[0m72[0m:            "id": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1808[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1812[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1824[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1836[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1854[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1858[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1868[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1872[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/tests/compiletest.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1882[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1886[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/tests/test.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1896[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1900[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1915[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1948[0m:[0m70[0m:            "id": "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1952[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1956[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1968[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1982[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m1994[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2006[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2020[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2032[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2044[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2060[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2064[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2118[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2161[0m:[0m75[0m:            "id": "rand_core 0.6.4 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2165[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2169[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2181[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2199[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2203[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2227[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2275[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2287[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2312[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2324[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2336[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2355[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2369[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2383[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2397[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2411[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2425[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2439[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2453[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2467[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2481[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2495[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2509[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2523[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2537[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2551[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2565[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2568[0m:[0m30[0m:                    "name": "[0m[1m[31mcrate[0ms-regex",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2569[0m:[0m57[0m:                    "src_path": "$ROOT$regex/tests/test_[0m[1m[31mcrate[0ms_regex.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2664[0m:[0m71[0m:            "id": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2668[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2672[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2684[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2696[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2708[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2720[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2732[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2751[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2755[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2765[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2769[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2779[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2783[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-cheat.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2793[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2797[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-replace.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2807[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2811[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-single-cheat.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2821[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2825[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-single.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2835[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2839[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2849[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2853[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_default.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2863[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2867[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_default_bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2877[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2881[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2891[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2895[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa_utf8bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2905[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2909[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa_bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2919[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2923[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2933[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2937[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack_utf8bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2947[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2951[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack_bytes.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2961[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2964[0m:[0m30[0m:                    "name": "[0m[1m[31mcrate[0ms-regex",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m2965[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_[0m[1m[31mcrate[0ms_regex.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3038[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3068[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3080[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3092[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3104[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3116[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3128[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3140[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3178[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3192[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3204[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3220[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3234[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3248[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3306[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3344[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3362[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3405[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3419[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3471[0m:[0m78[0m:            "id": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3475[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3482[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3486[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3496[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3500[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/benches/bench.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3530[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3568[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3599[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3633[0m:[0m73[0m:            "id": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3637[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3641[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3653[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3669[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3673[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3683[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3687[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3709[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3742[0m:[0m24[0m:            "readme": "[0m[1m[31mcrate[0ms-io.md",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3754[0m:[0m80[0m:            "id": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3758[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3762[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3774[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3786[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3798[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3814[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3818[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3828[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3832[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3843[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3867[0m:[0m24[0m:            "readme": "[0m[1m[31mcrate[0ms-io.md",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3879[0m:[0m73[0m:            "id": "strsim 0.10.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3883[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3890[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3894[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.10.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3904[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3908[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.10.0/tests/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3918[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3922[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.10.0/benches/benches.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3930[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.10.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3956[0m:[0m70[0m:            "id": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3960[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3964[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3976[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m3988[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4000[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4012[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4024[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4036[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4048[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4060[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4072[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4084[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4098[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4110[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4122[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4134[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4146[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4162[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4166[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4176[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4180[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/regression.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4190[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4194[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_asyncness.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4204[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4208[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_attribute.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4218[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4222[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_derive_input.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4232[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4236[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_expr.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4246[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4250[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_generics.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4260[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4264[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_grouping.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4274[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4278[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_ident.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4288[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4292[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_item.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4302[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4306[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_iterators.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4316[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4320[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_lit.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4330[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4334[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_meta.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4344[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4348[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_parse_buffer.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4358[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4362[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_parse_stream.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4372[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4376[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_pat.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4386[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4390[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_path.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4400[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4404[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_precedence.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4414[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4418[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_receiver.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4428[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4432[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_round_trip.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4442[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4446[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_shebang.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4456[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4460[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_should_parse.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4470[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4474[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_size.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4484[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4488[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_stmt.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4498[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4502[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_token_trees.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4512[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4516[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_ty.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4526[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4530[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_visibility.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4540[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4544[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/zzz_stable.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4554[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4558[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/benches/rust.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4572[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4576[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/benches/file.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4617[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4665[0m:[0m79[0m:            "id": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4669[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4673[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4685[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4697[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4711[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4723[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4735[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4751[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4755[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4765[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4769[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/tests/compare.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4779[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4783[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/tests/static_size.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4793[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4797[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/benches/xid.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4805[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4839[0m:[0m94[0m:            "id": "wasi 0.11.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4843[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4847[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4859[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4871[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4887[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4891[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/wasi-0.11.0+wasi-snapshot-preview1/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4918[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/wasi-0.11.0+wasi-snapshot-preview1/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4944[0m:[0m72[0m:            "id": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4948[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4952[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4964[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4980[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4984[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4994[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m4998[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5408[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5454[0m:[0m92[0m:            "id": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5457[0m:[0m104[0m:            "description": "Import libraries for the i686-pc-windows-gnu target. Please don't use this [0m[1m[31mcrate[0m directly, depend on winapi instead.",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5458[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5465[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5469[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5479[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5483[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5491[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5513[0m:[0m94[0m:            "id": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5516[0m:[0m106[0m:            "description": "Import libraries for the x86_64-pc-windows-gnu target. Please don't use this [0m[1m[31mcrate[0m directly, depend on winapi instead.",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5517[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5524[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5528[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5538[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5542[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/build.rs",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5550[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5580[0m:[0m83[0m:                "id": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5582[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5587[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5602[0m:[0m73[0m:                "id": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5608[0m:[0m77[0m:                "id": "cfg-if 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5614[0m:[0m76[0m:                "id": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5620[0m:[0m76[0m:                "id": "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5622[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5623[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5624[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5625[0m:[0m75[0m:                    "strsim 0.10.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5630[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5640[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5650[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5660[0m:[0m86[0m:                        "pkg": "strsim 0.10.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5672[0m:[0m79[0m:                "id": "getrandom 0.2.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5674[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5675[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5676[0m:[0m96[0m:                    "wasi 0.11.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5681[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5691[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5701[0m:[0m107[0m:                        "pkg": "wasi 0.11.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5713[0m:[0m81[0m:                "id": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5719[0m:[0m76[0m:                "id": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5728[0m:[0m76[0m:                "id": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5737[0m:[0m76[0m:                "id": "memmap 0.6.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5739[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5740[0m:[0m74[0m:                    "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5745[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5755[0m:[0m85[0m:                        "pkg": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5767[0m:[0m81[0m:                "id": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5773[0m:[0m82[0m:                "id": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5775[0m:[0m81[0m:                    "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5780[0m:[0m92[0m:                        "pkg": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5795[0m:[0m80[0m:                "id": "quickcheck 1.0.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5797[0m:[0m72[0m:                    "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5802[0m:[0m83[0m:                        "pkg": "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5814[0m:[0m76[0m:                "id": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5816[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5821[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5836[0m:[0m74[0m:                "id": "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5838[0m:[0m77[0m:                    "rand_core 0.6.4 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5843[0m:[0m88[0m:                        "pkg": "rand_core 0.6.4 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5858[0m:[0m79[0m:                "id": "rand_core 0.6.4 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5860[0m:[0m77[0m:                    "getrandom 0.2.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5865[0m:[0m88[0m:                        "pkg": "getrandom 0.2.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5881[0m:[0m81[0m:                    "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5882[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5883[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5884[0m:[0m78[0m:                    "quickcheck 1.0.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5885[0m:[0m72[0m:                    "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5891[0m:[0m92[0m:                        "pkg": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5901[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5911[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5921[0m:[0m89[0m:                        "pkg": "quickcheck 1.0.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5931[0m:[0m83[0m:                        "pkg": "rand 0.8.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5971[0m:[0m75[0m:                "id": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5973[0m:[0m80[0m:                    "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m5978[0m:[0m91[0m:                        "pkg": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6002[0m:[0m71[0m:                    "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6003[0m:[0m75[0m:                    "cfg-if 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6004[0m:[0m74[0m:                    "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6005[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6006[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6007[0m:[0m74[0m:                    "memmap 0.6.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6008[0m:[0m79[0m:                    "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6011[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6016[0m:[0m82[0m:                        "pkg": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6026[0m:[0m86[0m:                        "pkg": "cfg-if 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6036[0m:[0m85[0m:                        "pkg": "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6046[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6056[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6066[0m:[0m85[0m:                        "pkg": "memmap 0.6.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6076[0m:[0m90[0m:                        "pkg": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6106[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6120[0m:[0m74[0m:                    "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6123[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6128[0m:[0m85[0m:                        "pkg": "docopt 1.1.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6158[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6186[0m:[0m82[0m:                "id": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6203[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6209[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6231[0m:[0m77[0m:                "id": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6233[0m:[0m82[0m:                    "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6238[0m:[0m93[0m:                        "pkg": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6255[0m:[0m84[0m:                "id": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6257[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6258[0m:[0m74[0m:                    "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6259[0m:[0m72[0m:                    "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6264[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6274[0m:[0m85[0m:                        "pkg": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6284[0m:[0m83[0m:                        "pkg": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6298[0m:[0m77[0m:                "id": "strsim 0.10.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6304[0m:[0m74[0m:                "id": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6306[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6307[0m:[0m74[0m:                    "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6308[0m:[0m81[0m:                    "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6313[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6323[0m:[0m85[0m:                        "pkg": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6333[0m:[0m92[0m:                        "pkg": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6353[0m:[0m83[0m:                "id": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6359[0m:[0m98[0m:                "id": "wasi 0.11.0+wasi-snapshot-preview1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6365[0m:[0m76[0m:                "id": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6367[0m:[0m94[0m:                    "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6368[0m:[0m96[0m:                    "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6373[0m:[0m105[0m:                        "pkg": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6383[0m:[0m107[0m:                        "pkg": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6402[0m:[0m96[0m:                "id": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/regex-metadata.json[0m:[0m[32m6408[0m:[0m98[0m:                "id": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m2[0m:[0m8[0m:    0: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m11[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m12[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m33[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m47[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m48[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m66[0m:[0m8[0m:    1: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m75[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m76[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m97[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "hello_world",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m111[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m112[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m118[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m119[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m137[0m:[0m8[0m:    2: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m146[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m147[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m168[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "an_example",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m182[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m183[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m189[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m190[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m208[0m:[0m8[0m:    3: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m217[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m218[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m239[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "it",
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m253[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(0),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m254[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m260[0m:[0m17[0m:                [0m[1m[31mcrate[0m_id: Idx::<[0m[1m[31mCrate[0mData>(4),
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m261[0m:[0m23[0m:                name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m279[0m:[0m8[0m:    4: [0m[1m[31mCrate[0mData {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m288[0m:[0m13[0m:            [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m289[0m:[0m17[0m:                [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName(
[0m[35mcrates/project-model/test_data/output/cargo_hello_world_project_model_with_selective_overrides.txt[0m:[0m[32m323[0m:[0m24[0m:                "CARGO_[0m[1m[31mCRATE[0m_NAME": "libc",
[0m[35mcrates/rust-analyzer/tests/slow-tests/tidy.rs[0m:[0m[32m38[0m:[0m56[0m:            .read_file(sourcegen::project_root().join("[0m[1m[31mcrate[0ms/rust-analyzer/src/lsp/ext.rs"))
[0m[35mcrates/rust-analyzer/tests/slow-tests/tidy.rs[0m:[0m[32m72[0m:[0m72[0m:    let files = sourcegen::list_files(&sourcegen::project_root().join("[0m[1m[31mcrate[0ms"));
[0m[35mcrates/rust-analyzer/tests/slow-tests/tidy.rs[0m:[0m[32m381[0m:[0m53[0m:            panic!("FIXME doc in a fully-documented [0m[1m[31mcrate[0m: {}", path.display())
[0m[35mcrates/hir/src/symbols.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{Module, ModuleDef, Semantics};
[0m[35mcrates/hir/src/symbols.rs[0m:[0m[32m86[0m:[0m81[0m:/// Given a [`ModuleId`] and a [`HirDatabase`], use the DefMap for the module's [0m[1m[31mcrate[0m to collect
[0m[35mcrates/hir/src/attrs.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/attrs.rs[0m:[0m[32m16[0m:[0m90[0m:    Adt, AsAssocItem, AssocItem, BuiltinType, Const, ConstParam, DocLinkDef, Enum, Extern[0m[1m[31mCrate[0mDecl,
[0m[35mcrates/hir/src/attrs.rs[0m:[0m[32m55[0m:[0m12[0m:    (Extern[0m[1m[31mCrate[0mDecl, Extern[0m[1m[31mCrate[0mId),
[0m[35mcrates/hir/src/attrs.rs[0m:[0m[32m125[0m:[0m26[0m:        AttrDefId::Extern[0m[1m[31mCrate[0mId(it) => it.resolver(db.upcast()),
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m2[0m:[0m21[0m://! It is used in [`[0m[1m[31mcrate[0m::global_state::GlobalState`] throughout the main loop.
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TaskPool<T> {
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m13[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_with_threads(sender: Sender<T>, threads: usize) -> TaskPool<T> {
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m17[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn spawn<F>(&mut self, intent: ThreadIntent, task: F)
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m28[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn spawn_with_sender<F>(&mut self, intent: ThreadIntent, task: F)
[0m[35mcrates/rust-analyzer/src/task_pool.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn len(&self) -> usize {
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m14[0m:[0m46[0m:    db::HirDatabase, Adt, Const, Enum, Extern[0m[1m[31mCrate[0mDecl, Field, FieldSource, Function, Impl,
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m22[0m:[0m17[0m:    /// Using [`[0m[1m[31mcrate[0m::Semantics::source`] is preferred when working with [`[0m[1m[31mcrate[0m::Semantics`],
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m56[0m:[0m67[0m:            ModuleOrigin::File { definition, .. } | ModuleOrigin::[0m[1m[31mCrate[0mRoot { definition, .. } => {
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m69[0m:[0m24[0m:    /// `None` for the [0m[1m[31mcrate[0m root.
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m211[0m:[0m26[0m:impl HasSource for Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/has_source.rs[0m:[0m[32m212[0m:[0m27[0m:    type Ast = ast::Extern[0m[1m[31mCrate[0m;
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6[0m:[0m79[0m:            "id": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m14[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m30[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m34[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-0.7.20/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m49[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-0.7.20/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m77[0m:[0m78[0m:            "id": "aho-corasick 1.0.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m81[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m85[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m97[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m109[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m125[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m129[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-1.0.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m151[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/aho-corasick-1.0.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m189[0m:[0m71[0m:            "id": "atty 0.2.14 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m193[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m197[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m209[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m221[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m243[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m247[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/atty-0.2.14/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m257[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m261[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/atty-0.2.14/examples/atty.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m269[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/atty-0.2.14/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m293[0m:[0m73[0m:            "id": "base64 0.20.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m297[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m301[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m313[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m327[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m339[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m351[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m367[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m371[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m381[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m385[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/examples/base64.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m395[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m399[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/tests/encode.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m409[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m413[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/tests/tests.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m423[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m427[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/benches/benchmarks.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m441[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/base64-0.20.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m470[0m:[0m74[0m:            "id": "bitflags 1.3.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m474[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m478[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m490[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m502[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m514[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m526[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m538[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m550[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m562[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m578[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m582[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m592[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m596[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bitflags-1.3.2/tests/basic.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m606[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m610[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bitflags-1.3.2/tests/compile.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m631[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bitflags-1.3.2/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m666[0m:[0m70[0m:            "id": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m670[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m674[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m686[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m698[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m710[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m722[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m734[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m746[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m762[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m766[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m776[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m780[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/graphemes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m794[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m798[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/lines.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m811[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m815[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/uppercase.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m829[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m833[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/words.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m847[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m851[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/graphemes-std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m861[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m865[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/lines-std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m875[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m879[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/uppercase-std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m889[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m893[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/examples/words-std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m921[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bstr-1.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m960[0m:[0m75[0m:            "id": "bytecount 0.6.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m964[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m968[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m980[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m992[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1004[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1020[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1024[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bytecount-0.6.3/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1034[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1038[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bytecount-0.6.3/tests/check.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1048[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1052[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bytecount-0.6.3/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1069[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/bytecount-0.6.3/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1093[0m:[0m69[0m:            "id": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1097[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1101[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1113[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1129[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1133[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1143[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1147[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/src/bin/gcc-shim.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1157[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1161[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cc_env.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1171[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1175[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cflags.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1185[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1189[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/cxxflags.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1199[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1203[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1218[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cc-1.0.79/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1242[0m:[0m72[0m:            "id": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1246[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1250[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1262[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1278[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1282[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1292[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1295[0m:[0m31[0m:                    "name": "x[0m[1m[31mcrate[0m",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1296[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/tests/x[0m[1m[31mcrate[0m.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1315[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1335[0m:[0m71[0m:            "id": "clap 2.34.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1339[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1343[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1355[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1367[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1379[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1391[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1403[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1415[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1427[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1439[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1451[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1463[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1475[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1487[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1503[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1507[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/clap-2.34.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1563[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/clap-2.34.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1599[0m:[0m83[0m:            "id": "crossbeam-channel 0.5.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1603[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1607[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1619[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1631[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1643[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1655[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1671[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1675[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1685[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1689[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/examples/fibonacci.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1699[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1703[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/examples/matching.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1713[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1717[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/examples/stopwatch.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1727[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1731[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/after.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1741[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1745[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/array.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1755[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1759[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/golang.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1769[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1773[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/iter.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1783[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1787[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/list.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1797[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1801[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/mpsc.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1811[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1815[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/never.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1825[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1829[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/ready.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1839[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1843[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/same_channel.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1853[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1857[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/select.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1867[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1871[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/select_macro.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1881[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1885[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/thread_locals.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1895[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1899[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/tick.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1909[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1913[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/tests/zero.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1923[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1927[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/benches/crossbeam.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1945[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-channel-0.5.8/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1973[0m:[0m82[0m:            "id": "crossbeam-utils 0.8.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1977[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1981[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m1993[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2005[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2017[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2033[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2037[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2047[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2051[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/atomic_cell.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2061[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2065[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/cache_padded.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2075[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2079[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/parker.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2089[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2093[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/sharded_lock.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2103[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2107[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/thread.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2117[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2121[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/tests/wait_group.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2131[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2135[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/benches/atomic_cell.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2145[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2149[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2166[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/crossbeam-utils-0.8.15/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2194[0m:[0m78[0m:            "id": "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2198[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2202[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2214[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2226[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2238[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2250[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2262[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2278[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2282[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/encoding_rs-0.8.32/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2320[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/encoding_rs-0.8.32/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2350[0m:[0m80[0m:            "id": "encoding_rs_io 0.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2354[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2358[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2374[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2378[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/encoding_rs_io-0.1.7/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2386[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/encoding_rs_io-0.1.7/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2417[0m:[0m69[0m:            "id": "fnv 1.0.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2421[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2428[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2432[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/fnv-1.0.7/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2445[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2465[0m:[0m70[0m:            "id": "glob 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2469[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2473[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2485[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2501[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2505[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/glob-0.3.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2515[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2519[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/glob-0.3.1/tests/glob-std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2527[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/glob-0.3.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2549[0m:[0m63[0m:            "id": "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2557[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2569[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2583[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2595[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2607[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2622[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2634[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2646[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2658[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2674[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2678[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2688[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2692[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2714[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2729[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/globset",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2730[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/globset",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2740[0m:[0m60[0m:            "id": "grep 0.2.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2757[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2770[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2783[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2796[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2809[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2822[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2826[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2838[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2854[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2858[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2868[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2872[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep/examples/simplegrep.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2891[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2906[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/grep",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2907[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/grep",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2917[0m:[0m63[0m:            "id": "grep-cli 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2925[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2937[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2958[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2962[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2974[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2986[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m2998[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3010[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3022[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3038[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3042[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3050[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3065[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/cli",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3066[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/cli",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3076[0m:[0m67[0m:            "id": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3084[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3096[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3112[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3116[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3126[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3130[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher/tests/tests.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3138[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3151[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/matcher",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3152[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/matcher",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3162[0m:[0m65[0m:            "id": "grep-pcre2 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3165[0m:[0m55[0m:            "description": "Use PCRE2 with the 'grep' [0m[1m[31mcrate[0m.\n",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3179[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3183[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3199[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3203[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3211[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3226[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/pcre2",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3227[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/pcre2",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3237[0m:[0m67[0m:            "id": "grep-printer 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3240[0m:[0m59[0m:            "description": "An implementation of the grep [0m[1m[31mcrate[0m's Sink trait that provides standard\nprinting of search results, similar to grep itself.\n",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3245[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3257[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3278[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3291[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3295[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3309[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3321[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3342[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3350[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3354[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3380[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3395[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/printer",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3396[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/printer",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3406[0m:[0m66[0m:            "id": "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3409[0m:[0m70[0m:            "description": "Use Rust's regex library with the 'grep' [0m[1m[31mcrate[0m.\n",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3414[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3426[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3447[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3451[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3463[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3475[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3487[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3503[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3507[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3515[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3530[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/regex",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3531[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/regex",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3541[0m:[0m69[0m:            "id": "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3549[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3563[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3575[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3587[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3608[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3612[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3624[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3645[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3649[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3665[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3669[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3679[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3683[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher/examples/search-stdin.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3699[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3714[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/searcher",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3715[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/searcher",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3725[0m:[0m77[0m:            "id": "hermit-abi 0.1.19 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3729[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3733[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3745[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3757[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3773[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3777[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/hermit-abi-0.1.19/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3799[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/hermit-abi-0.1.19/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3833[0m:[0m62[0m:            "id": "ignore 0.4.20 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3850[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3854[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3866[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3878[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3890[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3902[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3914[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3926[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3938[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3950[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3966[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3970[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3980[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3984[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore/examples/walk.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3994[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m3998[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore/tests/gitignore_matched_path_or_any_parents_tests.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4010[0m:[0m45[0m:            "manifest_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4025[0m:[0m78[0m:            "repository": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/ignore",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4026[0m:[0m76[0m:            "homepage": "https://github.com/BurntSushi/ripgrep/tree/master/[0m[1m[31mcrate[0ms/ignore",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4036[0m:[0m70[0m:            "id": "itoa 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4040[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4044[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4060[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4064[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/itoa-1.0.6/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4074[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4078[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/itoa-1.0.6/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4088[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4092[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/itoa-1.0.6/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4104[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/itoa-1.0.6/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4137[0m:[0m92[0m:            "id": "jemalloc-sys 0.5.3+5.3.0-patched (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4141[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4145[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4157[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4173[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4177[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4187[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4191[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/tests/malloc_conf_empty.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4201[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4205[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/tests/malloc_conf_set.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4215[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4219[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/tests/unprefixed_malloc.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4229[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4233[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4254[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemalloc-sys-0.5.3+5.3.0-patched/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4288[0m:[0m78[0m:            "id": "jemallocator 0.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4292[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4296[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4308[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4320[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4336[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4340[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4350[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4354[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/background_thread_defaults.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4364[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4368[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/background_thread_enabled.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4378[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4382[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/ffi.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4392[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4396[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/grow_in_place.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4406[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4410[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/malloctl.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4420[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4424[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/shrink_in_place.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4434[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4438[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/smoke.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4448[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4452[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/smoke_ffi.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4462[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4466[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/tests/usable_size.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4476[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4480[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/benches/roundtrip.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4514[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jemallocator-0.5.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4554[0m:[0m76[0m:            "id": "jobserver 0.1.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4558[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4562[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4574[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4586[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4598[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4610[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4622[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4638[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4642[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4652[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4656[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/tests/client.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4666[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4670[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/tests/server.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4680[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4684[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/tests/client-of-myself.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4694[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4698[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/tests/make-as-a-client.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4708[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4712[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/tests/helper.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4720[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/jobserver-0.1.26/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4740[0m:[0m77[0m:            "id": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4744[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4748[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4760[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4776[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4780[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4790[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4794[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/tests/no_std.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4804[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4808[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4823[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/lazy_static-1.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4851[0m:[0m72[0m:            "id": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4855[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4859[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4875[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4879[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4889[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4893[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/tests/const_fn.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4903[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4907[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4933[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/libc-0.2.142/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4972[0m:[0m70[0m:            "id": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4976[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4980[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m4992[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5004[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5016[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5028[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5040[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5054[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5066[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5080[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5098[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5102[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5112[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5116[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/tests/filters.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5126[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5130[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/tests/macros.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5140[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5144[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/benches/value.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5154[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5158[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5207[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/log-0.4.17/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5243[0m:[0m72[0m:            "id": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5247[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5251[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5263[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5275[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5287[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5303[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5307[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5317[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5321[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5350[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memchr-2.5.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5377[0m:[0m74[0m:            "id": "memmap2 0.5.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5381[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5385[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5397[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5409[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5421[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5437[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5441[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap2-0.5.10/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5451[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5455[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap2-0.5.10/examples/cat.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5467[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/memmap2-0.5.10/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5493[0m:[0m76[0m:            "id": "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5497[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5501[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5513[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5525[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5537[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5551[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5563[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5575[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5591[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5595[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5605[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5609[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5622[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5626[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/bench_acquire.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5639[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5643[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/bench_vs_lazy_static.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5656[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5660[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/lazy_static.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5673[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5677[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/reentrant_init_deadlocks.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5690[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5694[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/regex.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5707[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5711[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/examples/test_synchronization.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5724[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5728[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/tests/it.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5767[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/once_cell-1.17.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5799[0m:[0m71[0m:            "id": "pcre2 0.2.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5803[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5807[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5819[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5831[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5843[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5859[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5863[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pcre2-0.2.3/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5871[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pcre2-0.2.3/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5899[0m:[0m75[0m:            "id": "pcre2-sys 0.2.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5903[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5907[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5919[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5933[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5949[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5953[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pcre2-sys-0.2.5/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5963[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5967[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pcre2-sys-0.2.5/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m5975[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pcre2-sys-0.2.5/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6002[0m:[0m77[0m:            "id": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6006[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6010[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6026[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6030[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6040[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6044[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6052[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/pkg-config-0.3.26/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6074[0m:[0m78[0m:            "id": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6078[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6082[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6094[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6106[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6122[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6126[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6136[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6140[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/comments.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6150[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6154[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/features.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6164[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6168[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/marker.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6178[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6182[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6192[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6196[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test_fmt.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6206[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6210[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/tests/test_size.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6220[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6224[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6239[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/proc-macro2-1.0.56/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6288[0m:[0m72[0m:            "id": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6292[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6296[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6308[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6320[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6338[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6342[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6352[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6356[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/tests/compiletest.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6366[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6370[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6380[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6384[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6399[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/quote-1.0.26/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6432[0m:[0m71[0m:            "id": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6436[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6440[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6452[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6464[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6476[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6488[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6500[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6519[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6523[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6533[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6537[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6547[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6551[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-cheat.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6561[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6565[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-replace.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6575[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6579[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-single-cheat.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6589[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6593[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna-single.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6603[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6607[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/examples/shootout-regex-dna.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6617[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6621[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_default.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6631[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6635[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_default_bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6645[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6649[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6659[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6663[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa_utf8bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6673[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6677[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_nfa_bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6687[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6691[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6701[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6705[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack_utf8bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6715[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6719[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_backtrack_bytes.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6729[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6732[0m:[0m30[0m:                    "name": "[0m[1m[31mcrate[0ms-regex",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6733[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/tests/test_[0m[1m[31mcrate[0ms_regex.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6806[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-1.8.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6828[0m:[0m81[0m:            "id": "regex-automata 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6832[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6836[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6848[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6860[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6874[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6886[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6898[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6910[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6922[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6934[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6950[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6954[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-automata-0.1.10/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6964[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6968[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-automata-0.1.10/tests/tests.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m6993[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-automata-0.1.10/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7021[0m:[0m79[0m:            "id": "regex-syntax 0.6.29 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7025[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7032[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7036[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.6.29/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7046[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7050[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.6.29/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7078[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.6.29/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7098[0m:[0m78[0m:            "id": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7102[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7109[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7113[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7123[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7127[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7157[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/regex-syntax-0.7.1/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7195[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7207[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7230[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7243[0m:[0m44[0m:                    "path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7247[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7259[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7271[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7283[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7295[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7307[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7319[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7331[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7343[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7357[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7369[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7385[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7389[0m:[0m48[0m:                    "src_path": "$ROOT$ripgrep/[0m[1m[31mcrate[0ms/core/main.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7399[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7413[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7526[0m:[0m70[0m:            "id": "ryu 1.0.13 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7530[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7534[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7546[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7558[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7570[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7586[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7590[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7600[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7604[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/examples/upstream_benchmark.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7614[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7618[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/common_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7628[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7632[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/d2s_table_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7642[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7646[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/d2s_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7656[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7660[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/exhaustive.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7670[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7674[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/f2s_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7684[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7688[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/s2d_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7698[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7702[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/tests/s2f_test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7712[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7716[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/benches/bench.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7729[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/ryu-1.0.13/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7762[0m:[0m75[0m:            "id": "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7765[0m:[0m38[0m:            "description": "A simple [0m[1m[31mcrate[0m for determining whether two file paths point to the same file.\n",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7766[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7770[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7782[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7798[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7802[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7812[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7816[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/same-file-1.0.6/examples/is_same_file.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7826[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7830[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/same-file-1.0.6/examples/is_stderr.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7838[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7863[0m:[0m73[0m:            "id": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7867[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7871[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7883[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7899[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7903[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7913[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7917[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7939[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde-1.0.160/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7972[0m:[0m24[0m:            "readme": "[0m[1m[31mcrate[0ms-io.md",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7984[0m:[0m80[0m:            "id": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7988[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m7992[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8004[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8016[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8028[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8044[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8048[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8058[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8062[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8073[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_derive-1.0.160/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8097[0m:[0m24[0m:            "readme": "[0m[1m[31mcrate[0ms-io.md",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8109[0m:[0m77[0m:            "id": "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8113[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8117[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8131[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8143[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8155[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8167[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8179[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8191[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8203[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8215[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8229[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8241[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8253[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8265[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8283[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8287[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8297[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8301[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/compiletest.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8311[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8315[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/debug.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8325[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8329[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/lexical.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8339[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8343[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/map.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8353[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8357[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/regression.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8367[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8371[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/stream.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8381[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8385[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/tests/test.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8395[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8399[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8428[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/serde_json-1.0.96/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8478[0m:[0m72[0m:            "id": "strsim 0.8.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8482[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8489[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8493[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.8.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8503[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8507[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.8.0/tests/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8517[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8521[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.8.0/benches/benches.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8529[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/strsim-0.8.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8555[0m:[0m70[0m:            "id": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8559[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8563[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8575[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8587[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8599[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8611[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8623[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8635[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8647[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8659[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8671[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8683[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8697[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8709[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8721[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8733[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8745[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8761[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8765[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8775[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8779[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/regression.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8789[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8793[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_asyncness.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8803[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8807[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_attribute.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8817[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8821[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_derive_input.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8831[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8835[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_expr.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8845[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8849[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_generics.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8859[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8863[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_grouping.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8873[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8877[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_ident.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8887[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8891[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_item.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8901[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8905[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_iterators.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8915[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8919[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_lit.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8929[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8933[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_meta.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8943[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8947[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_parse_buffer.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8957[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8961[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_parse_stream.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8971[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8975[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_pat.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8985[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8989[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_path.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m8999[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9003[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_precedence.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9013[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9017[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_receiver.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9027[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9031[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_round_trip.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9041[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9045[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_shebang.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9055[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9059[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_should_parse.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9069[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9073[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_size.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9083[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9087[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_stmt.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9097[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9101[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_token_trees.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9111[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9115[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_ty.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9125[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9129[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/test_visibility.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9139[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9143[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/tests/zzz_stable.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9153[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9157[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/benches/rust.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9171[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9175[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/benches/file.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9216[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/syn-2.0.15/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9264[0m:[0m75[0m:            "id": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9268[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9272[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9288[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9292[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/termcolor-1.2.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9300[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/termcolor-1.2.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9326[0m:[0m75[0m:            "id": "textwrap 0.11.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9330[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9334[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9348[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9360[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9372[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9384[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9396[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9408[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9424[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9428[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9438[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9442[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/examples/layout.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9452[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9456[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/examples/termwidth.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9466[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9470[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/tests/version-numbers.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9480[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9484[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/benches/linear.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9499[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/textwrap-0.11.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9534[0m:[0m78[0m:            "id": "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9538[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9542[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9554[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9566[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9582[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9586[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/thread_local-1.1.7/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9596[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9600[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/thread_local-1.1.7/benches/thread_local.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9610[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/thread_local-1.1.7/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9634[0m:[0m79[0m:            "id": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9638[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9642[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9654[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9666[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9680[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9692[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9704[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9720[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9724[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9734[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9738[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/tests/compare.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9748[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9752[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/tests/static_size.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9762[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9766[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/benches/xid.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9774[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-ident-1.0.8/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9808[0m:[0m80[0m:            "id": "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9812[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9816[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9828[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9840[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9856[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9860[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-width-0.1.10/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9886[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/unicode-width-0.1.10/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9911[0m:[0m73[0m:            "id": "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9915[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9919[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9931[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9943[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9959[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9963[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/walkdir-2.3.3/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9971[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/walkdir-2.3.3/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m9998[0m:[0m72[0m:            "id": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10002[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10006[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10018[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10034[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10038[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10048[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10052[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10462[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-0.3.9/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10508[0m:[0m92[0m:            "id": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10511[0m:[0m104[0m:            "description": "Import libraries for the i686-pc-windows-gnu target. Please don't use this [0m[1m[31mcrate[0m directly, depend on winapi instead.",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10512[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10519[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10523[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10533[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10537[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10545[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-i686-pc-windows-gnu-0.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10567[0m:[0m77[0m:            "id": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10571[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10575[0m:[0m70[0m:                    "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10602[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10606[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-util-0.1.5/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10614[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-util-0.1.5/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10650[0m:[0m94[0m:            "id": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10653[0m:[0m106[0m:            "description": "Import libraries for the x86_64-pc-windows-gnu target. Please don't use this [0m[1m[31mcrate[0m directly, depend on winapi instead.",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10654[0m:[0m62[0m:            "source": "registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10661[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10665[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/src/lib.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10675[0m:[0m22[0m:                    "[0m[1m[31mcrate[0m_types": [
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10679[0m:[0m66[0m:                    "src_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/build.rs",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10687[0m:[0m63[0m:            "manifest_path": "$ROOT$.cargo/registry/src/index.[0m[1m[31mcrate[0ms.io-6f17d22bba15001f/winapi-x86_64-pc-windows-gnu-0.4.0/Cargo.toml",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10708[0m:[0m53[0m:        "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10709[0m:[0m50[0m:        "grep 0.2.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10710[0m:[0m53[0m:        "grep-cli 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10711[0m:[0m57[0m:        "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10712[0m:[0m55[0m:        "grep-pcre2 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10713[0m:[0m57[0m:        "grep-printer 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10714[0m:[0m59[0m:        "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10715[0m:[0m56[0m:        "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10716[0m:[0m52[0m:        "ignore 0.4.20 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10722[0m:[0m83[0m:                "id": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10724[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10729[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10744[0m:[0m82[0m:                "id": "aho-corasick 1.0.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10746[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10751[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10767[0m:[0m75[0m:                "id": "atty 0.2.14 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10769[0m:[0m79[0m:                    "hermit-abi 0.1.19 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10770[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10771[0m:[0m74[0m:                    "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10776[0m:[0m90[0m:                        "pkg": "hermit-abi 0.1.19 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10786[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10796[0m:[0m85[0m:                        "pkg": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10808[0m:[0m77[0m:                "id": "base64 0.20.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10817[0m:[0m78[0m:                "id": "bitflags 1.3.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10825[0m:[0m74[0m:                "id": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10827[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10828[0m:[0m78[0m:                    "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10829[0m:[0m83[0m:                    "regex-automata 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10830[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10835[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10845[0m:[0m89[0m:                        "pkg": "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10855[0m:[0m94[0m:                        "pkg": "regex-automata 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10865[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10882[0m:[0m79[0m:                "id": "bytecount 0.6.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10890[0m:[0m73[0m:                "id": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10892[0m:[0m78[0m:                    "jobserver 0.1.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10897[0m:[0m89[0m:                        "pkg": "jobserver 0.1.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10912[0m:[0m76[0m:                "id": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10918[0m:[0m75[0m:                "id": "clap 2.34.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10920[0m:[0m76[0m:                    "bitflags 1.3.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10921[0m:[0m74[0m:                    "strsim 0.8.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10922[0m:[0m77[0m:                    "textwrap 0.11.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10923[0m:[0m82[0m:                    "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10928[0m:[0m87[0m:                        "pkg": "bitflags 1.3.2 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10938[0m:[0m85[0m:                        "pkg": "strsim 0.8.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10948[0m:[0m88[0m:                        "pkg": "textwrap 0.11.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10958[0m:[0m93[0m:                        "pkg": "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10973[0m:[0m87[0m:                "id": "crossbeam-channel 0.5.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10975[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10976[0m:[0m84[0m:                    "crossbeam-utils 0.8.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10981[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m10991[0m:[0m95[0m:                        "pkg": "crossbeam-utils 0.8.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11007[0m:[0m86[0m:                "id": "crossbeam-utils 0.8.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11009[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11014[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11028[0m:[0m82[0m:                "id": "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11030[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11035[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11050[0m:[0m84[0m:                "id": "encoding_rs_io 0.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11052[0m:[0m80[0m:                    "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11057[0m:[0m91[0m:                        "pkg": "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11069[0m:[0m73[0m:                "id": "fnv 1.0.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11078[0m:[0m74[0m:                "id": "glob 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11084[0m:[0m67[0m:                "id": "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11086[0m:[0m81[0m:                    "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11087[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11088[0m:[0m71[0m:                    "fnv 1.0.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11089[0m:[0m72[0m:                    "glob 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11090[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11091[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11092[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11093[0m:[0m79[0m:                    "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11098[0m:[0m92[0m:                        "pkg": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11108[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11118[0m:[0m82[0m:                        "pkg": "fnv 1.0.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11128[0m:[0m83[0m:                        "pkg": "glob 0.3.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11138[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11148[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11158[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11168[0m:[0m90[0m:                        "pkg": "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11183[0m:[0m64[0m:                "id": "grep 0.2.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11185[0m:[0m65[0m:                    "grep-cli 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11186[0m:[0m69[0m:                    "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11187[0m:[0m69[0m:                    "grep-printer 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11188[0m:[0m68[0m:                    "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11189[0m:[0m71[0m:                    "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11190[0m:[0m77[0m:                    "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11191[0m:[0m75[0m:                    "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11196[0m:[0m76[0m:                        "pkg": "grep-cli 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11206[0m:[0m80[0m:                        "pkg": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11216[0m:[0m80[0m:                        "pkg": "grep-printer 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11226[0m:[0m79[0m:                        "pkg": "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11236[0m:[0m82[0m:                        "pkg": "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11246[0m:[0m88[0m:                        "pkg": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11256[0m:[0m86[0m:                        "pkg": "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11268[0m:[0m67[0m:                "id": "grep-cli 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/cli)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11270[0m:[0m73[0m:                    "atty 0.2.14 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11271[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11272[0m:[0m65[0m:                    "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11273[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11274[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11275[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11276[0m:[0m77[0m:                    "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11277[0m:[0m77[0m:                    "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11278[0m:[0m79[0m:                    "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11283[0m:[0m84[0m:                        "pkg": "atty 0.2.14 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11293[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11303[0m:[0m76[0m:                        "pkg": "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11313[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11323[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11333[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11343[0m:[0m88[0m:                        "pkg": "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11353[0m:[0m88[0m:                        "pkg": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11363[0m:[0m90[0m:                        "pkg": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11375[0m:[0m71[0m:                "id": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11377[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11378[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11383[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11393[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11405[0m:[0m69[0m:                "id": "grep-pcre2 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/pcre2)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11407[0m:[0m69[0m:                    "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11408[0m:[0m73[0m:                    "pcre2 0.2.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11413[0m:[0m80[0m:                        "pkg": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11423[0m:[0m84[0m:                        "pkg": "pcre2 0.2.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11435[0m:[0m71[0m:                "id": "grep-printer 0.1.7 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/printer)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11437[0m:[0m75[0m:                    "base64 0.20.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11438[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11439[0m:[0m69[0m:                    "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11440[0m:[0m68[0m:                    "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11441[0m:[0m71[0m:                    "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11442[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11443[0m:[0m79[0m:                    "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11444[0m:[0m77[0m:                    "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11449[0m:[0m86[0m:                        "pkg": "base64 0.20.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11459[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11469[0m:[0m80[0m:                        "pkg": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11479[0m:[0m79[0m:                        "pkg": "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11489[0m:[0m82[0m:                        "pkg": "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11499[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11509[0m:[0m90[0m:                        "pkg": "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11519[0m:[0m88[0m:                        "pkg": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11537[0m:[0m70[0m:                "id": "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11539[0m:[0m81[0m:                    "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11540[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11541[0m:[0m69[0m:                    "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11542[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11543[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11544[0m:[0m81[0m:                    "regex-syntax 0.6.29 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11545[0m:[0m80[0m:                    "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11550[0m:[0m92[0m:                        "pkg": "aho-corasick 0.7.20 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11560[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11570[0m:[0m80[0m:                        "pkg": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11580[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11590[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11600[0m:[0m92[0m:                        "pkg": "regex-syntax 0.6.29 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11610[0m:[0m91[0m:                        "pkg": "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11622[0m:[0m73[0m:                "id": "grep-searcher 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/searcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11624[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11625[0m:[0m77[0m:                    "bytecount 0.6.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11626[0m:[0m80[0m:                    "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11627[0m:[0m82[0m:                    "encoding_rs_io 0.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11628[0m:[0m69[0m:                    "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11629[0m:[0m68[0m:                    "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11630[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11631[0m:[0m76[0m:                    "memmap2 0.5.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11632[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11637[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11647[0m:[0m88[0m:                        "pkg": "bytecount 0.6.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11657[0m:[0m91[0m:                        "pkg": "encoding_rs 0.8.32 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11667[0m:[0m93[0m:                        "pkg": "encoding_rs_io 0.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11677[0m:[0m80[0m:                        "pkg": "grep-matcher 0.1.6 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/matcher)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11687[0m:[0m79[0m:                        "pkg": "grep-regex 0.1.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/regex)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11697[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11707[0m:[0m87[0m:                        "pkg": "memmap2 0.5.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11717[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11731[0m:[0m81[0m:                "id": "hermit-abi 0.1.19 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11733[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11738[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11752[0m:[0m66[0m:                "id": "ignore 0.4.20 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11754[0m:[0m85[0m:                    "crossbeam-channel 0.5.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11755[0m:[0m65[0m:                    "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11756[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11757[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11758[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11759[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11760[0m:[0m77[0m:                    "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11761[0m:[0m80[0m:                    "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11762[0m:[0m75[0m:                    "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11763[0m:[0m79[0m:                    "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11768[0m:[0m96[0m:                        "pkg": "crossbeam-channel 0.5.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11778[0m:[0m76[0m:                        "pkg": "globset 0.4.10 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/globset)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11788[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11798[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11808[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11818[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11828[0m:[0m88[0m:                        "pkg": "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11838[0m:[0m91[0m:                        "pkg": "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11848[0m:[0m86[0m:                        "pkg": "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11858[0m:[0m90[0m:                        "pkg": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11870[0m:[0m74[0m:                "id": "itoa 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11876[0m:[0m96[0m:                "id": "jemalloc-sys 0.5.3+5.3.0-patched (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11878[0m:[0m71[0m:                    "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11879[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11884[0m:[0m82[0m:                        "pkg": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11894[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11908[0m:[0m82[0m:                "id": "jemallocator 0.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11910[0m:[0m94[0m:                    "jemalloc-sys 0.5.3+5.3.0-patched (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11911[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11916[0m:[0m105[0m:                        "pkg": "jemalloc-sys 0.5.3+5.3.0-patched (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11926[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11941[0m:[0m80[0m:                "id": "jobserver 0.1.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11943[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11948[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11960[0m:[0m81[0m:                "id": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11966[0m:[0m76[0m:                "id": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11975[0m:[0m74[0m:                "id": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11977[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11982[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m11994[0m:[0m76[0m:                "id": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12003[0m:[0m78[0m:                "id": "memmap2 0.5.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12005[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12010[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12022[0m:[0m80[0m:                "id": "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12033[0m:[0m75[0m:                "id": "pcre2 0.2.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12035[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12036[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12037[0m:[0m77[0m:                    "pcre2-sys 0.2.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12038[0m:[0m80[0m:                    "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12043[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12053[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12063[0m:[0m88[0m:                        "pkg": "pcre2-sys 0.2.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12073[0m:[0m91[0m:                        "pkg": "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12085[0m:[0m79[0m:                "id": "pcre2-sys 0.2.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12087[0m:[0m71[0m:                    "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12088[0m:[0m74[0m:                    "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12089[0m:[0m79[0m:                    "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12094[0m:[0m82[0m:                        "pkg": "cc 1.0.79 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12104[0m:[0m85[0m:                        "pkg": "libc 0.2.142 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12114[0m:[0m90[0m:                        "pkg": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12126[0m:[0m81[0m:                "id": "pkg-config 0.3.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12132[0m:[0m82[0m:                "id": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12134[0m:[0m81[0m:                    "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12139[0m:[0m92[0m:                        "pkg": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12154[0m:[0m76[0m:                "id": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12156[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12161[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12176[0m:[0m75[0m:                "id": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12178[0m:[0m80[0m:                    "aho-corasick 1.0.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12179[0m:[0m74[0m:                    "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12180[0m:[0m80[0m:                    "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12185[0m:[0m91[0m:                        "pkg": "aho-corasick 1.0.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12195[0m:[0m85[0m:                        "pkg": "memchr 2.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12205[0m:[0m91[0m:                        "pkg": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12235[0m:[0m85[0m:                "id": "regex-automata 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12241[0m:[0m83[0m:                "id": "regex-syntax 0.6.29 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12257[0m:[0m82[0m:                "id": "regex-syntax 0.7.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12276[0m:[0m72[0m:                    "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12277[0m:[0m73[0m:                    "clap 2.34.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12278[0m:[0m62[0m:                    "grep 0.2.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12279[0m:[0m64[0m:                    "ignore 0.4.20 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12280[0m:[0m80[0m:                    "jemallocator 0.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12281[0m:[0m79[0m:                    "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12282[0m:[0m72[0m:                    "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12283[0m:[0m73[0m:                    "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12284[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12285[0m:[0m82[0m:                    "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12286[0m:[0m79[0m:                    "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12287[0m:[0m77[0m:                    "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12288[0m:[0m75[0m:                    "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12293[0m:[0m83[0m:                        "pkg": "bstr 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12303[0m:[0m84[0m:                        "pkg": "clap 2.34.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12317[0m:[0m73[0m:                        "pkg": "grep 0.2.11 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/grep)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12327[0m:[0m75[0m:                        "pkg": "ignore 0.4.20 (path+file:///$ROOT$ripgrep/[0m[1m[31mcrate[0ms/ignore)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12337[0m:[0m91[0m:                        "pkg": "jemallocator 0.5.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12347[0m:[0m90[0m:                        "pkg": "lazy_static 1.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12361[0m:[0m83[0m:                        "pkg": "log 0.4.17 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12371[0m:[0m84[0m:                        "pkg": "regex 1.8.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12381[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12391[0m:[0m93[0m:                        "pkg": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12401[0m:[0m90[0m:                        "pkg": "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12411[0m:[0m88[0m:                        "pkg": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12421[0m:[0m86[0m:                        "pkg": "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12433[0m:[0m74[0m:                "id": "ryu 1.0.13 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12439[0m:[0m79[0m:                "id": "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12441[0m:[0m79[0m:                    "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12446[0m:[0m90[0m:                        "pkg": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12458[0m:[0m77[0m:                "id": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12460[0m:[0m82[0m:                    "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12465[0m:[0m93[0m:                        "pkg": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12483[0m:[0m84[0m:                "id": "serde_derive 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12485[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12486[0m:[0m74[0m:                    "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12487[0m:[0m72[0m:                    "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12492[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12502[0m:[0m85[0m:                        "pkg": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12512[0m:[0m83[0m:                        "pkg": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12526[0m:[0m81[0m:                "id": "serde_json 1.0.96 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12528[0m:[0m72[0m:                    "itoa 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12529[0m:[0m72[0m:                    "ryu 1.0.13 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12530[0m:[0m75[0m:                    "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12535[0m:[0m83[0m:                        "pkg": "itoa 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12545[0m:[0m83[0m:                        "pkg": "ryu 1.0.13 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12555[0m:[0m86[0m:                        "pkg": "serde 1.0.160 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12570[0m:[0m76[0m:                "id": "strsim 0.8.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12576[0m:[0m74[0m:                "id": "syn 2.0.15 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12578[0m:[0m80[0m:                    "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12579[0m:[0m74[0m:                    "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12580[0m:[0m81[0m:                    "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12585[0m:[0m91[0m:                        "pkg": "proc-macro2 1.0.56 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12595[0m:[0m85[0m:                        "pkg": "quote 1.0.26 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12605[0m:[0m92[0m:                        "pkg": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12625[0m:[0m79[0m:                "id": "termcolor 1.2.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12627[0m:[0m79[0m:                    "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12632[0m:[0m90[0m:                        "pkg": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12644[0m:[0m79[0m:                "id": "textwrap 0.11.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12646[0m:[0m82[0m:                    "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12651[0m:[0m93[0m:                        "pkg": "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12663[0m:[0m82[0m:                "id": "thread_local 1.1.7 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12665[0m:[0m74[0m:                    "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12666[0m:[0m78[0m:                    "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12671[0m:[0m85[0m:                        "pkg": "cfg-if 1.0.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12681[0m:[0m89[0m:                        "pkg": "once_cell 1.17.1 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12693[0m:[0m83[0m:                "id": "unicode-ident 1.0.8 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12699[0m:[0m84[0m:                "id": "unicode-width 0.1.10 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12707[0m:[0m77[0m:                "id": "walkdir 2.3.3 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12709[0m:[0m77[0m:                    "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12710[0m:[0m79[0m:                    "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12715[0m:[0m88[0m:                        "pkg": "same-file 1.0.6 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12725[0m:[0m90[0m:                        "pkg": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12737[0m:[0m76[0m:                "id": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12739[0m:[0m94[0m:                    "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12740[0m:[0m96[0m:                    "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12745[0m:[0m105[0m:                        "pkg": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12755[0m:[0m107[0m:                        "pkg": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12779[0m:[0m96[0m:                "id": "winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12785[0m:[0m81[0m:                "id": "winapi-util 0.1.5 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12787[0m:[0m74[0m:                    "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)"
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12792[0m:[0m85[0m:                        "pkg": "winapi 0.3.9 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/project-model/test_data/ripgrep-metadata.json[0m:[0m[32m12804[0m:[0m98[0m:                "id": "winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/[0m[1m[31mcrate[0ms.io-index)",
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m11[0m:[0m23[0m:use ide_db::base_db::{[0m[1m[31mCrate[0mId, FileLoader, ProcMacroPaths, SourceDatabase};
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m25[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m39[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Handle<H, C> {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) handle: H,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) receiver: C,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m44[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type ReqHandler = fn(&mut GlobalState, lsp_server::Response);
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m55[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct GlobalState {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m59[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m60[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fmt_pool: Handle<TaskPool<Task>, Receiver<Task>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) config: Arc<Config>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m63[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) config_errors: Option<ConfigError>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) analysis_host: AnalysisHost,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m65[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) diagnostics: DiagnosticCollection,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m66[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mem_docs: MemDocs,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m67[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) source_root_config: SourceRootConfig,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m68[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m71[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) shutdown_requested: bool,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m72[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) send_hint_refresh_query: bool,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m73[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) last_reported_status: Option<lsp_ext::ServerStatusParams>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m76[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) proc_macro_changed: bool,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m77[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) proc_macro_clients: Arc<[anyhow::Result<ProcMacroServer>]>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) flycheck: Arc<[FlycheckHandle]>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m81[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) flycheck_sender: Sender<flycheck::Message>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m82[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) flycheck_receiver: Receiver<flycheck::Message>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m83[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) last_flycheck_error: Option<String>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m86[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m87[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) vfs: Arc<RwLock<(vfs::Vfs, IntMap<FileId, LineEndings>)>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m88[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) vfs_config_version: u32,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m89[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) vfs_progress_config_version: u32,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m90[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) vfs_progress_n_total: usize,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m91[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) vfs_progress_n_done: usize,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m118[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) workspaces: Arc<Vec<ProjectWorkspace>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m119[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_graph_file_dependencies: FxHashSet<vfs::VfsPath>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m122[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fetch_workspaces_queue:
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m124[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fetch_build_data_queue:
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m126[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fetch_proc_macros_queue: OpQueue<Vec<ProcMacroPaths>, bool>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m127[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) prime_caches_queue: OpQueue,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m131[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct GlobalStateSnapshot {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m132[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) config: Arc<Config>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m133[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) analysis: Analysis,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m134[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) check_fixes: CheckFixes,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m136[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m138[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) workspaces: Arc<Vec<ProjectWorkspace>>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m140[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) proc_macros_loaded: bool,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) flycheck: Arc<[FlycheckHandle]>,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m147[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(sender: Sender<lsp_server::Message>, config: Config) -> GlobalState {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m206[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph_file_dependencies: FxHashSet::default(),
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m218[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn process_changes(&mut self) -> bool {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m294[0m:[0m46[0m:                            Some((path, self.[0m[1m[31mcrate[0m_graph_file_dependencies.contains(vfs_path)));
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m340[0m:[0m16[0m:            // [0m[1m[31mcrate[0m see https://github.com/rust-lang/rust-analyzer/issues/13029
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m341[0m:[0m38[0m:            if let Some((path, force_[0m[1m[31mcrate[0m_graph_reload)) = workspace_structure_change {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m344[0m:[0m27[0m:                    force_[0m[1m[31mcrate[0m_graph_reload,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m349[0m:[0m25[0m:                    let [0m[1m[31mcrate[0ms = raw_database.relevant_[0m[1m[31mcrate[0ms(file.file_id);
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m350[0m:[0m25[0m:                    let [0m[1m[31mcrate[0m_graph = raw_database.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m352[0m:[0m21[0m:                    [0m[1m[31mcrate[0ms.iter().any(|&krate| [0m[1m[31mcrate[0m_graph[krate].is_proc_macro)
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m359[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn snapshot(&self) -> GlobalStateSnapshot {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m374[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn send_request<R: lsp_types::request::Request>(
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m383[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn complete_request(&mut self, response: lsp_server::Response) {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m392[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn send_notification<N: lsp_types::notification::Notification>(
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m400[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn register_request(
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m410[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn respond(&mut self, response: lsp_server::Response) {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m424[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn cancel(&mut self, request_id: lsp_server::RequestId) {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m430[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_completed(&self, request: &lsp_server::Request) -> bool {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m450[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn url_to_file_id(&self, url: &Url) -> anyhow::Result<FileId> {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m454[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_id_to_url(&self, id: FileId) -> Url {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m458[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_line_index(&self, file_id: FileId) -> Cancellable<LineIndex> {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m465[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn url_file_version(&self, url: &Url) -> Option<i32> {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m470[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn anchored_path(&self, path: &AnchoredPathBuf) -> Url {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m478[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_id_to_file_path(&self, file_id: FileId) -> vfs::VfsPath {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m482[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn cargo_target_for_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m484[0m:[0m9[0m:        [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m486[0m:[0m37[0m:        let file_id = self.analysis.[0m[1m[31mcrate[0m_root([0m[1m[31mcrate[0m_id).ok()?;
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m498[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn vfs_memory_usage(&self) -> usize {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m502[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_exists(&self, file_id: FileId) -> bool {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m507[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {
[0m[35mcrates/rust-analyzer/src/global_state.rs[0m:[0m[32m513[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn url_to_file_id(vfs: &vfs::Vfs, url: &Url) -> anyhow::Result<FileId> {
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod utils;
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod semantic_tokens;
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m8[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod from_proto;
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod to_proto;
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct LspError {
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m13[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) code: i32,
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m14[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) message: String,
[0m[35mcrates/rust-analyzer/src/lsp.rs[0m:[0m[32m18[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(code: i32, message: String) -> LspError {
[0m[35mcrates/flycheck/src/lib.rs[0m:[0m[32m148[0m:[0m13[0m:    DidCheck[0m[1m[31mCrate[0m(String),
[0m[35mcrates/flycheck/src/lib.rs[0m:[0m[32m266[0m:[0m64[0m:                        self.report_progress(Progress::DidCheck[0m[1m[31mCrate[0m(msg.target.name));
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m264[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MappedRustDiagnostic {
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m265[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) url: lsp_types::Url,
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m266[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) diagnostic: lsp_types::Diagnostic,
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m267[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fix: Option<Fix>,
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m280[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn map_rust_diagnostic_to_lsp(
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m524[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{config::Config, global_state::GlobalState};
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1101[0m:[0m35[0m:                    "file_name": "[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1122[0m:[0m35[0m:                    "file_name": "[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1144[0m:[0m63[0m:            "rendered": "error[E0308]: mismatched types\n --> [0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs:4:18\n  |\n4 |     let x: u32 = \"𐐀𐐀𐐀𐐀\"; // 17-23\n  |            ---   ^^^^^^ expected `u32`, found `&str`\n  |            |\n  |            expected due to this\n\n"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1194[0m:[0m361[0m:    "rendered": "error[E0277]: can't compare `{integer}` with `&str`\n --> src/main.rs:2:5\n  |\n2 |     assert_eq!(1, \"love\");\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\n  |\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\n  = note: this error originates in a macro outside of the current [0m[1m[31mcrate[0m (in Nightly builds, run with -Z external-macro-backtrace for more info)\n\n",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1320[0m:[0m43[0m:                            "text": "({ $ [0m[1m[31mcrate[0m :: assert_eq ! ($ left, $ right) }) ;"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1385[0m:[0m87[0m:                            "text": "                  & * left_val, & * right_val, $ [0m[1m[31mcrate[0m :: format_args !"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1462[0m:[0m88[0m:        "rendered": "error: Please register your known path in the path module\n   --> [0m[1m[31mcrate[0ms/hir_def/src/path.rs:265:9\n    |\n265 |         compile_error!(\"Please register your known path in the path module\")\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | \n   ::: [0m[1m[31mcrate[0ms/hir_def/src/data.rs:80:16\n    |\n80  |     let path = path![std::future::Future];\n    |                -------------------------- in this macro invocation\n\n",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1480[0m:[0m39[0m:                        "file_name": "[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1560[0m:[0m42[0m:                    "macro_decl_name": "$[0m[1m[31mcrate[0m::__known_path!",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1573[0m:[0m47[0m:                                "file_name": "[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1594[0m:[0m59[0m:                                        "text": "        $[0m[1m[31mcrate[0m::__known_path!($start $(:: $seg)*);"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1599[0m:[0m59[0m:                                        "text": "        $[0m[1m[31mcrate[0m::path::ModPath::from_simple_segments($[0m[1m[31mcrate[0m::path::PathKind::Abs, vec!["
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1604[0m:[0m63[0m:                                        "text": "            $[0m[1m[31mcrate[0m::path::__name![$start], $($[0m[1m[31mcrate[0m::path::__name![$seg],)*"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1630[0m:[0m47[0m:                                "file_name": "[0m[1m[31mcrate[0ms/hir_def/src/data.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1646[0m:[0m39[0m:                        "file_name": "[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1657[0m:[0m51[0m:                                "text": "        $[0m[1m[31mcrate[0m::__known_path!($start $(:: $seg)*);"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1662[0m:[0m31[0m:                "file_name": "[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1818[0m:[0m58[0m:                "message": "`main` function not found in [0m[1m[31mcrate[0m `current`",
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1821[0m:[0m78[0m:                    "explanation": "No `main` function was found in a binary [0m[1m[31mcrate[0m.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"
[0m[35mcrates/rust-analyzer/src/diagnostics/to_proto.rs[0m:[0m[32m1851[0m:[0m73[0m:                "rendered": "error[E0601]: `main` function not found in [0m[1m[31mcrate[0m `current`\n  |\n  = note: consider adding a `main` function to `src/bin/current.rs`\n\n"
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m10[0m:[0m26[0m:            path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m45[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m77[0m:[0m26[0m:            path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/data.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m112[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m144[0m:[0m26[0m:            path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m179[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/path.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt[0m:[0m[32m205[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/hir_def/src/data.rs",
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct LineIndex {
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m18[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) index: Arc<ide::LineIndex>,
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) endings: LineEndings,
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m20[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) encoding: PositionEncoding,
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum LineEndings {
[0m[35mcrates/rust-analyzer/src/line_index.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn normalize(src: String) -> (String, LineEndings) {
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m52[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct SourceAnalyzer {
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) file_id: HirFileId,
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m63[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) resolver: Resolver,
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m69[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_body(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m90[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_body_no_infer(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m106[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_resolver(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m169[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expr_adjustments(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m179[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_of_expr(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m195[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_of_pat(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m211[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_of_binding_in_pat(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m223[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn type_of_self(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m234[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn binding_mode_of_pat(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m249[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn pattern_adjustments(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m266[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_method_call_as_callable(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m280[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_method_call(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m291[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_method_call_fallback(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m306[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_await_to_poll(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m343[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_prefix_expr(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m363[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_index_expr(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m381[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_bin_expr(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m402[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_try_expr(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m421[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_field(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m430[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_record_field(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m464[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_record_pat_field(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m481[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_macro_call(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m493[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_bind_pat_to_const(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m511[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_path(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m701[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn record_literal_missing_fields(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m718[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn record_pattern_missing_fields(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m754[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn expand(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m768[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_variant(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m778[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_unsafe_macro_call(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m953[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn resolve_hir_path(
[0m[35mcrates/hir/src/source_analyzer.rs[0m:[0m[32m962[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn resolve_hir_path_as_attr_macro(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_cancel(state: &mut GlobalState, params: CancelParams) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_work_done_progress_cancel(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m53[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_open_text_document(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m72[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_change_text_document(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m105[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_close_text_document(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m129[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_save_text_document(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m155[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_change_configuration(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m195[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_change_workspace_folders(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m223[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_did_change_watched_files(
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m244[0m:[0m16[0m:            // [0m[1m[31mCrate[0ms containing or depending on the saved file
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m245[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_ids: Vec<_> = world
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m247[0m:[0m18[0m:                .[0m[1m[31mcrate[0ms_for(file_id)?
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m255[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_root_paths: Vec<_> = [0m[1m[31mcrate[0m_ids
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m257[0m:[0m31[0m:                .filter_map(|&[0m[1m[31mcrate[0m_id| {
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m260[0m:[0m26[0m:                        .[0m[1m[31mcrate[0m_root([0m[1m[31mcrate[0m_id)
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m267[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_root_paths: Vec<_> = [0m[1m[31mcrate[0m_root_paths.iter().map(Deref::deref).collect();
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m276[0m:[0m40[0m:                            .any(|&it| [0m[1m[31mcrate[0m_root_paths.contains(&cargo[it].root.as_path()))
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m280[0m:[0m29[0m:                    project.[0m[1m[31mcrate[0ms().any(|(c, _)| [0m[1m[31mcrate[0m_ids.iter().any(|&[0m[1m[31mcrate[0m_id| [0m[1m[31mcrate[0m_id == c))
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m314[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_cancel_flycheck(state: &mut GlobalState, _: ()) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m320[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_clear_flycheck(state: &mut GlobalState, _: ()) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/notification.rs[0m:[0m[32m326[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_run_flycheck(
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/reasonable_line_numbers_from_empty_file.txt[0m:[0m[32m57[0m:[0m52[0m:            message: "`main` function not found in [0m[1m[31mcrate[0m `current`\nconsider adding a `main` function to `src/bin/current.rs`",
[0m[35mcrates/rust-analyzer/src/diff.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn diff(left: &str, right: &str) -> TextEdit {
[0m[35mcrates/rust-analyzer/src/caps.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/caps.rs[0m:[0m[32m173[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_item_edit_resolve(caps: &ClientCapabilities) -> bool {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m35[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m47[0m:[0m15[0m:        self, [0m[1m[31mCrate[0mInfoResult, ExternalDocsPair, ExternalDocsResponse, FetchDependencyListParams,
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m48[0m:[0m57[0m:        FetchDependencyListResult, PositionOrRange, View[0m[1m[31mCrate[0mGraphParams, WorkspaceSymbolParams,
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m52[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_proc_macros_rebuild(state: &mut GlobalState, _: ()) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m70[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_analyzer_status(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m118[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_memory_usage(state: &mut GlobalState, _: ()) -> anyhow::Result<String> {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m131[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_shuffle_[0m[1m[31mcrate[0m_graph(state: &mut GlobalState, _: ()) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m132[0m:[0m33[0m:    state.analysis_host.shuffle_[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m136[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_syntax_tree(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m148[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_hir(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m158[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_mir(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m168[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_interpret_function(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m178[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_file_text(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m186[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_item_tree(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m196[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_[0m[1m[31mcrate[0m_graph(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m198[0m:[0m17[0m:    params: View[0m[1m[31mCrate[0mGraphParams,
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m200[0m:[0m41[0m:    let _p = profile::span("handle_view_[0m[1m[31mcrate[0m_graph");
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m201[0m:[0m34[0m:    let dot = snap.analysis.view_[0m[1m[31mcrate[0m_graph(params.full)?.map_err(anyhow::Error::msg)?;
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m205[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_expand_macro(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m218[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_selection_range(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m261[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_matching_brace(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m284[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_join_lines(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m309[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_on_enter(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m324[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_on_type_formatting(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m365[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_document_symbol(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m454[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_workspace_symbol(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m549[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_will_rename_files(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m611[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_goto_definition(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m626[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_goto_declaration(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m641[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_goto_implementation(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m656[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_goto_type_definition(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m671[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_parent_module(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m707[0m:[0m36[0m:        // check if invoked at the [0m[1m[31mcrate[0m root
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m709[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = match snap.analysis.[0m[1m[31mcrate[0ms_for(file_id)?.first() {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m710[0m:[0m19[0m:            Some(&[0m[1m[31mcrate[0m_id) => [0m[1m[31mcrate[0m_id,
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m718[0m:[0m26[0m:        if snap.analysis.[0m[1m[31mcrate[0m_root([0m[1m[31mcrate[0m_id)? == file_id {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m738[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_runnables(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m778[0m:[0m49[0m:            let all_targets = !snap.analysis.is_[0m[1m[31mcrate[0m_no_std(spec.[0m[1m[31mcrate[0m_id)?;
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m833[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_related_tests(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m851[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_completion(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m879[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_completion_resolve(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m935[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_folding_range(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m952[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_signature_help(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m967[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_hover(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1004[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_prepare_rename(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1018[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_rename(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1057[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_references(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1100[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_formatting(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1109[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_range_formatting(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1118[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_code_action(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1196[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_code_action_resolve(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1290[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_code_lens(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1333[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_code_lens_resolve(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1356[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_document_highlight(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1378[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_ssr(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1398[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_inlay_hints(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1428[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_inlay_hints_resolve(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1484[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_call_hierarchy_prepare(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1506[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_call_hierarchy_incoming(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1541[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_call_hierarchy_outgoing(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1576[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_semantic_tokens_full(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1606[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_semantic_tokens_full_delta(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1649[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_semantic_tokens_range(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1675[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_open_docs(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1714[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_open_cargo_toml(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1732[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_move_item(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1754[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn handle_view_recursive_memory_layout(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1941[0m:[0m37[0m:    // Determine the edition of the [0m[1m[31mcrate[0m the file belongs to (if there's multiple, we pick the
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1945[0m:[0m19[0m:        .relevant_[0m[1m[31mcrate[0ms_for(file_id)?
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m1947[0m:[0m15[0m:        .map(|[0m[1m[31mcrate[0m_id| snap.analysis.[0m[1m[31mcrate[0m_edition([0m[1m[31mcrate[0m_id))
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2090[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fetch_dependency_list(
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2094[0m:[0m9[0m:    let [0m[1m[31mcrate[0ms = state.analysis.fetch_[0m[1m[31mcrate[0ms()?;
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2095[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_infos = [0m[1m[31mcrate[0ms
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2099[0m:[0m13[0m:            [0m[1m[31mcrate[0m_path(root_file_path).and_then(to_url).map(|path| [0m[1m[31mCrate[0mInfoResult {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2106[0m:[0m36[0m:    Ok(FetchDependencyListResult { [0m[1m[31mcrate[0ms: [0m[1m[31mcrate[0m_infos })
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2109[0m:[0m42[0m:/// Searches for the directory of a Rust [0m[1m[31mcrate[0m given this [0m[1m[31mcrate[0m's root file path.
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2113[0m:[0m58[0m:/// * `root_file_path`: The path to the root file of the [0m[1m[31mcrate[0m.
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2117[0m:[0m69[0m:/// An `Option` value representing the path to the directory of the [0m[1m[31mcrate[0m with the given
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2118[0m:[0m21[0m:/// name, if such a [0m[1m[31mcrate[0m is found. If no [0m[1m[31mcrate[0m with the given name is found, this function
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2120[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_path(root_file_path: VfsPath) -> Option<VfsPath> {
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2125[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_path = cargo_toml_path.parent()?;
[0m[35mcrates/rust-analyzer/src/handlers/request.rs[0m:[0m[32m2126[0m:[0m25[0m:            return Some([0m[1m[31mcrate[0m_path);
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m4[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type Cause = String;
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m6[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct OpQueue<Args = (), Output = ()> {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn request_op(&mut self, reason: Cause, args: Args) {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn should_start_op(&mut self) -> Option<(Cause, Args)> {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn op_completed(&mut self, result: Output) {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m35[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn last_op_result(&self) -> &Output {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn op_in_progress(&self) -> bool {
[0m[35mcrates/rust-analyzer/src/op_queue.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn op_requested(&self) -> bool {
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m33[0m:[0m19[0m:    let file = "./[0m[1m[31mcrate[0ms/ide-db/src/apply_change.rs";
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m87[0m:[0m19[0m:    let file = "./[0m[1m[31mcrate[0ms/hir/src/lib.rs";
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m141[0m:[0m49[0m:                granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m142[0m:[0m49[0m:                prefix_kind: hir::PrefixKind::By[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m181[0m:[0m49[0m:                granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/integrated_benchmarks.rs[0m:[0m[32m182[0m:[0m49[0m:                prefix_kind: hir::PrefixKind::By[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m52[0m:[0m40[0m:                version: format!("{}", [0m[1m[31mcrate[0m::version::version()),
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m316[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m321[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m334[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m349[0m:[0m21[0m:    //- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m364[0m:[0m21[0m:    //- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m380[0m:[0m21[0m:    //- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m402[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m407[0m:[0m21[0m:    //- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m420[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m425[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m438[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m443[0m:[0m17[0m://- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m458[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m463[0m:[0m21[0m:    //- /foo/lib.rs [0m[1m[31mcrate[0m:foo@0.1.0,https://a.b/foo.git library
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m478[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/rust-analyzer/src/cli/scip.rs[0m:[0m[32m497[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn abs_path(url: &lsp_types::Url) -> anyhow::Result<AbsPathBuf> {
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn vfs_path(url: &lsp_types::Url) -> anyhow::Result<vfs::VfsPath> {
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn offset(
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m47[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn text_range(
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m59[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_id(snap: &GlobalStateSnapshot, url: &lsp_types::Url) -> anyhow::Result<FileId> {
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m63[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_position(
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m73[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_range(
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m81[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn file_range_uri(
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m92[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn assist_kind(kind: lsp_types::CodeActionKind) -> Option<AssistKind> {
[0m[35mcrates/rust-analyzer/src/lsp/from_proto.rs[0m:[0m[32m106[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn annotation(
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/rustc_range_map_lsp_position.txt[0m:[0m[32m10[0m:[0m26[0m:            path: "/test/[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/rustc_range_map_lsp_position.txt[0m:[0m[32m69[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/rustc_range_map_lsp_position.txt[0m:[0m[32m101[0m:[0m26[0m:            path: "/test/[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/diagnostics/test_data/rustc_range_map_lsp_position.txt[0m:[0m[32m160[0m:[0m46[0m:                                path: "/test/[0m[1m[31mcrate[0ms/test_diagnostics/src/main.rs",
[0m[35mcrates/rust-analyzer/src/cli/symbols.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::{flags, read_stdin};
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m15[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn invalid_params_error(message: String) -> LspError {
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn notification_is<N: lsp_types::notification::Notification>(
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Progress {
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fraction(done: usize, total: usize) -> f64 {
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn show_message(
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m59[0m:[0m46[0m:                    if let Ok(Some(_item)) = [0m[1m[31mcrate[0m::from_json::<
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m80[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn show_and_log_error(&mut self, message: String, additional_info: Option<String>) {
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m110[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn poke_rust_analyzer_developer(&mut self, message: String) {
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m118[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn report_progress(
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m169[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn apply_document_changes(
[0m[35mcrates/rust-analyzer/src/lsp/utils.rs[0m:[0m[32m230[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn all_edits_are_disjoint(
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m22[0m:[0m34[0m:    base_db::{salsa::Durability, [0m[1m[31mCrate[0mGraph, ProcMacroPaths, ProcMacros},
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m33[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ProjectWorkspaceProgress {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m49[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum BuildDataProgress {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m56[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ProcMacroProgress {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m63[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_quiescent(&self) -> bool {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m72[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn update_configuration(&mut self, config: Config) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m99[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn current_status(&self) -> lsp_ext::ServerStatusParams {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m186[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fetch_workspaces(&mut self, cause: Cause, force_[0m[1m[31mcrate[0m_graph_reload: bool) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m256[0m:[0m31[0m:                        force_[0m[1m[31mcrate[0m_graph_reload,
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m263[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fetch_build_data(&mut self, cause: Cause) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m282[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fetch_proc_macros(&mut self, cause: Cause, paths: Vec<ProcMacroPaths>) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m304[0m:[0m57[0m:                res.extend(paths.into_iter().map(move |([0m[1m[31mcrate[0m_id, res)| {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m306[0m:[0m25[0m:                        [0m[1m[31mcrate[0m_id,
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m308[0m:[0m49[0m:                            |_| Err("proc macro [0m[1m[31mcrate[0m is missing dylib".to_owned()),
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m309[0m:[0m31[0m:                            |([0m[1m[31mcrate[0m_name, path)| {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m315[0m:[0m41[0m:                                        [0m[1m[31mcrate[0m_name
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m317[0m:[0m56[0m:                                            .and_then(|[0m[1m[31mcrate[0m_name| {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m318[0m:[0m72[0m:                                                dummy_replacements.get([0m[1m[31mcrate[0m_name).map(|v| &**v)
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m333[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_proc_macros(&mut self, proc_macros: ProcMacros) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m339[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn switch_workspaces(&mut self, cause: Cause) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m343[0m:[0m44[0m:        let Some((workspaces, force_reload_[0m[1m[31mcrate[0m_graph)) =
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m351[0m:[0m34[0m:                if *force_reload_[0m[1m[31mcrate[0m_graph {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m352[0m:[0m35[0m:                    self.recreate_[0m[1m[31mcrate[0m_graph(cause);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m388[0m:[0m34[0m:                if *force_reload_[0m[1m[31mcrate[0m_graph {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m389[0m:[0m35[0m:                    self.recreate_[0m[1m[31mcrate[0m_graph(cause);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m481[0m:[0m23[0m:        self.recreate_[0m[1m[31mcrate[0m_graph(cause);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m486[0m:[0m17[0m:    fn recreate_[0m[1m[31mcrate[0m_graph(&mut self, cause: String) {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m487[0m:[0m19[0m:        // Create [0m[1m[31mcrate[0m graph from all the workspaces
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m488[0m:[0m14[0m:        let ([0m[1m[31mcrate[0m_graph, proc_macro_paths, [0m[1m[31mcrate[0m_graph_file_dependencies) = {
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m491[0m:[0m16[0m:            // [0m[1m[31mcrate[0m graph construction relies on these paths, record them so when one of them gets
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m492[0m:[0m70[0m:            // deleted or created we trigger a reconstruction of the [0m[1m[31mcrate[0m graph
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m493[0m:[0m21[0m:            let mut [0m[1m[31mcrate[0m_graph_file_dependencies = FxHashSet::default();
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m498[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph_file_dependencies.insert(vfs_path.clone());
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m511[0m:[0m21[0m:            let mut [0m[1m[31mcrate[0m_graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m514[0m:[0m33[0m:                let (other, mut [0m[1m[31mcrate[0m_proc_macros) =
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m515[0m:[0m27[0m:                    ws.to_[0m[1m[31mcrate[0m_graph(&mut load, &self.config.extra_env());
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m516[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph.extend(other, &mut [0m[1m[31mcrate[0m_proc_macros);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m517[0m:[0m34[0m:                proc_macros.push([0m[1m[31mcrate[0m_proc_macros);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m519[0m:[0m14[0m:            ([0m[1m[31mcrate[0m_graph, proc_macros, [0m[1m[31mcrate[0m_graph_file_dependencies)
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m526[0m:[0m20[0m:        change.set_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph);
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m528[0m:[0m14[0m:        self.[0m[1m[31mcrate[0m_graph_file_dependencies = [0m[1m[31mcrate[0m_graph_file_dependencies;
[0m[35mcrates/rust-analyzer/src/reload.rs[0m:[0m[32m626[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn should_refresh_for_change(path: &AbsPath, change_kind: ChangeKind) -> bool {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m45[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn range(line_index: &LineIndex, range: TextRange) -> lsp_types::Range {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m51[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m81[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn structure_node_kind(kind: StructureNodeKind) -> lsp_types::SymbolKind {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m88[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn document_highlight_kind(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m98[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn diagnostic_severity(severity: Severity) -> lsp_types::DiagnosticSeverity {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m108[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn documentation(documentation: Documentation) -> lsp_types::Documentation {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m114[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_item_kind(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m157[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn text_edit(line_index: &LineIndex, indel: Indel) -> lsp_types::TextEdit {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m166[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_text_edit(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m183[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn snippet_text_edit(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m199[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn text_edit_vec(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m206[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn snippet_text_edit_vec(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m217[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn completion_items(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m361[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn signature_help(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m439[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inlay_hint(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m557[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn semantic_tokens(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m617[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn semantic_token_delta(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m715[0m:[0m20[0m:            HlMod::[0m[1m[31mCrate[0mRoot => semantic_tokens::[0m[1m[31mCRATE[0m_ROOT,
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m736[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn folding_range(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m795[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn url(snap: &GlobalStateSnapshot, file_id: FileId) -> lsp_types::Url {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m803[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn url_from_abs_path(path: &AbsPath) -> lsp_types::Url {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m831[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn optional_versioned_text_document_identifier(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m840[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn location(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m852[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn location_from_nav(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m863[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn location_link(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m899[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn goto_definition_response(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1041[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn snippet_text_document_edit(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1064[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn snippet_text_document_ops(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1124[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn snippet_workspace_edit(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1167[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn workspace_edit(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1220[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn call_hierarchy_item(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1240[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn code_action_kind(kind: AssistKind) -> lsp_types::CodeActionKind {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1251[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn code_action(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1285[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn runnable(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1313[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn code_lens(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1456[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod command {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1460[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1466[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn show_references(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1487[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run_single(runnable: &lsp_ext::Runnable, title: &str) -> lsp_types::Command {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1495[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_single(runnable: &lsp_ext::Runnable) -> lsp_types::Command {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1503[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn interpret_single(_runnable: &lsp_ext::Runnable) -> lsp_types::Command {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1512[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn goto_location(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1532[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trigger_parameter_hints() -> lsp_types::Command {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1541[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn implementation_title(count: usize) -> String {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1549[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reference_title(count: usize) -> String {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1557[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn markup_content(
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1569[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn rename_error(err: RenameError) -> LspError {
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1628[0m:[0m11[0m:/// # use [0m[1m[31mcrate[0m::bar;
[0m[35mcrates/rust-analyzer/src/lsp/to_proto.rs[0m:[0m[32m1646[0m:[0m37[0m:        assert!(!docs.contains("use [0m[1m[31mcrate[0m::bar"));
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m11[0m:[0m21[0m:    Adt, AssocItem, [0m[1m[31mCrate[0m, DefWithBody, HasSource, HirDisplay, ModuleDef, Name,
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m39[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::{
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m102[0m:[0m26[0m:        let mut krates = [0m[1m[31mCrate[0m::all(db);
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m129[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0m_def_map_sw = self.stop_watch();
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m130[0m:[0m21[0m:        let mut num_[0m[1m[31mcrate[0ms = 0;
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m140[0m:[0m21[0m:                num_[0m[1m[31mcrate[0ms += 1;
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m149[0m:[0m20[0m:        eprint!("  [0m[1m[31mcrate[0ms: {num_[0m[1m[31mcrate[0ms}");
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m203[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map_time = [0m[1m[31mcrate[0m_def_map_sw.elapsed();
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m204[0m:[0m52[0m:        eprintln!("{:<20} {}", "Item Collection:", [0m[1m[31mcrate[0m_def_map_time);
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m205[0m:[0m24[0m:        report_metric("[0m[1m[31mcrate[0m def map time", [0m[1m[31mcrate[0m_def_map_time.time.as_millis() as u64, "ms");
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m759[0m:[0m86[0m:                        granularity: ide_db::imports::insert_use::ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/cli/analysis_stats.rs[0m:[0m[32m761[0m:[0m57[0m:                        prefix_kind: hir::PrefixKind::By[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/cli/parse.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::{flags, read_stdin};
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::line_index::PositionEncoding;
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m32[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mInfoResult {
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m52[0m:[0m9[0m:    pub [0m[1m[31mcrate[0ms: Vec<[0m[1m[31mCrate[0mInfoResult>,
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m63[0m:[0m17[0m:pub enum Shuffle[0m[1m[31mCrate[0mGraph {}
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m65[0m:[0m25[0m:impl Request for Shuffle[0m[1m[31mCrate[0mGraph {
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m68[0m:[0m56[0m:    const METHOD: &'static str = "rust-analyzer/shuffle[0m[1m[31mCrate[0mGraph";
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m136[0m:[0m16[0m:pub struct View[0m[1m[31mCrate[0mGraphParams {
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m137[0m:[0m23[0m:    /// Include *all* [0m[1m[31mcrate[0ms, not just [0m[1m[31mcrate[0ms in the workspace.
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m141[0m:[0m14[0m:pub enum View[0m[1m[31mCrate[0mGraph {}
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m143[0m:[0m22[0m:impl Request for View[0m[1m[31mCrate[0mGraph {
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m144[0m:[0m23[0m:    type Params = View[0m[1m[31mCrate[0mGraphParams;
[0m[35mcrates/rust-analyzer/src/lsp/ext.rs[0m:[0m[32m146[0m:[0m53[0m:    const METHOD: &'static str = "rust-analyzer/view[0m[1m[31mCrate[0mGraph";
[0m[35mcrates/rust-analyzer/src/cli/diagnostics.rs[0m:[0m[32m7[0m:[0m28[0m:use hir::{db::HirDatabase, [0m[1m[31mCrate[0m, Module};
[0m[35mcrates/rust-analyzer/src/cli/diagnostics.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::flags;
[0m[35mcrates/rust-analyzer/src/cli/diagnostics.rs[0m:[0m[32m47[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_name =
[0m[35mcrates/rust-analyzer/src/cli/diagnostics.rs[0m:[0m[32m49[0m:[0m38[0m:                println!("processing [0m[1m[31mcrate[0m: {[0m[1m[31mcrate[0m_name}, module: {}", _vfs.file_path(file_id));
[0m[35mcrates/rust-analyzer/src/cli/diagnostics.rs[0m:[0m[32m83[0m:[0m9[0m:        [0m[1m[31mCrate[0m::all(db).into_iter().map(|krate| krate.root_module()).collect();
[0m[35mcrates/rust-analyzer/src/cli/ssr.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::flags;
[0m[35mcrates/rust-analyzer/src/cli/run_tests.rs[0m:[0m[32m3[0m:[0m11[0m:use hir::{[0m[1m[31mCrate[0m, Module};
[0m[35mcrates/rust-analyzer/src/cli/run_tests.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::{flags, full_name_of_item, Result};
[0m[35mcrates/rust-analyzer/src/cli/run_tests.rs[0m:[0m[32m76[0m:[0m32[0m:    let mut worklist: Vec<_> = [0m[1m[31mCrate[0m::all(db)
[0m[35mcrates/rust-analyzer/src/cli/highlight.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::{flags, read_stdin};
[0m[35mcrates/rust-analyzer/src/lib.rs[0m:[0m[32m3[0m:[0m10[0m://! This [0m[1m[31mcrate[0m takes Rust-specific analysis results from ide and translates
[0m[35mcrates/rust-analyzer/src/lib.rs[0m:[0m[32m36[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod notification;
[0m[35mcrates/rust-analyzer/src/lib.rs[0m:[0m[32m37[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod request;
[0m[35mcrates/rust-analyzer/src/lib.rs[0m:[0m[32m49[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{caps::server_capabilities, main_loop::main_loop, version::version};
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m64[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Task {
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m75[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum PrimeCachesProgress {
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m122[0m:[0m35[0m:        if let Some((cause, force_[0m[1m[31mcrate[0m_graph_reload)) =
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m125[0m:[0m48[0m:            self.fetch_workspaces(cause, force_[0m[1m[31mcrate[0m_graph_reload);
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m238[0m:[0m53[0m:                            message = match &report.[0m[1m[31mcrate[0ms_currently_indexing[..] {
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m239[0m:[0m34[0m:                                [[0m[1m[31mcrate[0m_name] => Some(format!(
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m240[0m:[0m46[0m:                                    "{}/{} ({[0m[1m[31mcrate[0m_name})",
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m241[0m:[0m44[0m:                                    report.[0m[1m[31mcrate[0ms_done, report.[0m[1m[31mcrate[0ms_total
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m243[0m:[0m34[0m:                                [[0m[1m[31mcrate[0m_name, rest @ ..] => Some(format!(
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m245[0m:[0m44[0m:                                    report.[0m[1m[31mcrate[0ms_done,
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m246[0m:[0m44[0m:                                    report.[0m[1m[31mcrate[0ms_total,
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m247[0m:[0m37[0m:                                    [0m[1m[31mcrate[0m_name,
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m253[0m:[0m66[0m:                            fraction = Progress::fraction(report.[0m[1m[31mcrate[0ms_done, report.[0m[1m[31mcrate[0ms_total);
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m379[0m:[0m39[0m:            if let Some((cause, force_[0m[1m[31mcrate[0m_graph_reload)) =
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m382[0m:[0m52[0m:                self.fetch_workspaces(cause, force_[0m[1m[31mcrate[0m_graph_reload);
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m437[0m:[0m82[0m:                // Only publish diagnostics for files in the workspace, not from [0m[1m[31mcrate[0ms.io deps
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m511[0m:[0m76[0m:                    ProjectWorkspaceProgress::End(workspaces, force_reload_[0m[1m[31mcrate[0m_graph) => {
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m513[0m:[0m74[0m:                            .op_completed(Some((workspaces, force_reload_[0m[1m[31mcrate[0m_graph)));
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m614[0m:[0m35[0m:                let diagnostics = [0m[1m[31mcrate[0m::diagnostics::to_proto::map_rust_diagnostic_to_lsp(
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m644[0m:[0m49[0m:                    flycheck::Progress::DidCheck[0m[1m[31mCrate[0m(target) => (Progress::Report, Some(target)),
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m705[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::handlers::request as handlers;
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m714[0m:[0m44[0m:            .on_sync_mut::<lsp_ext::Shuffle[0m[1m[31mCrate[0mGraph>(handlers::handle_shuffle_[0m[1m[31mcrate[0m_graph)
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m753[0m:[0m32[0m:            .on::<lsp_ext::View[0m[1m[31mCrate[0mGraph>(handlers::handle_view_[0m[1m[31mcrate[0m_graph)
[0m[35mcrates/rust-analyzer/src/main_loop.rs[0m:[0m[32m792[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::handlers::notification as handlers;
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m6[0m:[0m24[0m:use ide::{Cancellable, [0m[1m[31mCrate[0mId, FileId, RunnableKind, TestId};
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::global_state::GlobalStateSnapshot;
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct CargoTargetSpec {
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) workspace_root: AbsPathBuf,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m20[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) cargo_toml: ManifestPath,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) package: String,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) target: String,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) target_kind: TargetKind,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m24[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m25[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) required_features: Vec<String>,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) features: FxHashSet<String>,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn runnable_args(
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m123[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn for_file(
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m127[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = match &*global_state_snapshot.analysis.[0m[1m[31mcrate[0ms_for(file_id)? {
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m128[0m:[0m15[0m:            &[[0m[1m[31mcrate[0m_id, ..] => [0m[1m[31mcrate[0m_id,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m131[0m:[0m79[0m:        let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_[0m[1m[31mcrate[0m_root([0m[1m[31mcrate[0m_id) {
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m146[0m:[0m13[0m:            [0m[1m[31mcrate[0m_id,
[0m[35mcrates/rust-analyzer/src/cargo_target_spec.rs[0m:[0m[32m152[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn push_to(self, buf: &mut Vec<String>, kind: &RunnableKind) {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m2[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod to_proto;
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{global_state::GlobalStateSnapshot, lsp, lsp_ext};
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type CheckFixes = Arc<IntMap<usize, IntMap<FileId, Vec<Fix>>>>;
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct DiagnosticCollection {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m27[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) native: IntMap<FileId, Vec<lsp_types::Diagnostic>>,
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) check: IntMap<usize, IntMap<FileId, Vec<lsp_types::Diagnostic>>>,
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) check_fixes: CheckFixes,
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Fix {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m37[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ranges: Vec<lsp_types::Range>,
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m38[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) action: lsp_ext::CodeAction,
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m42[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn clear_check(&mut self, flycheck_id: usize) {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn clear_check_all(&mut self) {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m57[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn clear_native_for(&mut self, file_id: FileId) {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_check_diagnostic(
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m82[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_native_diagnostics(
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m102[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn diagnostics_for(
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m111[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn take_changes(&mut self) -> Option<IntSet<FileId>> {
[0m[35mcrates/rust-analyzer/src/diagnostics.rs[0m:[0m[32m126[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fetch_native_diagnostics(
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ExitCode(pub([0m[1m[31mcrate[0m) Option<i32>);
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn run_rustc_skipping_cargo_checking(
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m30[0m:[0m39[0m:        // link —     Generates the [0m[1m[31mcrate[0ms specified by --[0m[1m[31mcrate[0m-type. The default
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m31[0m:[0m54[0m:        //            output filenames depend on the [0m[1m[31mcrate[0m type and platform. This
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m33[0m:[0m72[0m:        // metadata — Generates a file containing metadata about the [0m[1m[31mcrate[0m.
[0m[35mcrates/rust-analyzer/src/bin/rustc_wrapper.rs[0m:[0m[32m34[0m:[0m54[0m:        //            The default output filename is [0m[1m[31mCRATE[0m_NAME.rmeta.
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct LoggerConfig {
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m28[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) log_file: Option<File>,
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) filter: String,
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) chalk_filter: Option<String>,
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m44[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn init(self) -> anyhow::Result<()> {
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m100[0m:[0m47[0m:        // If this event is issued from `log` [0m[1m[31mcrate[0m, then the value of target is
[0m[35mcrates/rust-analyzer/src/bin/logger.rs[0m:[0m[32m105[0m:[0m48[0m:            // This event is issued from `log` [0m[1m[31mcrate[0m
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m20[0m:[0m15[0m:        $(pub([0m[1m[31mcrate[0m) const $standard: SemanticTokenType = SemanticTokenType::$standard;)*
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m21[0m:[0m15[0m:        $(pub([0m[1m[31mcrate[0m) const $custom: SemanticTokenType = SemanticTokenType::new($string);)*
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m23[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) const SUPPORTED_TYPES: &[SemanticTokenType] = &[
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m28[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn standard_fallback_type(token: SemanticTokenType) -> Option<SemanticTokenType> {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m115[0m:[0m15[0m:        $(pub([0m[1m[31mcrate[0m) const $standard: SemanticTokenModifier = SemanticTokenModifier::$standard;)*
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m116[0m:[0m15[0m:        $(pub([0m[1m[31mcrate[0m) const $custom: SemanticTokenModifier = SemanticTokenModifier::new($string);)*
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m118[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m141[0m:[0m10[0m:        ([0m[1m[31mCRATE[0m_ROOT, "[0m[1m[31mcrate[0mRoot"),
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m155[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ModifierSet(pub([0m[1m[31mcrate[0m) u32);
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m158[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn standard_fallback(&mut self) {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m174[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct SemanticTokensBuilder {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m182[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(id: String) -> Self {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m187[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn push(&mut self, range: Range, token_index: u32, modifier_bitset: u32) {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m215[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn build(self) -> SemanticTokens {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m220[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn diff_tokens(old: &[SemanticToken], new: &[SemanticToken]) -> Vec<SemanticTokensEdit> {
[0m[35mcrates/rust-analyzer/src/lsp/semantic_tokens.rs[0m:[0m[32m246[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn type_index(ty: SemanticTokenType) -> u32 {
[0m[35mcrates/rust-analyzer/src/cli/flags.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::cli::Verbosity;
[0m[35mcrates/rust-analyzer/src/cli/flags.rs[0m:[0m[32m61[0m:[0m42[0m:            /// Randomize order in which [0m[1m[31mcrate[0ms, modules, and items are processed.
[0m[35mcrates/rust-analyzer/src/cli/flags.rs[0m:[0m[32m72[0m:[0m36[0m:            /// Don't load sysroot [0m[1m[31mcrate[0ms (`std`, `core` & friends).
[0m[35mcrates/hir/src/db.rs[0m:[0m[32m1[0m:[0m27[0m://! Re-exports various sub[0m[1m[31mcrate[0ms databases so that the calling code can depend
[0m[35mcrates/rust-analyzer/src/cli/lsif.rs[0m:[0m[32m21[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/bin/main.rs[0m:[0m[32m127[0m:[0m68[0m:        // The meaning of CHALK_DEBUG I suspected is to tell chalk [0m[1m[31mcrate[0ms
[0m[35mcrates/rust-analyzer/src/bin/main.rs[0m:[0m[32m133[0m:[0m50[0m:        // As the value should only affect chalk [0m[1m[31mcrate[0ms, we'd better manually
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m33[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m140[0m:[0m66[0m:        /// Unsets the implicit `#[cfg(test)]` for the specified [0m[1m[31mcrate[0ms.
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m349[0m:[0m63[0m:        imports_granularity_group: ImportGranularityDef  = "\"[0m[1m[31mcrate[0m\"",
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m354[0m:[0m73[0m:        /// Prefer to unconditionally use imports of the core and alloc [0m[1m[31mcrate[0m, over the std [0m[1m[31mcrate[0m.
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m469[0m:[0m40[0m:        /// This config takes a map of [0m[1m[31mcrate[0m names with the exported proc-macro names to ignore as values.
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m488[0m:[0m13[0m:        /// [0m[1m[31mcrate[0ms must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m1439[0m:[0m39[0m:                ImportGranularityDef::[0m[1m[31mCrate[0m => ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m1445[0m:[0m36[0m:                ImportPrefixDef::By[0m[1m[31mCrate[0m => PrefixKind::By[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m1877[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2001[0m:[0m22[0m:    #[serde(alias = "[0m[1m[31mcrate[0m")]
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2002[0m:[0m7[0m:    By[0m[1m[31mCrate[0m,
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2212[0m:[0m35[0m:            "enum": ["preserve", "[0m[1m[31mcrate[0m", "module", "item"],
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2215[0m:[0m46[0m:                "Merge imports from the same [0m[1m[31mcrate[0m into a single use statement. Conversely, imports from different [0m[1m[31mcrate[0ms are split into separate statements.",
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2225[0m:[0m18[0m:                "[0m[1m[31mcrate[0m"
[0m[35mcrates/rust-analyzer/src/config.rs[0m:[0m[32m2230[0m:[0m82[0m:                "Force import paths to be absolute by always starting them with `[0m[1m[31mcrate[0m` or the extern [0m[1m[31mcrate[0m name they come from."
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m33[0m:[0m15[0m:    (base_db::[0m[1m[31mCrate[0mId, [0m[1m[31mcrate[0m::[0m[1m[31mCrate[0m),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m34[0m:[0m25[0m:    (hir_def::ModuleId, [0m[1m[31mcrate[0m::Module),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m35[0m:[0m25[0m:    (hir_def::StructId, [0m[1m[31mcrate[0m::Struct),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m36[0m:[0m24[0m:    (hir_def::UnionId, [0m[1m[31mcrate[0m::Union),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m37[0m:[0m23[0m:    (hir_def::EnumId, [0m[1m[31mcrate[0m::Enum),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m38[0m:[0m28[0m:    (hir_def::TypeAliasId, [0m[1m[31mcrate[0m::TypeAlias),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m39[0m:[0m24[0m:    (hir_def::TraitId, [0m[1m[31mcrate[0m::Trait),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m40[0m:[0m29[0m:    (hir_def::TraitAliasId, [0m[1m[31mcrate[0m::TraitAlias),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m41[0m:[0m25[0m:    (hir_def::StaticId, [0m[1m[31mcrate[0m::Static),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m42[0m:[0m24[0m:    (hir_def::ConstId, [0m[1m[31mcrate[0m::Const),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m43[0m:[0m30[0m:    (hir_def::InTypeConstId, [0m[1m[31mcrate[0m::InTypeConst),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m44[0m:[0m27[0m:    (hir_def::FunctionId, [0m[1m[31mcrate[0m::Function),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m45[0m:[0m23[0m:    (hir_def::ImplId, [0m[1m[31mcrate[0m::Impl),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m46[0m:[0m35[0m:    (hir_def::TypeOrConstParamId, [0m[1m[31mcrate[0m::TypeOrConstParam),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m47[0m:[0m28[0m:    (hir_def::TypeParamId, [0m[1m[31mcrate[0m::TypeParam),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m48[0m:[0m29[0m:    (hir_def::ConstParamId, [0m[1m[31mcrate[0m::ConstParam),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m49[0m:[0m32[0m:    (hir_def::LifetimeParamId, [0m[1m[31mcrate[0m::LifetimeParam),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m50[0m:[0m24[0m:    (hir_def::MacroId, [0m[1m[31mcrate[0m::Macro),
[0m[35mcrates/hir/src/from_id.rs[0m:[0m[32m51[0m:[0m21[0m:    (hir_def::Extern[0m[1m[31mCrate[0mId, [0m[1m[31mcrate[0m::Extern[0m[1m[31mCrate[0mDecl),
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MemDocs {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m19[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn contains(&self, path: &VfsPath) -> bool {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m23[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn insert(&mut self, path: VfsPath, data: DocumentData) -> Result<(), ()> {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn remove(&mut self, path: &VfsPath) -> Result<(), ()> {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get(&self, path: &VfsPath) -> Option<&DocumentData> {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get_mut(&mut self, path: &VfsPath) -> Option<&mut DocumentData> {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter(&self) -> impl Iterator<Item = &VfsPath> {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn take_changes(&mut self) -> bool {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m63[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct DocumentData {
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) version: i32,
[0m[35mcrates/rust-analyzer/src/mem_docs.rs[0m:[0m[32m68[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(version: i32) -> Self {
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m20[0m:[0m74[0m:    Adt, AsAssocItem, AssocItemContainer, Const, ConstParam, Enum, Extern[0m[1m[31mCrate[0mDecl, Field,
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m21[0m:[0m32[0m:    Function, GenericParam, Has[0m[1m[31mCrate[0m, HasVisibility, LifetimeParam, Macro, Module, SelfParam,
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m250[0m:[0m27[0m:impl HirDisplay for Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m253[0m:[0m29[0m:        f.write_str("extern [0m[1m[31mcrate[0m ")?;
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m577[0m:[0m29[0m:            None if self.is_[0m[1m[31mcrate[0m_root() => match self.krate(f.db).display_name(f.db) {
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m578[0m:[0m49[0m:                Some(name) => write!(f, "extern [0m[1m[31mcrate[0m {name}"),
[0m[35mcrates/hir/src/display.rs[0m:[0m[32m579[0m:[0m45[0m:                None => f.write_str("extern [0m[1m[31mcrate[0m {unknown}"),
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m20[0m:[0m30[0m://! go from [`ast::Fn`] to [`[0m[1m[31mcrate[0m::Function`], and that's exactly what this
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m74[0m:[0m43[0m://! In that case, we loop through all the [0m[1m[31mcrate[0ms that might contain this file
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m80[0m:[0m69[0m://! more or less every item in a `lib.rs` is a part of two distinct [0m[1m[31mcrate[0ms: a
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m85[0m:[0m12[0m://! active [0m[1m[31mcrate[0m for a given position, and then provide an API to resolve all
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m86[0m:[0m40[0m://! syntax nodes against this specific [0m[1m[31mcrate[0m.
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m96[0m:[0m79[0m:    AdtId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, Extern[0m[1m[31mCrate[0mId, FieldId,
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m109[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::HirDatabase, InFile};
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m122[0m:[0m14[0m:        for &[0m[1m[31mcrate[0m_id in self.db.relevant_[0m[1m[31mcrate[0ms(file).iter() {
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m124[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = self.db.[0m[1m[31mcrate[0m_def_map([0m[1m[31mcrate[0m_id);
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m126[0m:[0m17[0m:                [0m[1m[31mcrate[0m_def_map
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m128[0m:[0m37[0m:                    .map(|local_id| [0m[1m[31mcrate[0m_def_map.module_id(local_id)),
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m206[0m:[0m26[0m:    pub(super) fn extern_[0m[1m[31mcrate[0m_to_def(
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m208[0m:[0m32[0m:        src: InFile<ast::Extern[0m[1m[31mCrate[0m>,
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m209[0m:[0m23[0m:    ) -> Option<Extern[0m[1m[31mCrate[0mId> {
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m210[0m:[0m39[0m:        self.to_def(src, keys::EXTERN_[0m[1m[31mCRATE[0m)
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m237[0m:[0m16[0m:        if let [0m[1m[31mcrate[0m::Pat::Bind { id, .. } = body[pat_id] {
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m250[0m:[0m16[0m:        if let [0m[1m[31mcrate[0m::Pat::Bind { id, .. } = body[pat_id] {
[0m[35mcrates/hir/src/semantics/source_to_def.rs[0m:[0m[32m466[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ChildContainer {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m28[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m32[0m:[0m93[0m:    Access, Adjust, Adjustment, AutoBorrow, BindingMode, BuiltinAttr, Callable, ConstParam, [0m[1m[31mCrate[0m,
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m55[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn in_type_ns(&self) -> Option<TypeNs> {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m848[0m:[0m20[0m:        .lower_ty(&[0m[1m[31mcrate[0m::TypeRef::from_ast(&ctx, ty.clone()));
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1085[0m:[0m63[0m:    /// Returns none if the file of the node is not part of a [0m[1m[31mcrate[0m.
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1090[0m:[0m63[0m:    /// Returns none if the file of the node is not part of a [0m[1m[31mcrate[0m.
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1349[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Module, ast::Module, module_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1350[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Module, ast::SourceFile, source_file_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1351[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Struct, ast::Struct, struct_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1352[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Enum, ast::Enum, enum_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1353[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Union, ast::Union, union_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1354[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Trait, ast::Trait, trait_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1355[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::TraitAlias, ast::TraitAlias, trait_alias_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1356[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Impl, ast::Impl, impl_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1357[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::TypeAlias, ast::TypeAlias, type_alias_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1358[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Const, ast::Const, const_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1359[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Static, ast::Static, static_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1360[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Function, ast::Fn, fn_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1361[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Field, ast::RecordField, record_field_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1362[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Field, ast::TupleField, tuple_field_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1363[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Variant, ast::Variant, enum_variant_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1364[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::TypeParam, ast::TypeParam, type_param_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1365[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1366[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::ConstParam, ast::ConstParam, const_param_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1367[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::GenericParam, ast::GenericParam, generic_param_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1368[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Macro, ast::Macro, macro_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1369[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Local, ast::IdentPat, bind_pat_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1370[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Local, ast::SelfParam, self_param_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1371[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Label, ast::Label, label_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1372[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Adt, ast::Adt, adt_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1373[0m:[0m6[0m:    ([0m[1m[31mcrate[0m::Extern[0m[1m[31mCrate[0mDecl, ast::Extern[0m[1m[31mCrate[0m, extern_[0m[1m[31mcrate[0m_to_def),
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1411[0m:[0m28[0m:    pub fn krate(&self) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1412[0m:[0m9[0m:        [0m[1m[31mCrate[0m { id: self.resolver.krate() }
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1415[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolver(&self) -> &Resolver {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1474[0m:[0m19[0m:    pub fn extern_[0m[1m[31mcrate[0ms(&self) -> impl Iterator<Item = (Name, Module)> + '_ {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1475[0m:[0m30[0m:        self.resolver.extern_[0m[1m[31mcrate[0ms_in_scope().map(|(name, id)| (name, Module { id }))
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1478[0m:[0m19[0m:    pub fn extern_[0m[1m[31mcrate[0m_decls(&self) -> impl Iterator<Item = Name> + '_ {
[0m[35mcrates/hir/src/semantics.rs[0m:[0m[32m1479[0m:[0m30[0m:        self.resolver.extern_[0m[1m[31mcrate[0m_decls_in_scope(self.db.upcast())
[0m[35mcrates/test-utils/Cargo.toml[0m:[0m[32m15[0m:[0m32[0m:# Avoid adding deps here, this [0m[1m[31mcrate[0m is widely used in tests it should compile fast!
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m21[0m:[0m41[0m://! Example using two files in the same [0m[1m[31mcrate[0m:
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m35[0m:[0m23[0m://! Example using two [0m[1m[31mcrate[0ms with one file each, with one [0m[1m[31mcrate[0m depending on the other:
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m38[0m:[0m18[0m://! //- /main.rs [0m[1m[31mcrate[0m:a deps:b
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m42[0m:[0m17[0m://! //- /lib.rs [0m[1m[31mcrate[0m:b
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m56[0m:[0m17[0m://! //- /lib.rs [0m[1m[31mcrate[0m:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m70[0m:[0m23[0m:    /// Defines a new [0m[1m[31mcrate[0m and make this file its root module.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m72[0m:[0m43[0m:    /// Version and repository URL of the [0m[1m[31mcrate[0m can optionally be specified; if
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m76[0m:[0m12[0m:    /// - `[0m[1m[31mcrate[0m:my_awesome_lib`
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m77[0m:[0m12[0m:    /// - `[0m[1m[31mcrate[0m:my_awesome_lib@0.0.1,https://example.com/repo.git`
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m79[0m:[0m40[0m:    /// Specifies dependencies of this [0m[1m[31mcrate[0m. This must be used with `[0m[1m[31mcrate[0m` meta.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m83[0m:[0m16[0m:    /// Limits [0m[1m[31mcrate[0ms in the extern prelude. The set of [0m[1m[31mcrate[0m names must be a
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m84[0m:[0m51[0m:    /// subset of `deps`. This must be used with `[0m[1m[31mcrate[0m` meta.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m95[0m:[0m39[0m:    /// Specifies the edition of this [0m[1m[31mcrate[0m. This must be used with `[0m[1m[31mcrate[0m` meta. If
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m97[0m:[0m33[0m:    /// This must be used with `[0m[1m[31mcrate[0m` meta.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m107[0m:[0m15[0m:    /// with `[0m[1m[31mcrate[0m` meta.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m119[0m:[0m34[0m:    /// Explicitly declares this [0m[1m[31mcrate[0m as a library outside current workspace. This
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m120[0m:[0m28[0m:    /// must be used with `[0m[1m[31mcrate[0m` meta.
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m124[0m:[0m65[0m:    /// Use this if you want to test something that checks if a [0m[1m[31mcrate[0m is a workspace
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m125[0m:[0m22[0m:    /// member via [`[0m[1m[31mCrate[0mOrigin`](base_db::input::[0m[1m[31mCrate[0mOrigin).
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m231[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m260[0m:[0m18[0m:                "[0m[1m[31mcrate[0m" => krate = Some(value.to_string()),
[0m[35mcrates/test-utils/src/fixture.rs[0m:[0m[32m485[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ProgressReport<'a> {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m18[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(len: u64) -> ProgressReport<'a> {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m22[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn hidden() -> ProgressReport<'a> {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m26[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_message(&mut self, msg: impl Fn() -> String + 'a) {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m33[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn println<I: Into<String>>(&mut self, msg: I) {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn inc(&mut self, delta: u64) {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish_and_clear(&mut self) {
[0m[35mcrates/rust-analyzer/src/cli/progress_report.rs[0m:[0m[32m53[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn tick(&mut self) {
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m2[0m:[0m15[0m://! low-level [0m[1m[31mcrate[0ms.
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m8[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssocItem, Field, Local, MacroKind, Type};
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m61[0m:[0m21[0m:    UnresolvedExtern[0m[1m[31mCrate[0m,
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m92[0m:[0m28[0m:pub struct UnresolvedExtern[0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m93[0m:[0m40[0m:    pub decl: InFile<AstPtr<ast::Extern[0m[1m[31mCrate[0m>>,
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m135[0m:[0m13[0m:    /// The [0m[1m[31mcrate[0m id of the proc-macro this macro belongs to, or `None` if the proc-macro can't be found.
[0m[35mcrates/hir/src/diagnostics.rs[0m:[0m[32m136[0m:[0m16[0m:    pub krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/vfs/src/path_interner.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{FileId, VfsPath};
[0m[35mcrates/vfs/src/path_interner.rs[0m:[0m[32m13[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct PathInterner {
[0m[35mcrates/vfs/src/path_interner.rs[0m:[0m[32m21[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn get(&self, path: &VfsPath) -> Option<FileId> {
[0m[35mcrates/vfs/src/path_interner.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn intern(&mut self, path: VfsPath) -> FileId {
[0m[35mcrates/vfs/src/path_interner.rs[0m:[0m[32m40[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lookup(&self, id: FileId) -> &VfsPath {
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct RequestDispatcher<'a> {
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) req: Option<lsp_server::Request>,
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m32[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) global_state: &'a mut GlobalState,
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m39[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_sync_mut<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m64[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_sync<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m93[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_no_retry<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m129[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m142[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_latency_sensitive<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m157[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_fmt_thread<R>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m169[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(&mut self) {
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m226[0m:[0m19[0m:        let res = [0m[1m[31mcrate[0m::from_json(R::METHOD, &req.params);
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m304[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct NotificationDispatcher<'a> {
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m305[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) not: Option<lsp_server::Notification>,
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m306[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) global_state: &'a mut GlobalState,
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m310[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn on_sync_mut<N>(
[0m[35mcrates/rust-analyzer/src/dispatch.rs[0m:[0m[32m341[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(&mut self) {
[0m[35mcrates/vfs/src/vfs_path.rs[0m:[0m[32m11[0m:[0m14[0m:/// [`Vfs`]: [0m[1m[31mcrate[0m::Vfs
[0m[35mcrates/vfs/src/vfs_path.rs[0m:[0m[32m123[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn encode(&self, buf: &mut Vec<u8>) {
[0m[35mcrates/vfs/src/vfs_path.rs[0m:[0m[32m176[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) trait Encode {
[0m[35mcrates/vfs/src/vfs_path.rs[0m:[0m[32m205[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) const SEP: &str = "\\";
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m194[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::mem;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m336[0m:[0m21[0m:    impl<T: ?Sized> [0m[1m[31mcrate[0m::ops::Deref for ManuallyDrop<T> {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m349[0m:[0m26[0m:            let result = [0m[1m[31mcrate[0m::ptr::read(dest);
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m350[0m:[0m13[0m:            [0m[1m[31mcrate[0m::ptr::write(dest, src);
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m369[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::marker::DiscriminantKind;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m402[0m:[0m32[0m:    impl<T: ?Sized, U: ?Sized> [0m[1m[31mcrate[0m::ops::CoerceUnsized<NonNull<U>> for NonNull<T> where
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m403[0m:[0m12[0m:        T: [0m[1m[31mcrate[0m::marker::Unsize<U>
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m413[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::marker::Unsize;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m557[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) start: Idx,
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m558[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) end: Idx,
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m559[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) exhausted: bool,
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m573[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::marker::Tuple;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m596[0m:[0m17[0m:            use [0m[1m[31mcrate[0m::marker::Tuple;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m792[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::pin::Pin;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m916[0m:[0m21[0m:                use [0m[1m[31mcrate[0m::mem::transmute;
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1137[0m:[0m13[0m:    impl<P: [0m[1m[31mcrate[0m::ops::Deref> [0m[1m[31mcrate[0m::ops::Deref for Pin<P> {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1149[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1266[0m:[0m44[0m:                fn take(self, n: usize) -> [0m[1m[31mcrate[0m::iter::Take<Self> {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1269[0m:[0m53[0m:                fn filter_map<B, F>(self, _f: F) -> [0m[1m[31mcrate[0m::iter::FilterMap<Self, F>
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1333[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic_fmt($[0m[1m[31mcrate[0m::const_format_args!($($t)+))
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1340[0m:[0m34[0m:    pub const fn panic_fmt(_fmt: [0m[1m[31mcrate[0m::fmt::Arguments<'_>) -> ! {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1375[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::io::_print($[0m[1m[31mcrate[0m::format_args!($($arg)*));
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1382[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod builtin {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1448[0m:[0m22[0m:    pub trait Error: [0m[1m[31mcrate[0m::fmt::Debug + [0m[1m[31mcrate[0m::fmt::Display {
[0m[35mcrates/test-utils/src/minicore.rs[0m:[0m[32m1458[0m:[0m17[0m:        pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/test-utils/src/lib.rs[0m:[0m[32m28[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/test-utils/src/lib.rs[0m:[0m[32m54[0m:[0m29[0m:                let diff = $[0m[1m[31mcrate[0m::__diff(left, right);
[0m[35mcrates/test-utils/src/lib.rs[0m:[0m[32m55[0m:[0m88[0m:                std::eprintln!("Left:\n{}\n\nRight:\n{}\n\nDiff:\n{}\n", left, right, $[0m[1m[31mcrate[0m::format_diff(diff));
[0m[35mcrates/vfs/src/file_set.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AnchoredPath, FileId, Vfs, VfsPath};
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m5[0m:[0m21[0m://! to a particular [0m[1m[31mcrate[0m instance. That is, it has cfg flags and features
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m12[0m:[0m13[0m://! `hir_*` [0m[1m[31mcrate[0ms are the implementation of the compiler logic.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m39[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mDisplayName, [0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mOrigin, Edition, FileId, ProcMacroKind};
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m55[0m:[0m66[0m:    AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId, [0m[1m[31mCrate[0mRootModuleId, DefWithBodyId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m56[0m:[0m34[0m:    EnumId, EnumVariantId, Extern[0m[1m[31mCrate[0mId, FunctionId, GenericDefId, HasModule, ImplId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m88[0m:[0m5[0m:use [0m[1m[31mcrate[0m::db::{DefDatabase, HirDatabase};
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m90[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m99[0m:[0m70[0m:        UnimplementedBuiltinMacro, UnreachableLabel, UnresolvedExtern[0m[1m[31mCrate[0m, UnresolvedField,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m154[0m:[0m10[0m:/// hir::[0m[1m[31mCrate[0m describes a single [0m[1m[31mcrate[0m. It's the main interface with which
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m155[0m:[0m7[0m:/// a [0m[1m[31mcrate[0m's dependencies interact. Mostly, it should be just a proxy for the
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m158[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m159[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m163[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mDependency {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m164[0m:[0m16[0m:    pub krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m168[0m:[0m6[0m:impl [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m169[0m:[0m50[0m:    pub fn origin(self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m170[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].origin.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m174[0m:[0m35[0m:        matches!(self.origin(db), [0m[1m[31mCrate[0mOrigin::Lang(_))
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m177[0m:[0m60[0m:    pub fn dependencies(self, db: &dyn HirDatabase) -> Vec<[0m[1m[31mCrate[0mDependency> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m178[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id]
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m182[0m:[0m29[0m:                let krate = [0m[1m[31mCrate[0m { id: dep.[0m[1m[31mcrate[0m_id };
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m184[0m:[0m17[0m:                [0m[1m[31mCrate[0mDependency { krate, name }
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m189[0m:[0m68[0m:    pub fn reverse_dependencies(self, db: &dyn HirDatabase) -> Vec<[0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m190[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m191[0m:[0m9[0m:        [0m[1m[31mcrate[0m_graph
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m194[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph[krate].dependencies.iter().any(|it| it.[0m[1m[31mcrate[0m_id == self.id)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m196[0m:[0m23[0m:            .map(|id| [0m[1m[31mCrate[0m { id })
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m203[0m:[0m31[0m:    ) -> impl Iterator<Item = [0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m204[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph().transitive_rev_deps(self.id).map(|id| [0m[1m[31mCrate[0m { id })
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m208[0m:[0m22[0m:        Module { id: [0m[1m[31mCrate[0mRootModuleId::from(self.id).into() }
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m212[0m:[0m26[0m:        let def_map = db.[0m[1m[31mcrate[0m_def_map(self.id);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m217[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].root_file_id
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m221[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].edition
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m225[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].version.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m228[0m:[0m63[0m:    pub fn display_name(self, db: &dyn HirDatabase) -> Option<[0m[1m[31mCrate[0mDisplayName> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m229[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].display_name.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m246[0m:[0m45[0m:    pub fn all(db: &dyn HirDatabase) -> Vec<[0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m247[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph().iter().map(|id| [0m[1m[31mCrate[0m { id }).collect()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m250[0m:[0m59[0m:    /// Try to get the root URL of the documentation of a [0m[1m[31mcrate[0m.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m251[0m:[0m37[0m:    pub fn get_html_root_url(self: &[0m[1m[31mCrate[0m, db: &dyn HirDatabase) -> Option<String> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m259[0m:[0m12[0m:        db.[0m[1m[31mcrate[0m_graph()[self.id].cfg_options.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m263[0m:[0m24[0m:        let data = &db.[0m[1m[31mcrate[0m_graph()[self.id];
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m270[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: ModuleId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m466[0m:[0m21[0m:    /// Returns the [0m[1m[31mcrate[0m this module is part of.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m467[0m:[0m27[0m:    pub fn krate(self) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m468[0m:[0m9[0m:        [0m[1m[31mCrate[0m { id: self.id.krate() }
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m471[0m:[0m60[0m:    /// Topmost parent of this module. Every module has a `[0m[1m[31mcrate[0m_root`, but some
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m474[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_root(self, db: &dyn HirDatabase) -> Module {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m475[0m:[0m26[0m:        let def_map = db.[0m[1m[31mcrate[0m_def_map(self.id.krate());
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m476[0m:[0m30[0m:        Module { id: def_map.[0m[1m[31mcrate[0m_root().into() }
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m479[0m:[0m15[0m:    pub fn is_[0m[1m[31mcrate[0m_root(self) -> bool {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m611[0m:[0m51[0m:        let inherent_impls = db.inherent_impls_in_[0m[1m[31mcrate[0m(self.id.krate());
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m734[0m:[0m44[0m:        DefDiagnosticKind::UnresolvedExtern[0m[1m[31mCrate[0m { ast } => {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m736[0m:[0m38[0m:            acc.push(UnresolvedExtern[0m[1m[31mCrate[0m { decl: InFile::new(ast.file_id, item) }.into());
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m925[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) parent: VariantDef,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m926[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: LocalFieldId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m987[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: StructId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1037[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: UnionId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1079[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: EnumId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1105[0m:[0m23[0m:        Type::new_for_[0m[1m[31mcrate[0m(
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1160[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) parent: Enum,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1161[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: LocalEnumVariantId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1193[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1368[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1679[0m:[0m59[0m:                        MovedOutOfRef { ty: Type::new_for_[0m[1m[31mcrate[0m(krate, moof.ty.clone()), span }
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m1868[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: FunctionId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2006[0m:[0m26[0m:        let def_map = db.[0m[1m[31mcrate[0m_def_map(loc.krate(db).into());
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2155[0m:[0m18[0m:pub struct Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2156[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: Extern[0m[1m[31mCrate[0mId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2159[0m:[0m12[0m:impl Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2164[0m:[0m21[0m:    pub fn resolved_[0m[1m[31mcrate[0m(self, db: &dyn HirDatabase) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2165[0m:[0m19[0m:        db.extern_[0m[1m[31mcrate[0m_decl_data(self.id).[0m[1m[31mcrate[0m_id.map(Into::into)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2169[0m:[0m19[0m:        db.extern_[0m[1m[31mcrate[0m_decl_data(self.id).name.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2173[0m:[0m19[0m:        db.extern_[0m[1m[31mcrate[0m_decl_data(self.id).alias.clone()
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2176[0m:[0m43[0m:    /// Returns the name under which this [0m[1m[31mcrate[0m is made accessible, taking `_` into account.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2178[0m:[0m20[0m:        let extern_[0m[1m[31mcrate[0m_decl_data = db.extern_[0m[1m[31mcrate[0m_decl_data(self.id);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2179[0m:[0m23[0m:        match &extern_[0m[1m[31mcrate[0m_decl_data.alias {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2182[0m:[0m33[0m:            None => Some(extern_[0m[1m[31mcrate[0m_decl_data.name.clone()),
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2187[0m:[0m30[0m:impl HasVisibility for Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2189[0m:[0m19[0m:        db.extern_[0m[1m[31mcrate[0m_decl_data(self.id)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2197[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: InTypeConstId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2208[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: ConstId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2263[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: StaticId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2296[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: TraitId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2300[0m:[0m46[0m:    pub fn lang(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0m, name: &Name) -> Option<Trait> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2360[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: TraitAliasId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2381[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: TypeAliasId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2420[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) inner: hir_def::builtin_type::BuiltinType,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2429[0m:[0m23[0m:        Type::new_for_[0m[1m[31mcrate[0m(db.[0m[1m[31mcrate[0m_graph().iter().next().unwrap(), TyBuilder::builtin(self.inner))
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2477[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: MacroId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2593[0m:[0m21[0m:    /// Returns the [0m[1m[31mcrate[0m defining this item (or `None` if `self` is built-in).
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2594[0m:[0m57[0m:    pub fn krate(&self, db: &dyn HirDatabase) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2815[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) parent: DefWithBodyId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2816[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) binding_id: BindingId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2952[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) derive: MacroId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2953[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) idx: u32,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2984[0m:[0m19[0m:    krate: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2989[0m:[0m24[0m:    // FIXME: consider [0m[1m[31mcrate[0ms\hir_def\src\nameres\attr_resolution.rs?
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2990[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn by_name(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0m, name: &str) -> Option<Self> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m2995[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_def_map(krate.id).registered_attrs().iter().position(|it| it == name)? as u32;
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3007[0m:[0m31[0m:            Some(krate) => db.[0m[1m[31mcrate[0m_def_map(krate).registered_attrs()[self.idx as usize].clone(),
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3022[0m:[0m19[0m:    krate: Option<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3027[0m:[0m24[0m:    // FIXME: consider [0m[1m[31mcrate[0ms\hir_def\src\nameres\attr_resolution.rs?
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3028[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn by_name(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0m, name: &str) -> Option<Self> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3033[0m:[0m16[0m:            db.[0m[1m[31mcrate[0m_def_map(krate.id).registered_tools().iter().position(|it| it == name)? as u32;
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3047[0m:[0m31[0m:            Some(krate) => db.[0m[1m[31mcrate[0m_def_map(krate).registered_tools()[self.idx as usize].clone(),
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3055[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) parent: DefWithBodyId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3056[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) label_id: LabelId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3117[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: TypeParamId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3181[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: LifetimeParamId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3201[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: ConstParamId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3248[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: TypeOrConstParamId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3290[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) id: ImplId,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3294[0m:[0m19[0m:    pub fn all_in_[0m[1m[31mcrate[0m(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0m) -> Vec<Impl> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3295[0m:[0m45[0m:        let inherent = db.inherent_impls_in_[0m[1m[31mcrate[0m(krate.id);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3296[0m:[0m40[0m:        let trait_ = db.trait_impls_in_[0m[1m[31mcrate[0m(krate.id);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3302[0m:[0m17[0m:        let def_[0m[1m[31mcrate[0ms = match method_resolution::def_[0m[1m[31mcrate[0ms(db, &ty, env.krate) {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3303[0m:[0m22[0m:            Some(def_[0m[1m[31mcrate[0ms) => def_[0m[1m[31mcrate[0ms,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3320[0m:[0m13[0m:        def_[0m[1m[31mcrate[0ms.iter().for_each(|&id| {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3322[0m:[0m38[0m:                db.inherent_impls_in_[0m[1m[31mcrate[0m(id)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3330[0m:[0m23[0m:        for id in def_[0m[1m[31mcrate[0ms
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3332[0m:[0m29[0m:            .flat_map(|&id| [0m[1m[31mCrate[0m { id }.transitive_reverse_dependencies(db))
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3333[0m:[0m19[0m:            .map(|[0m[1m[31mCrate[0m { id }| id)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3334[0m:[0m24[0m:            .chain(def_[0m[1m[31mcrate[0ms.iter().copied())
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3338[0m:[0m35[0m:                db.trait_impls_in_[0m[1m[31mcrate[0m(id)
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3350[0m:[0m13[0m:        for [0m[1m[31mCrate[0m { id } in krate.transitive_reverse_dependencies(db) {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3351[0m:[0m43[0m:            let impls = db.trait_impls_in_[0m[1m[31mcrate[0m(id);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3402[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_with_resolver(
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3541[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_with_resolver(db: &dyn HirDatabase, resolver: &Resolver, ty: Ty) -> Type {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3545[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_with_resolver_inner(
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3557[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_for_[0m[1m[31mcrate[0m(krate: [0m[1m[31mCrate[0mId, ty: Ty) -> Type {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3967[0m:[0m59[0m:    // lifetime problems, because we need to borrow temp `[0m[1m[31mCrate[0mImplDefs`.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3971[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3985[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0m,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3988[0m:[0m17[0m:        let def_[0m[1m[31mcrate[0ms = match method_resolution::def_[0m[1m[31mcrate[0ms(db, &self.ty, krate.id) {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3992[0m:[0m26[0m:        for krate in def_[0m[1m[31mcrate[0ms {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m3993[0m:[0m46[0m:            let impls = db.inherent_impls_in_[0m[1m[31mcrate[0m(krate);
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4414[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) is_bound_method: bool,
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4617[0m:[0m57[0m:    pub fn krate(&self, db: &dyn HirDatabase) -> Option<[0m[1m[31mCrate[0m> {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4677[0m:[0m38[0m:/// Trait for obtaining the defining [0m[1m[31mcrate[0m of an item.
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4678[0m:[0m14[0m:pub trait Has[0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4679[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m;
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4682[0m:[0m32[0m:impl<T: hir_def::HasModule> Has[0m[1m[31mCrate[0m for T {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4683[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4688[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for AssocItem {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4689[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4694[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Struct {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4695[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4700[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Union {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4701[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4706[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Enum {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4707[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4712[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Field {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4713[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4718[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Variant {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4719[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4724[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Function {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4725[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4730[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Const {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4731[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4736[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for TypeAlias {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4737[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4742[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Type {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4743[0m:[0m47[0m:    fn krate(&self, _db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4748[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Macro {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4749[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4754[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Trait {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4755[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4760[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for TraitAlias {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4761[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4766[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Static {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4767[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4772[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Adt {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4773[0m:[0m46[0m:    fn krate(&self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4778[0m:[0m9[0m:impl Has[0m[1m[31mCrate[0m for Module {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4779[0m:[0m45[0m:    fn krate(&self, _: &dyn HirDatabase) -> [0m[1m[31mCrate[0m {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4788[0m:[0m29[0m:impl HasContainer for Extern[0m[1m[31mCrate[0mDecl {
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4800[0m:[0m36[0m:            None => ItemContainer::[0m[1m[31mCrate[0m(def_map.krate()),
[0m[35mcrates/hir/src/lib.rs[0m:[0m[32m4874[0m:[0m5[0m:    [0m[1m[31mCrate[0m([0m[1m[31mCrate[0mId),
[0m[35mcrates/rust-analyzer/tests/slow-tests/sourcegen.rs[0m:[0m[32m29[0m:[0m13[0m:        let [0m[1m[31mcrate[0ms_dir = sourcegen::project_root().join("[0m[1m[31mcrate[0ms");
[0m[35mcrates/rust-analyzer/tests/slow-tests/sourcegen.rs[0m:[0m[32m32[0m:[0m49[0m:        for path in sourcegen::list_rust_files(&[0m[1m[31mcrate[0ms_dir) {
[0m[35mcrates/rust-analyzer/tests/slow-tests/main.rs[0m:[0m[32m36[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/rust-analyzer/tests/slow-tests/main.rs[0m:[0m[32m520[0m:[0m10[0m:        "[0m[1m[31mcrate[0ms": [ {
[0m[35mcrates/rust-analyzer/tests/slow-tests/main.rs[0m:[0m[32m889[0m:[0m8[0m:extern [0m[1m[31mcrate[0m proc_macro;
[0m[35mcrates/vfs/src/anchored_path.rs[0m:[0m[32m27[0m:[0m5[0m:use [0m[1m[31mcrate[0m::FileId;
[0m[35mcrates/rust-analyzer/tests/slow-tests/testdir.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TestDir {
[0m[35mcrates/rust-analyzer/tests/slow-tests/testdir.rs[0m:[0m[32m13[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new() -> TestDir {
[0m[35mcrates/rust-analyzer/tests/slow-tests/testdir.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn keep(mut self) -> TestDir {
[0m[35mcrates/rust-analyzer/tests/slow-tests/testdir.rs[0m:[0m[32m45[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn path(&self) -> &Path {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const TEST_CONFIG: AssistConfig = AssistConfig {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m26[0m:[0m41[0m:        granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const TEST_CONFIG_NO_SNIPPET_CAP: AssistConfig = AssistConfig {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m40[0m:[0m41[0m:        granularity: ImportGranularity::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m50[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn with_single_file(text: &str) -> (RootDatabase, FileId) {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m55[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist_no_snippet_cap(
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m78[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist_by_label(
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m92[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m97[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m103[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn check_assist_unresolved(assist: Handler, ra_fixture: &str) {
[0m[35mcrates/ide-assists/src/tests.rs[0m:[0m[32m280[0m:[0m90[0m:    assert_eq!(assists.next().expect("expected assist").label, "Change visibility to pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/vfs/src/lib.rs[0m:[0m[32m30[0m:[0m65[0m://! may correspond to several [`loader::Entry`]. For example, a [0m[1m[31mcrate[0m from
[0m[35mcrates/vfs/src/lib.rs[0m:[0m[32m31[0m:[0m5[0m://! [0m[1m[31mcrate[0ms.io which uses code generation would have two [`Entries`] -- for sources
[0m[35mcrates/vfs/src/lib.rs[0m:[0m[32m51[0m:[0m5[0m:use [0m[1m[31mcrate[0m::path_interner::PathInterner;
[0m[35mcrates/vfs/src/lib.rs[0m:[0m[32m53[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/vfs/src/lib.rs[0m:[0m[32m70[0m:[0m35[0m:/// For more information see the [[0m[1m[31mcrate[0m-level]([0m[1m[31mcrate[0m) documentation.
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::testdir::TestDir;
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m21[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Project<'a> {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn with_fixture(fixture: &str) -> Project<'_> {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn tmp_dir(mut self, tmp_dir: TestDir) -> Self {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m56[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn root(mut self, path: &str) -> Self {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m61[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn with_config(mut self, config: serde_json::Value) -> Self {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m76[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn server(self) -> Server {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m85[0m:[0m32[0m:            profile::init_from([0m[1m[31mcrate[0m::PROFILE);
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m162[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn project(fixture: &str) -> Server {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m166[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Server {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m187[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn doc_id(&self, rel_path: &str) -> TextDocumentIdentifier {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m192[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn notification<N>(&self, params: N::Params)
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m202[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn request<R>(&self, params: R::Params, expected_resp: Value)
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m219[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn send_request<R>(&self, params: R::Params) -> Value
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m259[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn wait_until_workspace_is_loaded(self) -> Server {
[0m[35mcrates/rust-analyzer/tests/slow-tests/support.rs[0m:[0m[32m307[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn path(&self) -> &Path {
[0m[35mcrates/ide-assists/src/assist_config.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::AssistKind;
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m5[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use gen_trait_fn_body::gen_trait_fn_body;
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m24[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, SourceChangeBuilder};
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod suggest_name;
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unwrap_trivial_block(block_expr: ast::BlockExpr) -> ast::Expr {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m211[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Cursor<'a> {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m224[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor<'_>) -> String {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m247[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn vis_offset(node: &SyntaxNode) -> TextSize {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m254[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m305[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn next_prev() -> impl Iterator<Item = Direction> {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m309[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m325[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn does_nested_pattern(pat: &ast::Pat) -> bool {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m383[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn find_struct_impl(
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m441[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn find_impl_block_start(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m450[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m463[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m471[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &str) -> String {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m479[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_trait_impl_text_intransitive(
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m567[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_method_to_adt(
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m590[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ReferenceConversion {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m612[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn convert_type(&self, db: &dyn HirDatabase) -> String {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m642[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn getter(&self, field_name: String) -> String {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m657[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_reference_type(
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m733[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn get_methods(items: &ast::AssocItemList) -> Vec<ast::Fn> {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m745[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn trimmed_text_range(source_file: &SourceFile, initial_range: TextRange) -> TextRange {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m772[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_param_list_to_arg_list(list: ast::ParamList) -> ast::ArgList {
[0m[35mcrates/ide-assists/src/utils.rs[0m:[0m[32m787[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn required_hashes(s: &str) -> usize {
[0m[35mcrates/ide-assists/src/handlers/promote_local_to_const.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/promote_local_to_const.rs[0m:[0m[32m44[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn promote_local_to_const(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/promote_local_to_const.rs[0m:[0m[32m144[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/lib.rs[0m:[0m[32m1[0m:[0m15[0m://! `assists` [0m[1m[31mcrate[0m provides a bunch of code assists, also known as code actions
[0m[35mcrates/ide-assists/src/lib.rs[0m:[0m[32m78[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/lib.rs[0m:[0m[32m105[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/lib.rs[0m:[0m[32m107[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) type Handler = fn(&mut Assists, &AssistContext<'_>) -> Option<()>;
[0m[35mcrates/ide-assists/src/lib.rs[0m:[0m[32m218[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn all() -> &'static [Handler] {
[0m[35mcrates/ide-assists/src/handlers/convert_two_arm_bool_match_to_matches_macro.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_two_arm_bool_match_to_matches_macro.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_two_arm_bool_match_to_matches_macro(
[0m[35mcrates/ide-assists/src/handlers/convert_two_arm_bool_match_to_matches_macro.rs[0m:[0m[32m118[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/utils/suggest_name.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {
[0m[35mcrates/ide-assists/src/utils/suggest_name.rs[0m:[0m[32m88[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn for_variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> String {
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn into_to_qualified_from(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m76[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m125[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::A;
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m145[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::A;
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m171[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::A;
[0m[35mcrates/ide-assists/src/handlers/into_to_qualified_from.rs[0m:[0m[32m189[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::A;
[0m[35mcrates/ide-assists/src/handlers/replace_if_let_with_match.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/replace_if_let_with_match.rs[0m:[0m[32m50[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_if_let_with_match.rs[0m:[0m[32m213[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_if_let_with_match.rs[0m:[0m[32m360[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/utils/gen_trait_fn_body.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn gen_trait_fn_body(
[0m[35mcrates/ide-assists/src/tests/generated.rs[0m:[0m[32m319[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn frobnicate() {}
[0m[35mcrates/ide-assists/src/tests/generated.rs[0m:[0m[32m797[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn foo(name: i32) -> i32 {
[0m[35mcrates/ide-assists/src/tests/generated.rs[0m:[0m[32m875[0m:[0m11[0m:    $0pub([0m[1m[31mcrate[0m) fn frobnicate() {}
[0m[35mcrates/ide-assists/src/handlers/generate_constant.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_constant.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_constant(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_constant.rs[0m:[0m[32m148[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_documentation_template(
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m97[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_doc_example(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m305[0m:[0m37[0m:/// Returns the name of the current [0m[1m[31mcrate[0m
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m306[0m:[0m4[0m:fn [0m[1m[31mcrate[0m_name(ast_func: &ast::Fn, ctx: &AssistContext<'_>) -> Option<String> {
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m476[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_name = [0m[1m[31mcrate[0m_name(ast_func, ctx)?;
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m482[0m:[0m38[0m:        Some(path) => Some(format!("{[0m[1m[31mcrate[0m_name}::{path}::{leaf}")),
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m483[0m:[0m32[0m:        None => Some(format!("{[0m[1m[31mcrate[0m_name}::{leaf}")),
[0m[35mcrates/ide-assists/src/handlers/generate_documentation_template.rs[0m:[0m[32m503[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_let_else_to_match.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_let_else_to_match.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_let_else_to_match(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_let_else_to_match.rs[0m:[0m[32m186[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/replace_method_eager_lazy.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_method_eager_lazy.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_with_lazy_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_method_eager_lazy.rs[0m:[0m[32m107[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_with_eager_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_method_eager_lazy.rs[0m:[0m[32m171[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_iter_for_each_to_for(
[0m[35mcrates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs[0m:[0m[32m97[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_for_loop_with_for_each(
[0m[35mcrates/ide-assists/src/handlers/convert_iter_for_each_to_for.rs[0m:[0m[32m217[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn split_import(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m41[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m49[0m:[0m18[0m:            "use [0m[1m[31mcrate[0m::$0db::RootDatabase;",
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m50[0m:[0m18[0m:            "use [0m[1m[31mcrate[0m::{db::RootDatabase};",
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m58[0m:[0m18[0m:            "use [0m[1m[31mcrate[0m:$0:db::{RootDatabase, FileSymbol}",
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m59[0m:[0m18[0m:            "use [0m[1m[31mcrate[0m::{db::{RootDatabase, FileSymbol}}",
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m65[0m:[0m48[0m:        check_assist_target(split_import, "use [0m[1m[31mcrate[0m::$0db::{RootDatabase, FileSymbol}", "::");
[0m[35mcrates/ide-assists/src/handlers/split_import.rs[0m:[0m[32m70[0m:[0m56[0m:        check_assist_not_applicable(split_import, "use [0m[1m[31mcrate[0m::$0:::self;")
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m106[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m193[0m:[0m23[0m:    fn extract_public_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m197[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod $0tests {
[0m[35mcrates/ide-assists/src/handlers/move_module_to_file.rs[0m:[0m[32m203[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod tests;
[0m[35mcrates/ide-assists/src/handlers/desugar_doc_comment.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/desugar_doc_comment.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn desugar_doc_comment(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/desugar_doc_comment.rs[0m:[0m[32m95[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/sort_items.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/sort_items.rs[0m:[0m[32m84[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn sort_items(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/sort_items.rs[0m:[0m[32m229[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/wrap_return_type_in_result.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/wrap_return_type_in_result.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn wrap_return_type_in_result(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/wrap_return_type_in_result.rs[0m:[0m[32m112[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/test-utils/src/bench_fixture.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::project_root;
[0m[35mcrates/ide-assists/src/handlers/add_explicit_type.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_explicit_type.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_explicit_type.rs[0m:[0m[32m92[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/inline_macro.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/inline_macro.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_macro(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_macro.rs[0m:[0m[32m54[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_is_empty_from_len.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_is_empty_from_len.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_is_empty_from_len.rs[0m:[0m[32m103[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/move_from_mod_rs.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/move_from_mod_rs.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_from_mod_rs(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/move_from_mod_rs.rs[0m:[0m[32m57[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/flip_comma.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/flip_comma.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn flip_comma(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/flip_comma.rs[0m:[0m[32m52[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use ide_db::source_change::{SourceChangeBuilder, TreeMutator};
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m48[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct AssistContext<'a> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) config: &'a AssistConfig,
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) sema: Semantics<'a, RootDatabase>,
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m57[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m84[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn db(&self) -> &RootDatabase {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m89[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn offset(&self) -> TextSize {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m93[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn file_id(&self) -> FileId {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m97[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn has_empty_selection(&self) -> bool {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m103[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn selection_trimmed(&self) -> TextRange {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m107[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m110[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_token_syntax_at_offset(&self, kind: SyntaxKind) -> Option<SyntaxToken> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m113[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_token_at_offset<T: AstToken>(&self) -> Option<T> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m116[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_node_at_offset<N: AstNode>(&self) -> Option<N> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m119[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_node_at_range<N: AstNode>(&self) -> Option<N> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m122[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn find_node_at_offset_with_descend<N: AstNode>(&self) -> Option<N> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m126[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn covering_element(&self) -> SyntaxElement {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m131[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Assists {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m139[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(ctx: &AssistContext<'_>, resolve: AssistResolveStrategy) -> Assists {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m148[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn finish(mut self) -> Vec<Assist> {
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m153[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add(
[0m[35mcrates/ide-assists/src/assist_context.rs[0m:[0m[32m164[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn add_group(
[0m[35mcrates/ide-assists/src/handlers/unwrap_result_return_type.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/unwrap_result_return_type.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unwrap_result_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unwrap_result_return_type.rs[0m:[0m[32m157[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_into_to_from.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_into_to_from.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_into_to_from.rs[0m:[0m[32m109[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m93[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m212[0m:[0m28[0m:    fn struct_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m216[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m221[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m440[0m:[0m27[0m:    fn trait_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m444[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_method_call.rs[0m:[0m[32m449[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/number_representation.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};
[0m[35mcrates/ide-assists/src/handlers/number_representation.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reformat_number_literal(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/number_representation.rs[0m:[0m[32m87[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist_by_label, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_impl.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_impl.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_impl.rs[0m:[0m[32m75[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_impl.rs[0m:[0m[32m106[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/extract_variable.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/extract_variable.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_variable(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/extract_variable.rs[0m:[0m[32m234[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/move_bounds.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/move_bounds.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_bounds_to_where_clause(
[0m[35mcrates/ide-assists/src/handlers/move_bounds.rs[0m:[0m[32m89[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/unmerge_match_arm.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/unmerge_match_arm.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unmerge_match_arm(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unmerge_match_arm.rs[0m:[0m[32m117[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/inline_type_alias.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/inline_type_alias.rs[0m:[0m[32m46[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_type_alias.rs[0m:[0m[32m124[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_type_alias.rs[0m:[0m[32m432[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/inline_type_alias.rs[0m:[0m[32m931[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{handlers::inline_type_alias::inline_type_alias_uses, tests::check_assist};
[0m[35mcrates/ide-assists/src/handlers/move_to_mod_rs.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/move_to_mod_rs.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/move_to_mod_rs.rs[0m:[0m[32m57[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m4[0m:[0m16[0m:use hir::{Adt, [0m[1m[31mCrate[0m, HasAttrs, HasSource, ModuleDef, Semantics};
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m360[0m:[0m57[0m:    fn should_be_hidden(self, db: &RootDatabase, krate: [0m[1m[31mCrate[0m) -> bool {
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m375[0m:[0m58[0m:    fn is_non_exhaustive(self, db: &RootDatabase, krate: [0m[1m[31mCrate[0m) -> bool {
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m475[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1581[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1586[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1606[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1611[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1632[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1637[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1655[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1661[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1672[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1678[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1690[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1696[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1717[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1722[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1743[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1748[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1768[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1774[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1794[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1800[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1818[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1825[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1836[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1841[0m:[0m11[0m://- /e.rs [0m[1m[31mcrate[0m:e
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1856[0m:[0m31[0m:    fn ignores_doc_hidden_for_[0m[1m[31mcrate[0m_local_enums() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1879[0m:[0m35[0m:    fn ignores_non_exhaustive_for_[0m[1m[31mcrate[0m_local_enums() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_match_arms.rs[0m:[0m[32m1904[0m:[0m50[0m:    fn ignores_doc_hidden_and_non_exhaustive_for_[0m[1m[31mcrate[0m_local_enums() {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_variant.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_enum_variant.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_variant.rs[0m:[0m[32m201[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/invert_if.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/invert_if.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn invert_if(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/invert_if.rs[0m:[0m[32m67[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/extract_expressions_from_format_string.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/extract_expressions_from_format_string.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_expressions_from_format_string(
[0m[35mcrates/ide-assists/src/handlers/extract_expressions_from_format_string.rs[0m:[0m[32m146[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m8[0m:[0m26[0m:    helpers::is_editable_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m52[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_function(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m71[0m:[0m25[0m:        if !is_editable_[0m[1m[31mcrate[0m(m.krate(), ctx.db()) {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m153[0m:[0m21[0m:    if !is_editable_[0m[1m[31mcrate[0m(target_module.krate(), ctx.db()) {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m363[0m:[0m25[0m:            Visibility::[0m[1m[31mCrate[0m => Some(make::visibility_pub_[0m[1m[31mcrate[0m()),
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m1070[0m:[0m5[0m:    [0m[1m[31mCrate[0m,
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m1088[0m:[0m21[0m:        Visibility::[0m[1m[31mCrate[0m
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m1161[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2019[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn my_fn() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2087[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bar<T, U: self::A>(t: [0m[1m[31mcrate[0m::b::S<T>, u: [0m[1m[31mcrate[0m::S<U>) ${0:-> _} where T: self::A {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2123[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn my_fn() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2151[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn my_fn() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2180[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn bar() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2365[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn bar(&self) ${0:-> _} {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2552[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn bar() ${0:-> _} {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2760[0m:[0m38[0m:    fn applicable_in_different_local_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2764[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2766[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2782[0m:[0m38[0m:    fn applicable_in_different_local_[0m[1m[31mcrate[0m_method() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2786[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2788[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2805[0m:[0m44[0m:    fn not_applicable_in_different_library_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2809[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2811[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2820[0m:[0m44[0m:    fn not_applicable_in_different_library_[0m[1m[31mcrate[0m_method() {
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2824[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib new_source_root:library
[0m[35mcrates/ide-assists/src/handlers/generate_function.rs[0m:[0m[32m2826[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:lib new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_arith_with_checked(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_arith_with_saturating(
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m65[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_arith_with_wrapping(
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m121[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum ArithKind {
[0m[35mcrates/ide-assists/src/handlers/replace_arith_op.rs[0m:[0m[32m166[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn qualify_path(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m102[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum QualifyCandidate<'db> {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m111[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn qualify(
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m232[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m408[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:[0m[1m[31mcrate[0m_with_macro
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m414[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:[0m[1m[31mcrate[0m_with_macro
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m421[0m:[0m5[0m:    [0m[1m[31mcrate[0m_with_macro::foo
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m821[0m:[0m27[0m:    fn trait_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m825[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m830[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m851[0m:[0m23[0m:    fn assoc_fn_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m855[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m859[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m879[0m:[0m26[0m:    fn assoc_const_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m883[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m887[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m907[0m:[0m33[0m:    fn assoc_fn_as_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m911[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m916[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m931[0m:[0m28[0m:    fn private_trait_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m935[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m940[0m:[0m13[0m://- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m992[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m995[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1014[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1021[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1036[0m:[0m73[0m:        // Tests that macro-generated items are suggested from external [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1040[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1049[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1068[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1072[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1090[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1093[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1111[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/qualify_path.rs[0m:[0m[32m1114[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m23[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_struct_from_enum_variant(
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m423[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m670[0m:[0m42[0m:            "enum A { $0One{ a: u32, pub([0m[1m[31mcrate[0m) b: u32, pub(super) c: u32, d: u32 } }",
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m672[0m:[0m25[0m:struct One{ a: u32, pub([0m[1m[31mcrate[0m) b: u32, pub(super) c: u32, d: u32 }
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m682[0m:[0m38[0m:            "enum A { $0One(u32, pub([0m[1m[31mcrate[0m) u32, pub(super) u32, u32) }",
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m684[0m:[0m21[0m:struct One(u32, pub([0m[1m[31mcrate[0m) u32, pub(super) u32, u32);
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m740[0m:[0m32[0m:    fn test_extract_struct_pub_[0m[1m[31mcrate[0m_visibility() {
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m743[0m:[0m18[0m:            "pub([0m[1m[31mcrate[0m) enum A { $0One{ a: u32, b: u32, c: u32 } }",
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m745[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct One{ pub([0m[1m[31mcrate[0m) a: u32, pub([0m[1m[31mcrate[0m) b: u32, pub([0m[1m[31mcrate[0m) c: u32 }
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m747[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum A { One(One) }"#,
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m868[0m:[0m5[0m:use [0m[1m[31mcrate[0m::E;
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m883[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{E, V};
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m903[0m:[0m5[0m:use [0m[1m[31mcrate[0m::E;
[0m[35mcrates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs[0m:[0m[32m918[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{E, V};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m49[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_tuple_struct_to_named_struct(
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m238[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m393[0m:[0m25[0m:struct A$0(pub u32, pub([0m[1m[31mcrate[0m) u64);
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m409[0m:[0m33[0m:struct A { pub field1: u32, pub([0m[1m[31mcrate[0m) field2: u64 }
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m522[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m535[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m826[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m841[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m863[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A::Variant, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs[0m:[0m[32m878[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A::Variant, Inner};
[0m[35mcrates/ide-assists/src/handlers/unqualify_method_call.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/unqualify_method_call.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unqualify_method_call(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unqualify_method_call.rs[0m:[0m[32m103[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/replace_qualified_name_with_use.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_qualified_name_with_use.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_qualified_name_with_use(
[0m[35mcrates/ide-assists/src/handlers/replace_qualified_name_with_use.rs[0m:[0m[32m59[0m:[0m35[0m:            ast::PathSegmentKind::[0m[1m[31mCrate[0mKw
[0m[35mcrates/ide-assists/src/handlers/replace_qualified_name_with_use.rs[0m:[0m[32m174[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/unnecessary_async.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/unnecessary_async.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unnecessary_async(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unnecessary_async.rs[0m:[0m[32m139[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/introduce_named_lifetime.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/introduce_named_lifetime.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/introduce_named_lifetime.rs[0m:[0m[32m161[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_label_to_loop.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_label_to_loop.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_label_to_loop.rs[0m:[0m[32m68[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/remove_dbg.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/remove_dbg.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/remove_dbg.rs[0m:[0m[32m208[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/unmerge_use.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/unmerge_use.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unmerge_use.rs[0m:[0m[32m78[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_new.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_new.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_new.rs[0m:[0m[32m68[0m:[0m47[0m:        AssistId("generate_default_from_new", [0m[1m[31mcrate[0m::AssistKind::Generate),
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_new.rs[0m:[0m[32m155[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/inline_const_as_literal.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/inline_const_as_literal.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_const_as_literal(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_const_as_literal.rs[0m:[0m[32m113[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_unused_imports(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m231[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m486[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{X, y::Y}$0;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m498[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{X};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m517[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{X, y::Y}$0;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m529[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{y::Y};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m548[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::{X, y::Y}$0;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m664[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::foo::X;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m671[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::foo::X;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m687[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::X;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m700[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::X;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m717[0m:[0m5[0m:use [0m[1m[31mcrate[0m::X;
[0m[35mcrates/ide-assists/src/handlers/remove_unused_imports.rs[0m:[0m[32m726[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::X$0;
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_enum_variant.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_enum_variant.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_default_from_enum_variant(
[0m[35mcrates/ide-assists/src/handlers/generate_default_from_enum_variant.rs[0m:[0m[32m89[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_enum_projection_method.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_enum_projection_method.rs[0m:[0m[32m39[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_enum_try_into_method(
[0m[35mcrates/ide-assists/src/handlers/generate_enum_projection_method.rs[0m:[0m[32m86[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_enum_as_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_projection_method.rs[0m:[0m[32m187[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m22[0m:[0m8[0m:// pub([0m[1m[31mcrate[0m) fn frobnicate() {}
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn change_visibility(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m80[0m:[0m35[0m:        "Change visibility to pub([0m[1m[31mcrate[0m)",
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m83[0m:[0m38[0m:            edit.insert(offset, "pub([0m[1m[31mcrate[0m) ");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m116[0m:[0m39[0m:            "Change Visibility to pub([0m[1m[31mcrate[0m)",
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m119[0m:[0m62[0m:                edit.replace(vis.syntax().text_range(), "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m123[0m:[0m36[0m:    if vis.syntax().text() == "pub([0m[1m[31mcrate[0m)" {
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m139[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m144[0m:[0m35[0m:    fn change_visibility_adds_pub_[0m[1m[31mcrate[0m_to_items() {
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m145[0m:[0m63[0m:        check_assist(change_visibility, "$0fn foo() {}", "pub([0m[1m[31mcrate[0m) fn foo() {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m146[0m:[0m63[0m:        check_assist(change_visibility, "f$0n foo() {}", "pub([0m[1m[31mcrate[0m) fn foo() {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m147[0m:[0m65[0m:        check_assist(change_visibility, "$0struct Foo {}", "pub([0m[1m[31mcrate[0m) struct Foo {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m148[0m:[0m62[0m:        check_assist(change_visibility, "$0mod foo {}", "pub([0m[1m[31mcrate[0m) mod foo {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m149[0m:[0m64[0m:        check_assist(change_visibility, "$0trait Foo {}", "pub([0m[1m[31mcrate[0m) trait Foo {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m150[0m:[0m58[0m:        check_assist(change_visibility, "m$0od {}", "pub([0m[1m[31mcrate[0m) mod {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m151[0m:[0m70[0m:        check_assist(change_visibility, "unsafe f$0n foo() {}", "pub([0m[1m[31mcrate[0m) unsafe fn foo() {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m152[0m:[0m66[0m:        check_assist(change_visibility, "$0macro foo() {}", "pub([0m[1m[31mcrate[0m) macro foo() {}");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m153[0m:[0m60[0m:        check_assist(change_visibility, "$0use foo;", "pub([0m[1m[31mcrate[0m) use foo;");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m157[0m:[0m29[0m:            "impl Foo { pub([0m[1m[31mcrate[0m) fn foo() {} }",
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m162[0m:[0m40[0m:            "fn bar() { impl Foo { pub([0m[1m[31mcrate[0m) fn foo() {} } }",
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m171[0m:[0m30[0m:            r"struct S { pub([0m[1m[31mcrate[0m) field: u32 }",
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m173[0m:[0m81[0m:        check_assist(change_visibility, r"struct S ( $0u32 )", r"struct S ( pub([0m[1m[31mcrate[0m) u32 )");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m186[0m:[0m37[0m:    fn change_visibility_pub_to_pub_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m187[0m:[0m67[0m:        check_assist(change_visibility, "$0pub fn foo() {}", "pub([0m[1m[31mcrate[0m) fn foo() {}")
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m191[0m:[0m30[0m:    fn change_visibility_pub_[0m[1m[31mcrate[0m_to_pub() {
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m192[0m:[0m48[0m:        check_assist(change_visibility, "$0pub([0m[1m[31mcrate[0m) fn foo() {}", "pub fn foo() {}")
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m197[0m:[0m68[0m:        check_assist(change_visibility, "$0const FOO = 3u8;", "pub([0m[1m[31mcrate[0m) const FOO = 3u8;");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m202[0m:[0m69[0m:        check_assist(change_visibility, "$0static FOO = 3u8;", "pub([0m[1m[31mcrate[0m) static FOO = 3u8;");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m207[0m:[0m64[0m:        check_assist(change_visibility, "$0type T = ();", "pub([0m[1m[31mcrate[0m) type T = ();");
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m228[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) struct Foo;
[0m[35mcrates/ide-assists/src/handlers/change_visibility.rs[0m:[0m[32m245[0m:[0m53[0m:        check_assist_target(change_visibility, "pub([0m[1m[31mcrate[0m)$0 fn foo() {}", "pub([0m[1m[31mcrate[0m)");
[0m[35mcrates/ide-assists/src/handlers/extract_function.rs[0m:[0m[32m33[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/extract_function.rs[0m:[0m[32m66[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_function(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/extract_function.rs[0m:[0m[32m107[0m:[0m38[0m:        AssistId("extract_function", [0m[1m[31mcrate[0m::AssistKind::RefactorExtract),
[0m[35mcrates/ide-assists/src/handlers/extract_function.rs[0m:[0m[32m2039[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/bind_unused_param.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/bind_unused_param.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn bind_unused_param(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/bind_unused_param.rs[0m:[0m[32m70[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/remove_mut.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/remove_mut.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_mut(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_string_with_char.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_string_with_char.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_string_with_char.rs[0m:[0m[32m66[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_char_with_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_string_with_char.rs[0m:[0m[32m88[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/flip_trait_bound.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/flip_trait_bound.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn flip_trait_bound(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/flip_trait_bound.rs[0m:[0m[32m51[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m32[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m131[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m394[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Foo {$0}
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m397[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Foo {}
[0m[35mcrates/ide-assists/src/handlers/generate_new.rs[0m:[0m[32m400[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn $0new() -> Self { Self {  } }
[0m[35mcrates/ide-assists/src/handlers/move_guard.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/move_guard.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/move_guard.rs[0m:[0m[32m94[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_arm_cond_to_match_guard(
[0m[35mcrates/ide-assists/src/handlers/move_guard.rs[0m:[0m[32m218[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::required_hashes, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m62[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m104[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_hash(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m132[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_hash(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/raw_string.rs[0m:[0m[32m162[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/merge_match_arms.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists, TextRange};
[0m[35mcrates/ide-assists/src/handlers/merge_match_arms.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/merge_match_arms.rs[0m:[0m[32m169[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m28[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m49[0m:[0m12[0m://     pub([0m[1m[31mcrate[0m) fn foo(name: i32) -> i32 {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m58[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_module(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m106[0m:[0m48[0m:            //  i.e. making a fn a() {} to pub([0m[1m[31mcrate[0m) fn a() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m573[0m:[0m70[0m:                            && !first_path_in_use_tree_str.contains("[0m[1m[31mcrate[0m")
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m847[0m:[0m30[0m:            ast::Item::Extern[0m[1m[31mCrate[0m(it) => replacements.push((it.visibility(), it.syntax().clone())),
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m894[0m:[0m21[0m:            let pub_[0m[1m[31mcrate[0m_vis = make::visibility_pub_[0m[1m[31mcrate[0m().clone_for_update();
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m895[0m:[0m67[0m:            ted::insert(ted::Position::before(node_or_token), pub_[0m[1m[31mcrate[0m_vis.syntax());
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m922[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m943[0m:[0m27[0m:            mod thirdparty[0m[1m[31mcrate[0m {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m952[0m:[0m21[0m:                use [0m[1m[31mcrate[0m::thirdparty[0m[1m[31mcrate[0m::{nest::{SomeType, SomeType2}, SomeType1};
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m990[0m:[0m27[0m:            mod thirdparty[0m[1m[31mcrate[0m {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m999[0m:[0m21[0m:                use [0m[1m[31mcrate[0m::thirdparty[0m[1m[31mcrate[0m::{nest::{SomeType2}, SomeType1};
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1018[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::thirdparty[0m[1m[31mcrate[0m::nest::SomeType;
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1020[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct PrivateStruct {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1021[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) inner: SomeType,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1029[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn new() -> Self {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1034[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bar() -> i32 {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1058[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn foo(name: i32) -> i32 {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1092[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct A {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1143[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct Strukt {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1144[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) field: PrivateStruct,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1188[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct Strukt {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1189[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) field: PrivateStruct,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1225[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct Strukt {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1226[0m:[0m12[0m:       pub([0m[1m[31mcrate[0m) field: PrivateStruct,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1357[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct A {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1359[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn foo<T: JustATrait>(arg: T) -> T {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1365[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bar() {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1389[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) mod impl_play {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1433[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) struct Strukt1 {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1434[0m:[0m29[0m:                        pub([0m[1m[31mcrate[0m) field: Strukt,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1521[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn foo() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1550[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn foo(x: B) {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1585[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) type A = (Foo, Bar);
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1682[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) fn documented_fn() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1686[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) fn attribute_fn() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1689[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) fn normal_fn() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1692[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) struct DocumentedStruct {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1694[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) x: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1697[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) y: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1701[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) z: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1706[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) struct MacroedStruct {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1708[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) x: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1711[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) y: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1715[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) z: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1719[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) struct NormalStruct {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1721[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) x: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1724[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) y: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1728[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) z: i32,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1732[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) type DocumentedType = i32;
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1736[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) type MacroedType = i32;
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1739[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) mod module {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1744[0m:[0m25[0m:                    pub([0m[1m[31mcrate[0m) fn new() {}
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1748[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) trait DocTrait {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1754[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) enum DocumentedEnum {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1762[0m:[0m21[0m:                pub([0m[1m[31mcrate[0m) const MY_CONST: i32 = 0;
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1803[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct S {
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1804[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) inner: A,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1805[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) state: C,
[0m[35mcrates/ide-assists/src/handlers/extract_module.rs[0m:[0m[32m1806[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) condvar: B,
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{assist_context::SourceChangeBuilder, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m51[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_named_struct_to_tuple_struct(
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m239[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m375[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) second: u64
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m392[0m:[0m23[0m:struct A(pub u32, pub([0m[1m[31mcrate[0m) u64);
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m505[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m518[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m787[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m802[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m824[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A::Variant, Inner};
[0m[35mcrates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs[0m:[0m[32m839[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{A::Variant, Inner};
[0m[35mcrates/ide-assists/src/handlers/bool_to_enum.rs[0m:[0m[32m23[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/bool_to_enum.rs[0m:[0m[32m54[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn bool_to_enum(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/bool_to_enum.rs[0m:[0m[32m478[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/bool_to_enum.rs[0m:[0m[32m1344[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::Bool;
[0m[35mcrates/ide-assists/src/handlers/bool_to_enum.rs[0m:[0m[32m1425[0m:[0m5[0m:use [0m[1m[31mcrate[0m::foo::bar::Bool;
[0m[35mcrates/ide-assists/src/handlers/remove_parentheses.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/remove_parentheses.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/remove_parentheses.rs[0m:[0m[32m48[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/unwrap_block.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/unwrap_block.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unwrap_block.rs[0m:[0m[32m150[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_lifetime_to_type.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_lifetime_to_type.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_lifetime_to_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_lifetime_to_type.rs[0m:[0m[32m146[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_derive.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_derive.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_derive(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_derive.rs[0m:[0m[32m77[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m82[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m214[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Variant {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m219[0m:[0m20[0m:            r#"pub([0m[1m[31mcrate[0m) enum Variant {
[0m[35mcrates/ide-assists/src/handlers/generate_enum_is_method.rs[0m:[0m[32m230[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn is_minor(&self) -> bool {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m22[0m:[0m15[0m:// - External [0m[1m[31mCrate[0ms
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m23[0m:[0m14[0m:// - Current [0m[1m[31mCrate[0m, paths prefixed by `[0m[1m[31mcrate[0m`
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m34[0m:[0m8[0m:// use [0m[1m[31mcrate[0m::utils::insert_use;
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m46[0m:[0m7[0m:// - `[0m[1m[31mcrate[0m`: Merge imports from the same [0m[1m[31mcrate[0m into a single use statement. This kind of
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m57[0m:[0m37[0m:// The style of imports in the same [0m[1m[31mcrate[0m is configurable through the `imports.prefix` setting.
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m60[0m:[0m7[0m:// - `[0m[1m[31mcrate[0m`: This setting will force paths to be always absolute, starting with the `[0m[1m[31mcrate[0m`
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m61[0m:[0m63[0m://  prefix, unless the item is defined outside of the current [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m63[0m:[0m81[0m://  start with `self`. This will result in paths that always start with either `[0m[1m[31mcrate[0m`, `self`,
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m64[0m:[0m26[0m://  `super` or an extern [0m[1m[31mcrate[0m identifier.
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m90[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn auto_import(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m218[0m:[0m62[0m:    // get the path starting from the item to the respective [0m[1m[31mcrate[0m roots
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m232[0m:[0m39[0m:    // cost of importing from another [0m[1m[31mcrate[0m
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m233[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_boundary_cost = if current.krate() == item.krate() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m241[0m:[0m23[0m:    distinct_length + [0m[1m[31mcrate[0m_boundary_cost
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m255[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m292[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo,bar
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m295[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m298[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:bar
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m309[0m:[0m20[0m:    fn prefer_same_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m311[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m320[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m372[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::baz::Baz;
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m567[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:[0m[1m[31mcrate[0m_with_macro
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m573[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:[0m[1m[31mcrate[0m_with_macro
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m578[0m:[0m19[0m:            r"use [0m[1m[31mcrate[0m_with_macro::foo;
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m890[0m:[0m27[0m:    fn trait_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m894[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m899[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m922[0m:[0m23[0m:    fn assoc_fn_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m926[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m930[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m952[0m:[0m26[0m:    fn assoc_const_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m956[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m960[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m982[0m:[0m33[0m:    fn assoc_fn_as_method_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m986[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m991[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1006[0m:[0m28[0m:    fn private_trait_cross_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1010[0m:[0m26[0m:            //- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1015[0m:[0m25[0m:            //- /dep.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1067[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1070[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1090[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1097[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1113[0m:[0m73[0m:        // Tests that macro-generated items are suggested from external [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1117[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1126[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1146[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1150[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:dep
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1186[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::baz::Foo;
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1198[0m:[0m34[0m:    fn uses_abs_path_with_extern_[0m[1m[31mcrate[0m_clash() {
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1199[0m:[0m36[0m:        cov_mark::check!(ambiguous_[0m[1m[31mcrate[0m_start);
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1203[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-assists/src/handlers/auto_import.rs[0m:[0m[32m1209[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/convert_while_to_loop.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/convert_while_to_loop.rs[0m:[0m[32m41[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_while_to_loop.rs[0m:[0m[32m77[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_to_guarded_return.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/convert_to_guarded_return.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_to_guarded_return.rs[0m:[0m[32m171[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_from_impl_for_enum.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_from_impl_for_enum.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_from_impl_for_enum(
[0m[35mcrates/ide-assists/src/handlers/generate_from_impl_for_enum.rs[0m:[0m[32m104[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/pull_assignment_up.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/pull_assignment_up.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn pull_assignment_up(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/pull_assignment_up.rs[0m:[0m[32m191[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_turbofish_with_explicit_type(
[0m[35mcrates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs[0m:[0m[32m130[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_setter(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m109[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_getter(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m134[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m158[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_getter_impl(
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m433[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_no_snippet_cap, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m561[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Context {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m566[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Context {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m571[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn $0data(&self) -> &Data {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m584[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Context {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m589[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Context {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m594[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn data(&self) -> &Data {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m916[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m966[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Person<T: Clone> {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m970[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Person<T: Clone> {
[0m[35mcrates/ide-assists/src/handlers/generate_getter_or_setter.rs[0m:[0m[32m975[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn $0set_data(&mut self, data: T) {
[0m[35mcrates/ide-assists/src/handlers/unwrap_tuple.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/unwrap_tuple.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unwrap_tuple(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/unwrap_tuple.rs[0m:[0m[32m88[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/convert_bool_then.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/convert_bool_then.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_bool_then.rs[0m:[0m[32m151[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_bool_then_to_if(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_bool_then.rs[0m:[0m[32m289[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/inline_local_variable.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/inline_local_variable.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_local_variable.rs[0m:[0m[32m226[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/reorder_impl_items.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/reorder_impl_items.rs[0m:[0m[32m45[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reorder_impl_items(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/reorder_impl_items.rs[0m:[0m[32m131[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/reorder_fields.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/reorder_fields.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/reorder_fields.rs[0m:[0m[32m108[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_derive_with_manual_impl(
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m70[0m:[0m17[0m:    let current_[0m[1m[31mcrate[0m = current_module.krate();
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m74[0m:[0m17[0m:        current_[0m[1m[31mcrate[0m,
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m176[0m:[0m34[0m:    // Keep assoc items of local [0m[1m[31mcrate[0ms even if they have #[doc(hidden)] attr.
[0m[35mcrates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs[0m:[0m[32m256[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/inline_call.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/inline_call.rs[0m:[0m[32m65[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_call.rs[0m:[0m[32m182[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn inline_call(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/inline_call.rs[0m:[0m[32m519[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m27[0m:[0m14[0m://     $0pub([0m[1m[31mcrate[0m) fn frobnicate() {}
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fix_visibility(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m64[0m:[0m30[0m:        make::visibility_pub_[0m[1m[31mcrate[0m()
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m115[0m:[0m30[0m:        make::visibility_pub_[0m[1m[31mcrate[0m()
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m211[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m221[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) fn foo() {} }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m237[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) struct Foo; }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m249[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) enum Foo; }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m261[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) union Foo; }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m283[0m:[0m21[0m:            r"$0pub([0m[1m[31mcrate[0m) struct Foo;
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m294[0m:[0m48[0m:            r"mod foo { pub struct Foo { $0pub([0m[1m[31mcrate[0m) bar: (), } }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m306[0m:[0m38[0m:            r"pub struct Foo { $0pub([0m[1m[31mcrate[0m) bar: () }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m368[0m:[0m47[0m:            r"mod foo { pub union Foo { $0pub([0m[1m[31mcrate[0m) bar: (), } }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m380[0m:[0m37[0m:            r"pub union Foo { $0pub([0m[1m[31mcrate[0m) bar: () }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m406[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) const FOO: () = (); }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m422[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) static FOO: () = (); }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m438[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) trait Foo { fn foo(&self) {} } }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m454[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) type Foo = (); }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m470[0m:[0m31[0m:            r"mod foo { $0pub([0m[1m[31mcrate[0m) mod bar { fn bar() {} } }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m486[0m:[0m21[0m:            r"$0pub([0m[1m[31mcrate[0m) mod bar {
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m513[0m:[0m21[0m:            r"$0pub([0m[1m[31mcrate[0m) mod bar;
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m532[0m:[0m21[0m:            r"$0pub([0m[1m[31mcrate[0m) mod bar {
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m540[0m:[0m43[0m:    fn adds_pub_when_target_is_in_another_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m544[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:a deps:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m546[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m555[0m:[0m21[0m:    fn replaces_pub_[0m[1m[31mcrate[0m_with_pub() {
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m559[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:a deps:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m561[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m562[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Bar;
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m570[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:a deps:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m574[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m575[0m:[0m22[0m:pub struct Foo { pub([0m[1m[31mcrate[0m) bar: () }
[0m[35mcrates/ide-assists/src/handlers/fix_visibility.rs[0m:[0m[32m598[0m:[0m21[0m:    mod bar { $0pub([0m[1m[31mcrate[0m) struct Baz; }
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m84[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_delegate_trait(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m109[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m196[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(s: ast::Struct) -> Option<Self> {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m201[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn delegate(&self, field: Field, acc: &mut Assists, ctx: &AssistContext<'_>) {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_trait.rs[0m:[0m[32m490[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/extract_type_alias.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/extract_type_alias.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/extract_type_alias.rs[0m:[0m[32m193[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/remove_unused_param.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/remove_unused_param.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/remove_unused_param.rs[0m:[0m[32m152[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn range_to_remove(node: &SyntaxNode) -> TextRange {
[0m[35mcrates/ide-assists/src/handlers/remove_unused_param.rs[0m:[0m[32m179[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists, SourceChangeBuilder};
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn destructure_tuple_binding(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m52[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn destructure_tuple_binding_impl(
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m424[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m1192[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::tests::check_assist_by_label;
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m1201[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn check_in_place_assist(ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m1211[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn check_sub_pattern_assist(ra_fixture_before: &str, ra_fixture_after: &str) {
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m1220[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn check_both_assists(
[0m[35mcrates/ide-assists/src/handlers/destructure_tuple_binding.rs[0m:[0m[32m1235[0m:[0m13[0m:        use [0m[1m[31mcrate[0m::tests::check_assist_by_label;
[0m[35mcrates/ide-assists/src/handlers/convert_match_to_let_else.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/convert_match_to_let_else.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_match_to_let_else(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_match_to_let_else.rs[0m:[0m[32m155[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_turbo_fish.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/add_turbo_fish.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_turbo_fish.rs[0m:[0m[32m45[0m:[0m67[0m:        NameRefClass::FieldShorthand { .. } | NameRefClass::Extern[0m[1m[31mCrate[0mShorthand { .. } => {
[0m[35mcrates/ide-assists/src/handlers/add_turbo_fish.rs[0m:[0m[32m125[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_by_label, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_integer_literal.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};
[0m[35mcrates/ide-assists/src/handlers/convert_integer_literal.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_integer_literal(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_integer_literal.rs[0m:[0m[32m62[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist_by_label, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/apply_demorgan.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/apply_demorgan.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/apply_demorgan.rs[0m:[0m[32m149[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/toggle_ignore.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::test_related_attribute, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/toggle_ignore.rs[0m:[0m[32m26[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn toggle_ignore(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/toggle_ignore.rs[0m:[0m[32m63[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/replace_let_with_if_let.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_let_with_if_let.rs[0m:[0m[32m39[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/replace_let_with_if_let.rs[0m:[0m[32m75[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/add_braces.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_braces.rs[0m:[0m[32m31[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_braces(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_braces.rs[0m:[0m[32m81[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_return_type.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/add_return_type.rs[0m:[0m[32m18[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_return_type.rs[0m:[0m[32m182[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/convert_comment_block.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_comment_block.rs[0m:[0m[32m24[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_comment_block(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/convert_comment_block.rs[0m:[0m[32m112[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {
[0m[35mcrates/ide-assists/src/handlers/convert_comment_block.rs[0m:[0m[32m164[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn line_comment_text(indentation: IndentLevel, comm: ast::Comment) -> String {
[0m[35mcrates/ide-assists/src/handlers/convert_comment_block.rs[0m:[0m[32m179[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m44[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m86[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn add_missing_default_members(
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m127[0m:[0m38[0m:        // Relax condition for local [0m[1m[31mcrate[0ms.
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m195[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m1157[0m:[0m22[0m:    fn foo(&self, x: [0m[1m[31mcrate[0m)
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m1165[0m:[0m22[0m:    fn foo(&self, x: [0m[1m[31mcrate[0m)
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m1168[0m:[0m22[0m:    fn foo(&self, x: [0m[1m[31mcrate[0m) {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m1202[0m:[0m35[0m:    fn does_not_requalify_self_as_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2090[0m:[0m80[0m:        // doc(hidden) attr is ignored trait and impl both belong to the local [0m[1m[31mcrate[0m.
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2129[0m:[0m38[0m:    fn doc_hidden_default_impls_lang_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2143[0m:[0m37[0m:    fn doc_hidden_default_impls_lib_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2147[0m:[0m18[0m:    //- /main.rs [0m[1m[31mcrate[0m:a deps:b
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2150[0m:[0m17[0m:    //- /lib.rs [0m[1m[31mcrate[0m:b new_source_root:library
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2176[0m:[0m39[0m:    fn doc_hidden_default_impls_local_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2219[0m:[0m43[0m:    fn doc_hidden_default_impls_workspace_[0m[1m[31mcrate[0ms() {
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2223[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:b new_source_root:local
[0m[35mcrates/ide-assists/src/handlers/add_missing_impl_members.rs[0m:[0m[32m2234[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:a deps:b
[0m[35mcrates/ide-assists/src/handlers/replace_named_generic_with_impl.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_named_generic_with_impl.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_named_generic_with_impl(
[0m[35mcrates/ide-assists/src/handlers/replace_named_generic_with_impl.rs[0m:[0m[32m174[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/introduce_named_generic.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{utils::suggest_name, AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/introduce_named_generic.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn introduce_named_generic(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/introduce_named_generic.rs[0m:[0m[32m59[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::check_assist;
[0m[35mcrates/ide-assists/src/handlers/replace_try_expr_with_match.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/replace_try_expr_with_match.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn replace_try_expr_with_match(
[0m[35mcrates/ide-assists/src/handlers/replace_try_expr_with_match.rs[0m:[0m[32m95[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_trait_from_impl.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/generate_trait_from_impl.rs[0m:[0m[32m67[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_trait_from_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_trait_from_impl.rs[0m:[0m[32m212[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_no_snippet_cap, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m294[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m776[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m784[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m808[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m814[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m833[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/ide-assists/src/handlers/expand_glob_import.rs[0m:[0m[32m844[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/ide-assists/src/handlers/flip_binexpr.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{AssistContext, AssistId, AssistKind, Assists};
[0m[35mcrates/ide-assists/src/handlers/flip_binexpr.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn flip_binexpr(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/flip_binexpr.rs[0m:[0m[32m81[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable, check_assist_target};
[0m[35mcrates/ide-assists/src/handlers/move_const_to_impl.rs[0m:[0m[32m1[0m:[0m47[0m:use hir::{AsAssocItem, AssocItemContainer, Has[0m[1m[31mCrate[0m, HasSource};
[0m[35mcrates/ide-assists/src/handlers/move_const_to_impl.rs[0m:[0m[32m8[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/move_const_to_impl.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn move_const_to_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/move_const_to_impl.rs[0m:[0m[32m86[0m:[0m40[0m:        AssistId("move_const_to_impl", [0m[1m[31mcrate[0m::AssistKind::RefactorRewrite),
[0m[35mcrates/ide-assists/src/handlers/move_const_to_impl.rs[0m:[0m[32m143[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_deref.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_deref.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_deref.rs[0m:[0m[32m187[0m:[0m21[0m:        krate: hir::[0m[1m[31mCrate[0m,
[0m[35mcrates/ide-assists/src/handlers/generate_deref.rs[0m:[0m[32m198[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/hir-ty/src/inhabitedness.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/inhabitedness.rs[0m:[0m[32m19[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn is_ty_uninhabited_from(ty: &Ty, target_mod: ModuleId, db: &dyn HirDatabase) -> bool {
[0m[35mcrates/hir-ty/src/inhabitedness.rs[0m:[0m[32m27[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn is_enum_variant_uninhabited_from(
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m7[0m:[0m19[0m:    AnchoredPath, [0m[1m[31mCrate[0mId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m23[0m:[0m5[0m:    [0m[1m[31mcrate[0m::db::HirDatabaseStorage
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m25[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TestDB {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m83[0m:[0m17[0m:    fn relevant_[0m[1m[31mcrate[0ms(&self, file_id: FileId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m84[0m:[0m43[0m:        FileLoaderDelegate(self).relevant_[0m[1m[31mcrate[0ms(file_id)
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m89[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn module_for_file_opt(&self, file_id: FileId) -> Option<ModuleId> {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m90[0m:[0m37[0m:        for &krate in self.relevant_[0m[1m[31mcrate[0ms(file_id).iter() {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m91[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = self.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m92[0m:[0m37[0m:            for (local_id, data) in [0m[1m[31mcrate[0m_def_map.modules() {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m94[0m:[0m33[0m:                    return Some([0m[1m[31mcrate[0m_def_map.module_id(local_id));
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m101[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn module_for_file(&self, file_id: FileId) -> ModuleId {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m105[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn extract_annotations(&self) -> IntMap<FileId, Vec<(TextRange, String)>> {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m107[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = self.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m108[0m:[0m22[0m:        for krate in [0m[1m[31mcrate[0m_graph.iter() {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m109[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = self.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m110[0m:[0m35[0m:            for (module_id, _) in [0m[1m[31mcrate[0m_def_map.modules() {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m111[0m:[0m31[0m:                let file_id = [0m[1m[31mcrate[0m_def_map[module_id].origin.file_id();
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m130[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {
[0m[35mcrates/hir-ty/src/test_db.rs[0m:[0m[32m136[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {
[0m[35mcrates/ide-assists/src/handlers/convert_nested_function_to_closure.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::assist_context::{AssistContext, Assists};
[0m[35mcrates/ide-assists/src/handlers/convert_nested_function_to_closure.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn convert_nested_function_to_closure(
[0m[35mcrates/ide-assists/src/handlers/convert_nested_function_to_closure.rs[0m:[0m[32m98[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m29[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn merge_imports(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m112[0m:[0m55[0m:        try_merge_imports(self, other, MergeBehavior::[0m[1m[31mCrate[0m)
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m121[0m:[0m53[0m:        try_merge_trees(self, other, MergeBehavior::[0m[1m[31mCrate[0m)
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m141[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m237[0m:[0m17[0m:    fn skip_pub_[0m[1m[31mcrate[0m_pub() {
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m241[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use std::fmt$0::Debug;
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m248[0m:[0m21[0m:    fn skip_pub_pub_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m253[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use std::fmt::Display;
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m273[0m:[0m18[0m:    fn merge_pub_[0m[1m[31mcrate[0m() {
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m277[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use std::fmt$0::Debug;
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m278[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use std::fmt::Display;
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m281[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use std::fmt::{Debug, Display};
[0m[35mcrates/ide-assists/src/handlers/merge_imports.rs[0m:[0m[32m287[0m:[0m26[0m:    fn merge_pub_in_path_[0m[1m[31mcrate[0m() {
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m12[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use unsafe_tls::{set_current_program, with_current_program};
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m14[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct DebugContext<'a>(&'a dyn HirDatabase);
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m17[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_struct_id(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_trait_id(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m42[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_assoc_type_id(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m63[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_projection_ty(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m101[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn debug_fn_def_id(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m126[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::db::HirDatabase;
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m131[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn with_current_program<R>(
[0m[35mcrates/hir-ty/src/tls.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn set_current_program<OP, R>(p: &dyn HirDatabase, op: OP) -> R
[0m[35mcrates/hir-ty/src/builder.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/builder.rs[0m:[0m[32m128[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fill_with_inference_vars(self, table: &mut InferenceTable<'_>) -> Self {
[0m[35mcrates/hir-ty/src/mir.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir.rs[0m:[0m[32m15[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/mir.rs[0m:[0m[32m144[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/mir.rs[0m:[0m[32m971[0m:[0m30[0m:    /// [`discriminant_ty`]: [0m[1m[31mcrate[0m::ty::Ty::discriminant_ty
[0m[35mcrates/hir-ty/src/mir.rs[0m:[0m[32m973[0m:[0m39[0m:    /// [`discriminant_for_variant`]: [0m[1m[31mcrate[0m::ty::Ty::discriminant_for_variant
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m6[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m33[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fn_traits(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m44[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m184[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m197[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ClosureSubst<'a>(pub([0m[1m[31mcrate[0m) &'a Substitution);
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m200[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parent_subst(&self) -> &'a [GenericArg] {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m210[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn sig_ty(&self) -> &'a Ty {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m221[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Generics {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m223[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) params: Interned<GenericParams>,
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m228[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter_id(&self) -> impl Iterator<Item = Either<TypeParamId, ConstParamId>> + '_ {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m238[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter<'a>(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m248[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter_self<'a>(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m258[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn iter_parent(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m269[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn len(&self) -> usize {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m276[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn len_self(&self) -> usize {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m281[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn provenance_split(&self) -> (usize, usize, usize, usize, usize) {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m299[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn param_idx(&self, param: TypeOrConstParamId) -> Option<usize> {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m316[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn parent_generics(&self) -> Option<&Generics> {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m321[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn bound_vars_subst(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m338[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn placeholder_subst(&self, db: &dyn HirDatabase) -> Substitution {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m343[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::to_placeholder_idx(db, id.into()).to_ty(Interner).cast(Interner)
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m345[0m:[0m38[0m:                Either::Right(id) => [0m[1m[31mcrate[0m::to_placeholder_idx(db, id.into())
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m399[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct UnevaluatedConstEvaluatorFolder<'a> {
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m400[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) db: &'a dyn HirDatabase,
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m432[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn detect_variant_from_bytes<'a>(
[0m[35mcrates/hir-ty/src/utils.rs[0m:[0m[32m472[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct InTypeConstIdMetadata(pub([0m[1m[31mcrate[0m) Ty);
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m10[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{[0m[1m[31mCrate[0mGraph, ProcMacros, SourceDatabaseExt, SourceRoot, SourceRootId};
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m17[0m:[0m9[0m:    pub [0m[1m[31mcrate[0m_graph: Option<[0m[1m[31mCrate[0mGraph>,
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m30[0m:[0m17[0m:        if self.[0m[1m[31mcrate[0m_graph.is_some() {
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m31[0m:[0m22[0m:            d.field("[0m[1m[31mcrate[0m_graph", &self.[0m[1m[31mcrate[0m_graph);
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m50[0m:[0m16[0m:    pub fn set_[0m[1m[31mcrate[0m_graph(&mut self, graph: [0m[1m[31mCrate[0mGraph) {
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m51[0m:[0m14[0m:        self.[0m[1m[31mcrate[0m_graph = Some(graph);
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m79[0m:[0m21[0m:        if let Some([0m[1m[31mcrate[0m_graph) = self.[0m[1m[31mcrate[0m_graph {
[0m[35mcrates/base-db/src/change.rs[0m:[0m[32m80[0m:[0m20[0m:            db.set_[0m[1m[31mcrate[0m_graph_with_durability(Arc::new([0m[1m[31mcrate[0m_graph), Durability::HIGH);
[0m[35mcrates/hir-ty/src/chalk_ext.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/chalk_ext.rs[0m:[0m[32m345[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = owner.module(db.upcast()).krate();
[0m[35mcrates/hir-ty/src/chalk_ext.rs[0m:[0m[32m346[0m:[0m45[0m:        let Some(copy_trait) = db.lang_item([0m[1m[31mcrate[0m_id, LangItem::Copy).and_then(|it| it.as_trait())
[0m[35mcrates/hir-ty/src/chalk_ext.rs[0m:[0m[32m356[0m:[0m24[0m:        db.trait_solve([0m[1m[31mcrate[0m_id, None, goal).is_some()
[0m[35mcrates/hir-ty/src/chalk_ext.rs[0m:[0m[32m426[0m:[0m13[0m:            [0m[1m[31mcrate[0m::WhereClause::Implemented(trait_ref) => Some(trait_ref),
[0m[35mcrates/ide-assists/src/tests/sourcegen.rs[0m:[0m[32m44[0m:[0m35[0m:            &project_root().join("[0m[1m[31mcrate[0ms/ide-assists/src/tests/generated.rs"),
[0m[35mcrates/ide-assists/src/tests/sourcegen.rs[0m:[0m[32m79[0m:[0m49[0m:        let handlers_dir = project_root().join("[0m[1m[31mcrate[0ms/ide-assists/src/handlers");
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m3[0m:[0m20[0m:use hir::{self, Has[0m[1m[31mCrate[0m, HasSource, HasVisibility};
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m51[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m197[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::tests::{check_assist, check_assist_not_applicable};
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m391[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) async fn age<J, 'a>(&'a mut self, ty: T, arg: J) -> T {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m402[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) async fn age<J, 'a>(&'a mut self, ty: T, arg: J) -> T {
[0m[35mcrates/ide-assists/src/handlers/generate_delegate_methods.rs[0m:[0m[32m412[0m:[0m11[0m:    $0pub([0m[1m[31mcrate[0m) async fn age<J, 'a>(&'a mut self, ty: T, arg: J) -> T {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m15[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::{
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m18[0m:[0m9[0m:        [0m[1m[31mCrate[0mData, [0m[1m[31mCrate[0mDisplayName, [0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mName, [0m[1m[31mCrate[0mOrigin, Dependency,
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m19[0m:[0m27[0m:        Edition, Env, Lang[0m[1m[31mCrate[0mOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m30[0m:[0m15[0m:        impl $[0m[1m[31mcrate[0m::salsa::InternKey for $name {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m31[0m:[0m35[0m:            fn from_intern_id(v: $[0m[1m[31mcrate[0m::salsa::InternId) -> Self {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m34[0m:[0m40[0m:            fn as_intern_id(&self) -> $[0m[1m[31mcrate[0m::salsa::InternId {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m63[0m:[0m17[0m:    fn relevant_[0m[1m[31mcrate[0ms(&self, file_id: FileId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>>;
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m74[0m:[0m13[0m:    /// The [0m[1m[31mcrate[0m graph.
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m76[0m:[0m8[0m:    fn [0m[1m[31mcrate[0m_graph(&self) -> Arc<[0m[1m[31mCrate[0mGraph>;
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m78[0m:[0m13[0m:    /// The [0m[1m[31mcrate[0m graph.
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m103[0m:[0m20[0m:    fn source_root_[0m[1m[31mcrate[0ms(&self, id: SourceRootId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>>;
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m106[0m:[0m16[0m:fn source_root_[0m[1m[31mcrate[0ms(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m107[0m:[0m20[0m:    let graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m132[0m:[0m17[0m:    fn relevant_[0m[1m[31mcrate[0ms(&self, file_id: FileId) -> Arc<FxHashSet<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m133[0m:[0m42[0m:        let _p = profile::span("relevant_[0m[1m[31mcrate[0ms");
[0m[35mcrates/base-db/src/lib.rs[0m:[0m[32m135[0m:[0m28[0m:        self.0.source_root_[0m[1m[31mcrate[0ms(source_root)
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m15[0m:[0m13[0m:    input::{[0m[1m[31mCrate[0mName, [0m[1m[31mCrate[0mOrigin, Lang[0m[1m[31mCrate[0mOrigin},
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m16[0m:[0m13[0m:    Change, [0m[1m[31mCrate[0mDisplayName, [0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mId, Dependency, Edition, Env, FileId, FilePosition,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m88[0m:[0m13[0m:    fn test_[0m[1m[31mcrate[0m(&self) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m89[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = self.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m90[0m:[0m22[0m:        let mut it = [0m[1m[31mcrate[0m_graph.iter();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m127[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0m_graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m128[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0ms = FxHashMap::default();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m129[0m:[0m17[0m:        let mut [0m[1m[31mcrate[0m_deps = Vec::new();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m130[0m:[0m25[0m:        let mut default_[0m[1m[31mcrate[0m_root: Option<FileId> = None;
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m159[0m:[0m86[0m:                assert!(meta.krate.is_some(), "can't specify deps without naming the [0m[1m[31mcrate[0m")
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m165[0m:[0m70[0m:                    "new_source_root meta doesn't make sense without [0m[1m[31mcrate[0m meta"
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m176[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_name = [0m[1m[31mCrate[0mName::normalize_dashes(&krate);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m177[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_id = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m180[0m:[0m26[0m:                    Some([0m[1m[31mcrate[0m_name.clone().into()),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m193[0m:[0m28[0m:                let prev = [0m[1m[31mcrate[0ms.insert([0m[1m[31mcrate[0m_name.clone(), [0m[1m[31mcrate[0m_id);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m194[0m:[0m51[0m:                assert!(prev.is_none(), "multiple [0m[1m[31mcrate[0ms with same name: {}", [0m[1m[31mcrate[0m_name);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m197[0m:[0m31[0m:                    let dep = [0m[1m[31mCrate[0mName::normalize_dashes(&dep);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m198[0m:[0m21[0m:                    [0m[1m[31mcrate[0m_deps.push(([0m[1m[31mcrate[0m_name.clone(), dep, prelude))
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m201[0m:[0m33[0m:                assert!(default_[0m[1m[31mcrate[0m_root.is_none());
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m202[0m:[0m25[0m:                default_[0m[1m[31mcrate[0m_root = Some(file_id);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m215[0m:[0m12[0m:        if [0m[1m[31mcrate[0ms.is_empty() {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m216[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_root = default_[0m[1m[31mcrate[0m_root
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m217[0m:[0m42[0m:                .expect("missing default [0m[1m[31mcrate[0m root, specify a main.rs or lib.rs");
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m218[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m219[0m:[0m17[0m:                [0m[1m[31mcrate[0m_root,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m221[0m:[0m22[0m:                Some([0m[1m[31mCrate[0mName::new("test").unwrap().into()),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m227[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m234[0m:[0m40[0m:            for (from, to, prelude) in [0m[1m[31mcrate[0m_deps {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m235[0m:[0m31[0m:                let from_id = [0m[1m[31mcrate[0ms[&from];
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m236[0m:[0m29[0m:                let to_id = [0m[1m[31mcrate[0ms[&to];
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m237[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m240[0m:[0m50[0m:                        Dependency::with_prelude([0m[1m[31mCrate[0mName::new(&to).unwrap(), to_id, prelude),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m245[0m:[0m29[0m:        let target_layout = [0m[1m[31mcrate[0m_graph.iter().next().map_or_else(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m247[0m:[0m18[0m:            |it| [0m[1m[31mcrate[0m_graph[it].target_layout.clone(),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m260[0m:[0m21[0m:            let all_[0m[1m[31mcrate[0ms = [0m[1m[31mcrate[0m_graph.[0m[1m[31mcrate[0ms_in_topological_order();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m262[0m:[0m22[0m:            let core_[0m[1m[31mcrate[0m = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m265[0m:[0m22[0m:                Some([0m[1m[31mCrate[0mDisplayName::from_canonical_name("core".to_string())),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m271[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Lang(Lang[0m[1m[31mCrate[0mOrigin::Core),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m276[0m:[0m30[0m:            for krate in all_[0m[1m[31mcrate[0ms {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m277[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m278[0m:[0m53[0m:                    .add_dep(krate, Dependency::new([0m[1m[31mCrate[0mName::new("core").unwrap(), core_[0m[1m[31mcrate[0m))
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m299[0m:[0m21[0m:            let all_[0m[1m[31mcrate[0ms = [0m[1m[31mcrate[0m_graph.[0m[1m[31mcrate[0ms_in_topological_order();
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m301[0m:[0m29[0m:            let proc_macros_[0m[1m[31mcrate[0m = [0m[1m[31mcrate[0m_graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m304[0m:[0m22[0m:                Some([0m[1m[31mCrate[0mDisplayName::from_canonical_name("proc_macros".to_string())),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m310[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m314[0m:[0m44[0m:            proc_macros.insert(proc_macros_[0m[1m[31mcrate[0m, Ok(proc_macro));
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m316[0m:[0m30[0m:            for krate in all_[0m[1m[31mcrate[0ms {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m317[0m:[0m17[0m:                [0m[1m[31mcrate[0m_graph
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m320[0m:[0m41[0m:                        Dependency::new([0m[1m[31mCrate[0mName::new("proc_macros").unwrap(), proc_macros_[0m[1m[31mcrate[0m),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m332[0m:[0m20[0m:        change.set_[0m[1m[31mcrate[0m_graph([0m[1m[31mcrate[0m_graph);
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m351[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::ProcMacroKind::Attr,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m365[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::ProcMacroKind::CustomDerive,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m379[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::ProcMacroKind::Attr,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m393[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::ProcMacroKind::FuncLike,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m407[0m:[0m23[0m:                kind: [0m[1m[31mcrate[0m::ProcMacroKind::FuncLike,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m442[0m:[0m28[0m:    krate: Option<(String, [0m[1m[31mCrate[0mOrigin, Option<String>)>,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m474[0m:[0m43[0m:            krate: f.krate.map(|it| parse_[0m[1m[31mcrate[0m(it, current_source_root_kind, f.library)),
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m486[0m:[0m10[0m:fn parse_[0m[1m[31mcrate[0m(
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m487[0m:[0m5[0m:    [0m[1m[31mcrate[0m_str: String,
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m490[0m:[0m15[0m:) -> (String, [0m[1m[31mCrate[0mOrigin, Option<String>) {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m492[0m:[0m22[0m:    //   "my_awesome_[0m[1m[31mcrate[0m"
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m493[0m:[0m22[0m:    //   "my_awesome_[0m[1m[31mcrate[0m@0.0.1,http://example.com"
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m494[0m:[0m63[0m:    let (name, repo, version) = if let Some((name, remain)) = [0m[1m[31mcrate[0m_str.split_once('@') {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m496[0m:[0m44[0m:            remain.split_once(',').expect("[0m[1m[31mcrate[0m meta: found '@' without version and url");
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m499[0m:[0m10[0m:        ([0m[1m[31mcrate[0m_str, None, None)
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m505[0m:[0m28[0m:    let origin = match Lang[0m[1m[31mCrate[0mOrigin::from(&*name) {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m506[0m:[0m13[0m:        Lang[0m[1m[31mCrate[0mOrigin::Other => {
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m509[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Library { repo, name }
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m511[0m:[0m17[0m:                [0m[1m[31mCrate[0mOrigin::Local { repo, name: Some(name) }
[0m[35mcrates/base-db/src/fixture.rs[0m:[0m[32m514[0m:[0m19[0m:        origin => [0m[1m[31mCrate[0mOrigin::Lang(origin),
[0m[35mcrates/hir-ty/src/lang_items.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::db::HirDatabase;
[0m[35mcrates/hir-ty/src/mir/lower.rs[0m:[0m[32m26[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir/lower.rs[0m:[0m[32m1724[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = self.owner.module(self.db.upcast()).krate();
[0m[35mcrates/hir-ty/src/mir/lower.rs[0m:[0m[32m1725[0m:[0m27[0m:        self.db.lang_item([0m[1m[31mcrate[0m_id, item).ok_or(MirLowerError::LangItemNotFound(item))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m6[0m:[0m69[0m://! actual IO. See `vfs` and `project_model` in the `rust-analyzer` [0m[1m[31mcrate[0m for how
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m19[0m:[0m13[0m:// Map from [0m[1m[31mcrate[0m id to the name of the [0m[1m[31mcrate[0m and path of the proc-macro. If the value is `None`,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m20[0m:[0m13[0m:// then the [0m[1m[31mcrate[0m for the proc-macro hasn't been build yet as the build data is missing.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m21[0m:[0m37[0m:pub type ProcMacroPaths = FxHashMap<[0m[1m[31mCrate[0mId, Result<(Option<String>, AbsPathBuf), String>>;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m22[0m:[0m33[0m:pub type ProcMacros = FxHashMap<[0m[1m[31mCrate[0mId, ProcMacroLoadResult>;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m26[0m:[0m10[0m:/// Rust [0m[1m[31mcrate[0m. Source roots *might* be nested: in this case, a file belongs to
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m36[0m:[0m20[0m:    /// Sysroot or [0m[1m[31mcrate[0ms.io library.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m70[0m:[0m6[0m:/// `[0m[1m[31mCrate[0mGraph` is a bit of information which turns a set of text files into a
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m71[0m:[0m20[0m:/// number of Rust [0m[1m[31mcrate[0ms.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m73[0m:[0m10[0m:/// Each [0m[1m[31mcrate[0m is defined by the `FileId` of its root module, the set of enabled
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m76[0m:[0m53[0m:/// Note that, due to cfg's, there might be several [0m[1m[31mcrate[0ms for a single `FileId`!
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m78[0m:[0m37[0m:/// For the purposes of analysis, a [0m[1m[31mcrate[0m does not have a name. Instead, names
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m79[0m:[0m51[0m:/// are specified on dependency edges. That is, a [0m[1m[31mcrate[0m might be known under
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m80[0m:[0m44[0m:/// different names in different dependent [0m[1m[31mcrate[0ms.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m82[0m:[0m16[0m:/// Note that `[0m[1m[31mCrate[0mGraph` is build-system agnostic: it's a concept of the Rust
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m84[0m:[0m6[0m:/// `[0m[1m[31mCrate[0mGraph` by lowering `cargo metadata` output.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m86[0m:[0m6[0m:/// `[0m[1m[31mCrate[0mGraph` is `!Serialize` by design, see
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m89[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mGraph {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m90[0m:[0m18[0m:    arena: Arena<[0m[1m[31mCrate[0mData>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m93[0m:[0m21[0m:impl fmt::Debug for [0m[1m[31mCrate[0mGraph {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m101[0m:[0m10[0m:pub type [0m[1m[31mCrate[0mId = Idx<[0m[1m[31mCrate[0mData>;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m104[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mName(SmolStr);
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m106[0m:[0m6[0m:impl [0m[1m[31mCrate[0mName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m107[0m:[0m19[0m:    /// Creates a [0m[1m[31mcrate[0m name, checking for dashes in the string provided.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m108[0m:[0m39[0m:    /// Dashes are not allowed in the [0m[1m[31mcrate[0m names,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m110[0m:[0m38[0m:    pub fn new(name: &str) -> Result<[0m[1m[31mCrate[0mName, &str> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m118[0m:[0m19[0m:    /// Creates a [0m[1m[31mcrate[0m name, unconditionally replacing the dashes with underscores.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m119[0m:[0m44[0m:    pub fn normalize_dashes(name: &str) -> [0m[1m[31mCrate[0mName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m128[0m:[0m23[0m:impl fmt::Display for [0m[1m[31mCrate[0mName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m134[0m:[0m21[0m:impl ops::Deref for [0m[1m[31mCrate[0mName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m141[0m:[0m19[0m:/// Origin of the [0m[1m[31mcrate[0ms.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m143[0m:[0m10[0m:pub enum [0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m144[0m:[0m9[0m:    /// [0m[1m[31mCrate[0ms that are from the rustc workspace.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m146[0m:[0m9[0m:    /// [0m[1m[31mCrate[0ms that are workspace members.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m148[0m:[0m9[0m:    /// [0m[1m[31mCrate[0ms that are non member libraries.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m150[0m:[0m9[0m:    /// [0m[1m[31mCrate[0ms that are provided by the language, like std, core, proc-macro, ...
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m151[0m:[0m14[0m:    Lang(Lang[0m[1m[31mCrate[0mOrigin),
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m154[0m:[0m6[0m:impl [0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m156[0m:[0m24[0m:        matches!(self, [0m[1m[31mCrate[0mOrigin::Local { .. })
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m161[0m:[0m14[0m:pub enum Lang[0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m170[0m:[0m25[0m:impl From<&str> for Lang[0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m173[0m:[0m28[0m:            "alloc" => Lang[0m[1m[31mCrate[0mOrigin::Alloc,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m174[0m:[0m27[0m:            "core" => Lang[0m[1m[31mCrate[0mOrigin::Core,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m175[0m:[0m33[0m:            "proc-macro" => Lang[0m[1m[31mCrate[0mOrigin::ProcMacro,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m176[0m:[0m26[0m:            "std" => Lang[0m[1m[31mCrate[0mOrigin::Std,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m177[0m:[0m27[0m:            "test" => Lang[0m[1m[31mCrate[0mOrigin::Test,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m178[0m:[0m22[0m:            _ => Lang[0m[1m[31mCrate[0mOrigin::Other,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m183[0m:[0m27[0m:impl fmt::Display for Lang[0m[1m[31mCrate[0mOrigin {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m186[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Alloc => "alloc",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m187[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Core => "core",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m188[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::ProcMacro => "proc_macro",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m189[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Std => "std",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m190[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Test => "test",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m191[0m:[0m17[0m:            Lang[0m[1m[31mCrate[0mOrigin::Other => "other",
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m198[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m200[0m:[0m5[0m:    [0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m205[0m:[0m6[0m:impl [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m209[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_name(&self) -> &[0m[1m[31mCrate[0mName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m210[0m:[0m15[0m:        &self.[0m[1m[31mcrate[0m_name
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m214[0m:[0m11[0m:impl From<[0m[1m[31mCrate[0mName> for [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m215[0m:[0m13[0m:    fn from([0m[1m[31mcrate[0m_name: [0m[1m[31mCrate[0mName) -> [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m216[0m:[0m30[0m:        let canonical_name = [0m[1m[31mcrate[0m_name.to_string();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m217[0m:[0m9[0m:        [0m[1m[31mCrate[0mDisplayName { [0m[1m[31mcrate[0m_name, canonical_name }
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m221[0m:[0m23[0m:impl fmt::Display for [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m223[0m:[0m14[0m:        self.[0m[1m[31mcrate[0m_name.fmt(f)
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m227[0m:[0m21[0m:impl ops::Deref for [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m230[0m:[0m15[0m:        &self.[0m[1m[31mcrate[0m_name
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m234[0m:[0m6[0m:impl [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m235[0m:[0m59[0m:    pub fn from_canonical_name(canonical_name: String) -> [0m[1m[31mCrate[0mDisplayName {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m236[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_name = [0m[1m[31mCrate[0mName::normalize_dashes(&canonical_name);
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m237[0m:[0m9[0m:        [0m[1m[31mCrate[0mDisplayName { [0m[1m[31mcrate[0m_name, canonical_name }
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m304[0m:[0m12[0m:pub struct [0m[1m[31mCrate[0mData {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m310[0m:[0m25[0m:    /// absent (a dummy [0m[1m[31mcrate[0m for the code snippet, for example).
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m312[0m:[0m35[0m:    /// For purposes of analysis, [0m[1m[31mcrate[0ms are anonymous (only names in
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m314[0m:[0m30[0m:    pub display_name: Option<[0m[1m[31mCrate[0mDisplayName>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m316[0m:[0m51[0m:    /// The cfg options that could be used by the [0m[1m[31mcrate[0m
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m320[0m:[0m17[0m:    pub origin: [0m[1m[31mCrate[0mOrigin,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m322[0m:[0m46[0m:    // FIXME: These things should not be per [0m[1m[31mcrate[0m! These are more per workspace [0m[1m[31mcrate[0m graph level things
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m356[0m:[0m9[0m:    pub [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m357[0m:[0m15[0m:    pub name: [0m[1m[31mCrate[0mName,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m362[0m:[0m22[0m:    pub fn new(name: [0m[1m[31mCrate[0mName, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> Self {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m363[0m:[0m22[0m:        Self { name, [0m[1m[31mcrate[0m_id, prelude: true }
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m366[0m:[0m31[0m:    pub fn with_prelude(name: [0m[1m[31mCrate[0mName, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId, prelude: bool) -> Self {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m367[0m:[0m22[0m:        Self { name, [0m[1m[31mcrate[0m_id, prelude }
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m370[0m:[0m65[0m:    /// Whether this dependency is to be added to the depending [0m[1m[31mcrate[0m's extern prelude.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m376[0m:[0m6[0m:impl [0m[1m[31mCrate[0mGraph {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m377[0m:[0m16[0m:    pub fn add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m381[0m:[0m30[0m:        display_name: Option<[0m[1m[31mCrate[0mDisplayName>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m387[0m:[0m17[0m:        origin: [0m[1m[31mCrate[0mOrigin,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m390[0m:[0m10[0m:    ) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m391[0m:[0m20[0m:        let data = [0m[1m[31mCrate[0mData {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m408[0m:[0m20[0m:    /// Remove the [0m[1m[31mcrate[0m from [0m[1m[31mcrate[0m graph. If any [0m[1m[31mcrate[0ms depend on this [0m[1m[31mcrate[0m, the dependency would be replaced
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m412[0m:[0m13[0m:        id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m413[0m:[0m23[0m:        replace_with: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m420[0m:[0m25[0m:                if edge.[0m[1m[31mcrate[0m_id == id {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m421[0m:[0m60[0m:                    self.check_cycle_after_dependency(edge.[0m[1m[31mcrate[0m_id, replace_with)?;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m431[0m:[0m25[0m:                if edge.[0m[1m[31mcrate[0m_id == id {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m432[0m:[0m26[0m:                    edge.[0m[1m[31mcrate[0m_id = replace_with;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m441[0m:[0m15[0m:        from: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m446[0m:[0m53[0m:        self.check_cycle_after_dependency(from, dep.[0m[1m[31mcrate[0m_id)?;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m457[0m:[0m15[0m:        from: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m458[0m:[0m13[0m:        to: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m473[0m:[0m48[0m:    pub fn iter(&self) -> impl Iterator<Item = [0m[1m[31mCrate[0mId> + '_ {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m479[0m:[0m57[0m:    pub fn iter_mut(&mut self) -> impl Iterator<Item = ([0m[1m[31mCrate[0mId, &mut [0m[1m[31mCrate[0mData)> + '_ {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m483[0m:[0m75[0m:    /// Returns an iterator over all transitive dependencies of the given [0m[1m[31mcrate[0m,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m484[0m:[0m23[0m:    /// including the [0m[1m[31mcrate[0m itself.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m485[0m:[0m39[0m:    pub fn transitive_deps(&self, of: [0m[1m[31mCrate[0mId) -> impl Iterator<Item = [0m[1m[31mCrate[0mId> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m494[0m:[0m75[0m:            worklist.extend(self[krate].dependencies.iter().map(|dep| dep.[0m[1m[31mcrate[0m_id));
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m500[0m:[0m66[0m:    /// Returns all transitive reverse dependencies of the given [0m[1m[31mcrate[0m,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m501[0m:[0m23[0m:    /// including the [0m[1m[31mcrate[0m itself.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m502[0m:[0m43[0m:    pub fn transitive_rev_deps(&self, of: [0m[1m[31mCrate[0mId) -> impl Iterator<Item = [0m[1m[31mCrate[0mId> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m511[0m:[0m58[0m:                .for_each(|dep| inverted_graph.entry(dep.[0m[1m[31mcrate[0m_id).or_default().push(krate))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m527[0m:[0m21[0m:    /// Returns all [0m[1m[31mcrate[0ms in the graph, sorted in topological order (ie. dependencies of a [0m[1m[31mcrate[0m
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m528[0m:[0m25[0m:    /// come before the [0m[1m[31mcrate[0m itself).
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m529[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0ms_in_topological_order(&self) -> Vec<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m540[0m:[0m21[0m:            graph: &[0m[1m[31mCrate[0mGraph,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m541[0m:[0m37[0m:            visited: &mut FxHashSet<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m542[0m:[0m27[0m:            res: &mut Vec<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m543[0m:[0m21[0m:            source: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m549[0m:[0m45[0m:                go(graph, visited, res, dep.[0m[1m[31mcrate[0m_id)
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m555[0m:[0m35[0m:    // FIXME: this only finds one [0m[1m[31mcrate[0m with the given root; we could have multiple
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m556[0m:[0m12[0m:    pub fn [0m[1m[31mcrate[0m_id_for_[0m[1m[31mcrate[0m_root(&self, file_id: FileId) -> Option<[0m[1m[31mCrate[0mId> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m557[0m:[0m14[0m:        let ([0m[1m[31mcrate[0m_id, _) =
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m558[0m:[0m39[0m:            self.arena.iter().find(|(_[0m[1m[31mcrate[0m_id, data)| data.root_file_id == file_id)?;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m559[0m:[0m14[0m:        Some([0m[1m[31mcrate[0m_id)
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m565[0m:[0m75[0m:            .for_each(|(_, data)| data.dependencies.sort_by_key(|dep| dep.[0m[1m[31mcrate[0m_id));
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m568[0m:[0m22[0m:    /// Extends this [0m[1m[31mcrate[0m graph by adding a complete disjoint second [0m[1m[31mcrate[0m
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m571[0m:[0m35[0m:    /// This will deduplicate the [0m[1m[31mcrate[0ms of the graph where possible.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m572[0m:[0m61[0m:    /// Note that for deduplication to fully work, `self`'s [0m[1m[31mcrate[0m dependencies must be sorted by [0m[1m[31mcrate[0m id.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m573[0m:[0m16[0m:    /// If the [0m[1m[31mcrate[0m dependencies were sorted, the resulting graph from this `extend` call will also have the [0m[1m[31mcrate[0m dependencies sorted.
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m574[0m:[0m41[0m:    pub fn extend(&mut self, mut other: [0m[1m[31mCrate[0mGraph, proc_macros: &mut ProcMacroPaths) {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m575[0m:[0m26[0m:        let topo = other.[0m[1m[31mcrate[0ms_in_topological_order();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m576[0m:[0m35[0m:        let mut id_map: FxHashMap<[0m[1m[31mCrate[0mId, [0m[1m[31mCrate[0mId> = FxHashMap::default();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m579[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_data = &mut other.arena[topo];
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m580[0m:[0m13[0m:            [0m[1m[31mcrate[0m_data.dependencies.iter_mut().for_each(|dep| dep.[0m[1m[31mcrate[0m_id = id_map[&dep.[0m[1m[31mcrate[0m_id]);
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m581[0m:[0m13[0m:            [0m[1m[31mcrate[0m_data.dependencies.sort_by_key(|dep| dep.[0m[1m[31mcrate[0m_id);
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m585[0m:[0m32[0m:                    if data == [0m[1m[31mcrate[0m_data {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m595[0m:[0m43[0m:                let id = self.arena.alloc([0m[1m[31mcrate[0m_data.clone());
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m606[0m:[0m33[0m:        visited: &mut FxHashSet<[0m[1m[31mCrate[0mId>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m607[0m:[0m15[0m:        from: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m608[0m:[0m13[0m:        to: [0m[1m[31mCrate[0mId,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m609[0m:[0m21[0m:    ) -> Option<Vec<[0m[1m[31mCrate[0mId>> {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m619[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_id = dep.[0m[1m[31mcrate[0m_id;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m620[0m:[0m61[0m:            if let Some(mut path) = self.find_path(visited, [0m[1m[31mcrate[0m_id, to) {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m634[0m:[0m29[0m:            self.hacky_find_[0m[1m[31mcrate[0m("cfg_if").max_by_key(|&it| self.arena[it].version.clone());
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m635[0m:[0m35[0m:        let std = self.hacky_find_[0m[1m[31mcrate[0m("std").next();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m641[0m:[0m43[0m:                    .push(Dependency::new([0m[1m[31mCrate[0mName::new("cfg_if").unwrap(), cfg_if));
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m648[0m:[0m19[0m:    fn hacky_find_[0m[1m[31mcrate[0m<'a>(&'a self, display_name: &'a str) -> impl Iterator<Item = [0m[1m[31mCrate[0mId> + 'a {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m653[0m:[0m17[0m:impl ops::Index<[0m[1m[31mCrate[0mId> for [0m[1m[31mCrate[0mGraph {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m654[0m:[0m19[0m:    type Output = [0m[1m[31mCrate[0mData;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m655[0m:[0m21[0m:    fn index(&self, [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId) -> &[0m[1m[31mCrate[0mData {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m656[0m:[0m21[0m:        &self.arena[[0m[1m[31mcrate[0m_id]
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m660[0m:[0m6[0m:impl [0m[1m[31mCrate[0mData {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m731[0m:[0m16[0m:    path: Vec<([0m[1m[31mCrate[0mId, Option<[0m[1m[31mCrate[0mDisplayName>)>,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m735[0m:[0m25[0m:    fn from(&self) -> &([0m[1m[31mCrate[0mId, Option<[0m[1m[31mCrate[0mDisplayName>) {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m738[0m:[0m23[0m:    fn to(&self) -> &([0m[1m[31mCrate[0mId, Option<[0m[1m[31mCrate[0mDisplayName>) {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m745[0m:[0m37[0m:        let render = |(id, name): &([0m[1m[31mCrate[0mId, Option<[0m[1m[31mCrate[0mDisplayName>)| match name {
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m762[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::[0m[1m[31mCrate[0mOrigin;
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m764[0m:[0m17[0m:    use super::{[0m[1m[31mCrate[0mGraph, [0m[1m[31mCrate[0mName, Dependency, Edition::Edition2018, Env, FileId};
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m768[0m:[0m25[0m:        let mut graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m769[0m:[0m13[0m:        let [0m[1m[31mcrate[0m1 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m778[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m782[0m:[0m13[0m:        let [0m[1m[31mcrate[0m2 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m791[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m795[0m:[0m13[0m:        let [0m[1m[31mcrate[0m3 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m804[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m809[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m1, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m2").unwrap(), [0m[1m[31mcrate[0m2))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m812[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m2, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m3").unwrap(), [0m[1m[31mcrate[0m3))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m815[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m3, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m1").unwrap(), [0m[1m[31mcrate[0m1))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m821[0m:[0m25[0m:        let mut graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m822[0m:[0m13[0m:        let [0m[1m[31mcrate[0m1 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m831[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m835[0m:[0m13[0m:        let [0m[1m[31mcrate[0m2 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m844[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m849[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m1, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m2").unwrap(), [0m[1m[31mcrate[0m2))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m852[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m2, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m2").unwrap(), [0m[1m[31mcrate[0m2))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m858[0m:[0m25[0m:        let mut graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m859[0m:[0m13[0m:        let [0m[1m[31mcrate[0m1 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m868[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m872[0m:[0m13[0m:        let [0m[1m[31mcrate[0m2 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m881[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m885[0m:[0m13[0m:        let [0m[1m[31mcrate[0m3 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m894[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m899[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m1, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m2").unwrap(), [0m[1m[31mcrate[0m2))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m902[0m:[0m22[0m:            .add_dep([0m[1m[31mcrate[0m2, Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m3").unwrap(), [0m[1m[31mcrate[0m3))
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m908[0m:[0m25[0m:        let mut graph = [0m[1m[31mCrate[0mGraph::default();
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m909[0m:[0m13[0m:        let [0m[1m[31mcrate[0m1 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m918[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m922[0m:[0m13[0m:        let [0m[1m[31mcrate[0m2 = graph.add_[0m[1m[31mcrate[0m_root(
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m931[0m:[0m13[0m:            [0m[1m[31mCrate[0mOrigin::Local { repo: None, name: None },
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m937[0m:[0m17[0m:                [0m[1m[31mcrate[0m1,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m938[0m:[0m33[0m:                Dependency::new([0m[1m[31mCrate[0mName::normalize_dashes("[0m[1m[31mcrate[0m-name-with-dashes"), [0m[1m[31mcrate[0m2)
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m942[0m:[0m19[0m:            graph[[0m[1m[31mcrate[0m1].dependencies,
[0m[35mcrates/base-db/src/input.rs[0m:[0m[32m943[0m:[0m34[0m:            vec![Dependency::new([0m[1m[31mCrate[0mName::new("[0m[1m[31mcrate[0m_name_with_dashes").unwrap(), [0m[1m[31mcrate[0m2)]
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m73[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::ImplTraitId::ReturnTypeImplTrait(func, idx) => {
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m84[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::ImplTraitId::AsyncBlockTypeImplTrait(_, _) => {
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m194[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::ConstScalar::UnevaluatedConst(const_id, subst) => {
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m198[0m:[0m33[0m:                                [0m[1m[31mcrate[0m::ConstScalar::UnevaluatedConst(*const_id, subst),
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m202[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::ConstScalar::Bytes(_, _) | [0m[1m[31mcrate[0m::ConstScalar::Unknown => (),
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m291[0m:[0m20[0m:    trait_env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m306[0m:[0m13[0m:    _: &Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m315[0m:[0m20[0m:    trait_env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/mir/monomorphization.rs[0m:[0m[32m331[0m:[0m20[0m:    trait_env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m7[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mId, Edition};
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m114[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const ALL_INT_FPS: [TyFingerprint; 12] = [
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m129[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) const ALL_FLOAT_FPS: [TyFingerprint; 2] = [
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m134[0m:[0m46[0m:/// Trait impls defined or available in some [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m142[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_impls_in_[0m[1m[31mcrate[0m_query(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<Self> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m143[0m:[0m48[0m:        let _p = profile::span("trait_impls_in_[0m[1m[31mcrate[0m_query").detail(|| format!("{krate:?}"));
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m146[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m147[0m:[0m36[0m:        impls.collect_def_map(db, &[0m[1m[31mcrate[0m_def_map);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m153[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_impls_in_block_query(db: &dyn HirDatabase, block: BlockId) -> Arc<Self> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m164[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn trait_impls_in_deps_query(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m166[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m169[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m172[0m:[0m13[0m:            [0m[1m[31mcrate[0m_graph
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m174[0m:[0m48[0m:                .map(|krate| db.trait_impls_in_[0m[1m[31mcrate[0m(krate))
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m261[0m:[0m36[0m:/// Inherent impls defined in some [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m263[0m:[0m47[0m:/// Inherent impls can only be defined in the [0m[1m[31mcrate[0m that also defines the self type of the impl
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m267[0m:[0m12[0m:/// single [0m[1m[31mcrate[0m.
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m275[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn inherent_impls_in_[0m[1m[31mcrate[0m_query(db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0mId) -> Arc<Self> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m276[0m:[0m51[0m:        let _p = profile::span("inherent_impls_in_[0m[1m[31mcrate[0m_query").detail(|| format!("{krate:?}"));
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m279[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_def_map = db.[0m[1m[31mcrate[0m_def_map(krate);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m280[0m:[0m36[0m:        impls.collect_def_map(db, &[0m[1m[31mcrate[0m_def_map);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m286[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn inherent_impls_in_block_query(db: &dyn HirDatabase, block: BlockId) -> Arc<Self> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m351[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn incoherent_inherent_impl_[0m[1m[31mcrate[0ms(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m353[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m355[0m:[0m16[0m:) -> SmallVec<[[0m[1m[31mCrate[0mId; 2]> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m356[0m:[0m43[0m:    let _p = profile::span("inherent_impl_[0m[1m[31mcrate[0ms_query");
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m358[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m360[0m:[0m20[0m:    // should pass [0m[1m[31mcrate[0m for finger print and do reverse deps
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m362[0m:[0m18[0m:    for krate in [0m[1m[31mcrate[0m_graph.transitive_deps(krate) {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m363[0m:[0m42[0m:        let impls = db.inherent_impls_in_[0m[1m[31mcrate[0m(krate);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m400[0m:[0m12[0m:pub fn def_[0m[1m[31mcrate[0ms(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m403[0m:[0m9[0m:    cur_[0m[1m[31mcrate[0m: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m404[0m:[0m23[0m:) -> Option<SmallVec<[[0m[1m[31mCrate[0mId; 2]>> {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m419[0m:[0m45[0m:                db.incoherent_inherent_impl_[0m[1m[31mcrate[0ms(cur_[0m[1m[31mcrate[0m, TyFingerprint::Adt(def_id))
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m427[0m:[0m45[0m:                db.incoherent_inherent_impl_[0m[1m[31mcrate[0ms(cur_[0m[1m[31mcrate[0m, TyFingerprint::ForeignType(id))
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m435[0m:[0m45[0m:                db.incoherent_inherent_impl_[0m[1m[31mcrate[0ms(cur_[0m[1m[31mcrate[0m, TyFingerprint::Dyn(trait_id))
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m441[0m:[0m45[0m:        // mostly). We just check the whole [0m[1m[31mcrate[0m graph for [0m[1m[31mcrate[0ms with impls
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m447[0m:[0m63[0m:        | TyKind::Raw(..) => Some(db.incoherent_inherent_impl_[0m[1m[31mcrate[0ms(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m448[0m:[0m17[0m:            cur_[0m[1m[31mcrate[0m,
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m456[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn lookup_method(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m533[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn apply(&self, table: &mut InferenceTable<'_>, ty: Ty) -> (Ty, Vec<Adjustment>) {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m590[0m:[0m55[0m:// lifetime problems, because we need to borrow temp `[0m[1m[31mCrate[0mImplDefs`.
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m592[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn iterate_method_candidates<T>(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m693[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn lookup_impl_method_query(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m789[0m:[0m23[0m:            let wcs = [0m[1m[31mcrate[0m::chalk_db::convert_where_clauses(db, impl_.into(), &impl_substs)
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m792[0m:[0m24[0m:            let goal = [0m[1m[31mcrate[0m::Goal::all(Interner, wcs);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1112[0m:[0m19[0m:            if db.[0m[1m[31mcrate[0m_graph()[env.krate].edition < Edition::Edition2021 {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1191[0m:[0m13[0m:    let def_[0m[1m[31mcrate[0ms = match def_[0m[1m[31mcrate[0ms(db, self_ty, env.krate) {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1218[0m:[0m22[0m:    for krate in def_[0m[1m[31mcrate[0ms {
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1219[0m:[0m42[0m:        let impls = db.inherent_impls_in_[0m[1m[31mcrate[0m(krate);
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1293[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn resolve_indexing_op(
[0m[35mcrates/hir-ty/src/method_resolution.rs[0m:[0m[32m1475[0m:[0m29[0m:    matches!(solution, Some([0m[1m[31mcrate[0m::Solution::Unique(_)))
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m12[0m:[0m15[0m:use base_db::{[0m[1m[31mCrate[0mId, FileId};
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m32[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m91[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn ty(&self, id: usize) -> Result<&Ty> {
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m172[0m:[0m5[0m:    [0m[1m[31mcrate[0m_id: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m254[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn to_vec(self, memory: &Evaluator<'_>) -> Result<Vec<u8>> {
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m561[0m:[0m13[0m:        let [0m[1m[31mcrate[0m_id = owner.module(db.upcast()).krate();
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m572[0m:[0m13[0m:            [0m[1m[31mcrate[0m_id,
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m584[0m:[0m58[0m:            cached_ptr_size: match db.target_data_layout([0m[1m[31mcrate[0m_id) {
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m589[0m:[0m28[0m:                .lang_item([0m[1m[31mcrate[0m_id, LangItem::Fn)
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m593[0m:[0m28[0m:                .lang_item([0m[1m[31mcrate[0m_id, LangItem::FnMut)
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m597[0m:[0m28[0m:                .lang_item([0m[1m[31mcrate[0m_id, LangItem::FnOnce)
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m644[0m:[0m18[0m:            self.[0m[1m[31mcrate[0m_id,
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m1418[0m:[0m80[0m:                let Some(target_data_layout) = self.db.target_data_layout(self.[0m[1m[31mcrate[0m_id) else {
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m1583[0m:[0m46[0m:                    .target_data_layout(self.[0m[1m[31mcrate[0m_id)
[0m[35mcrates/hir-ty/src/mir/eval.rs[0m:[0m[32m2536[0m:[0m53[0m:            let drop_trait = self.db.lang_item(self.[0m[1m[31mcrate[0m_id, LangItem::Drop)?.as_trait()?;
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m9[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct ChalkContext<'a> {
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m29[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) db: &'a dyn HirDatabase,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m30[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m31[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) block: Option<BlockId>,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m48[0m:[0m16[0m:    pub krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m51[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) traits_from_clauses: Vec<(Ty, TraitId)>,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m56[0m:[0m25[0m:    pub fn empty(krate: [0m[1m[31mCrate[0mId) -> Self {
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m72[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn normalize_projection_query(
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m83[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn trait_solve_query(
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m85[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m123[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m165[0m:[0m9[0m:        [0m[1m[31mcrate[0m::tls::set_current_program(db, solve)
[0m[35mcrates/hir-ty/src/traits.rs[0m:[0m[32m221[0m:[0m54[0m:    pub fn get_id(self, db: &dyn HirDatabase, krate: [0m[1m[31mCrate[0mId) -> Option<TraitId> {
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m3[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m74[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn path_to_const(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m137[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m160[0m:[0m70[0m:pub fn usize_const(db: &dyn HirDatabase, value: Option<u128>, krate: [0m[1m[31mCrate[0mId) -> Const {
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m185[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_recover(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m195[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_static_recover(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m203[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_discriminant_recover(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m211[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_query(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m238[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_static_query(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m251[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_eval_discriminant_variant(
[0m[35mcrates/hir-ty/src/consteval.rs[0m:[0m[32m282[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn eval_to_const(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m13[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m45[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m125[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) unsized_types: RefCell<FxHashSet<Ty>>,
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m299[0m:[0m37[0m:                            bounds: [0m[1m[31mcrate[0m::make_single_type_binders(Vec::new()),
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m459[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_ty_relative_path(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m480[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_partly_resolved_path(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m623[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_path(&self, path: &Path) -> (Ty, Option<TypeNs>) {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m923[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_trait_ref_from_resolved_path(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m950[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_where_predicate(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m986[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_type_bound(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1012[0m:[0m26[0m:                    .map([0m[1m[31mcrate[0m::wrap_empty_binders)
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1033[0m:[0m68[0m:                bindings.clone().map(WhereClause::Implemented).map([0m[1m[31mcrate[0m::wrap_empty_binders)
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1103[0m:[0m37[0m:                    predicates.push([0m[1m[31mcrate[0m::wrap_empty_binders(WhereClause::AliasEq(alias_eq)));
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1187[0m:[0m26[0m:            let bounds = [0m[1m[31mcrate[0m::make_single_type_binders(bounds);
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1220[0m:[0m21[0m:                    [0m[1m[31mcrate[0m::wrap_empty_binders(clause)
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1227[0m:[0m39[0m:        ReturnTypeImplTrait { bounds: [0m[1m[31mcrate[0m::make_single_type_binders(predicates) }
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1242[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn callable_item_sig(db: &dyn HirDatabase, def: CallableDefId) -> PolyFnSig {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1348[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn field_types_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1376[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_predicates_for_param_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1440[0m:[0m50[0m:            .map(|p| make_binders(db, &generics, [0m[1m[31mcrate[0m::wrap_empty_binders(p)));
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1445[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_predicates_for_param_recover(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1456[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn trait_environment_for_body_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1467[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn trait_environment_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1526[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_predicates_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1546[0m:[0m50[0m:            .map(|p| make_binders(db, &generics, [0m[1m[31mcrate[0m::wrap_empty_binders(p)));
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1581[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_defaults_query(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1606[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::make_binders(db, &generic_params, ty.cast(Interner))
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1633[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_defaults_recover(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1637[0m:[0m19[0m:) -> Arc<[Binders<[0m[1m[31mcrate[0m::GenericArg>]> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1649[0m:[0m17[0m:                [0m[1m[31mcrate[0m::make_binders(db, &generic_params, val)
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1768[0m:[0m26[0m:    let ty = TyKind::Adt([0m[1m[31mcrate[0m::AdtId(adt), subst).intern(Interner);
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1778[0m:[0m50[0m:        Binders::empty(Interner, TyKind::Foreign([0m[1m[31mcrate[0m::to_foreign_def_id(t)).intern(Interner))
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1804[0m:[0m49[0m:    pub fn krate(self, db: &dyn HirDatabase) -> [0m[1m[31mCrate[0mId {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1845[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn to_generic_def_id(self) -> Option<GenericDefId> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1861[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn ty_query(db: &dyn HirDatabase, def: TyDefId) -> Binders<Ty> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1869[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn ty_recover(db: &dyn HirDatabase, _cycle: &[String], def: &TyDefId) -> Binders<Ty> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1878[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn value_ty_query(db: &dyn HirDatabase, def: ValueTyDefId) -> Binders<Ty> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1889[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binders<Ty> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1903[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_param_ty_query(db: &dyn HirDatabase, def: ConstParamId) -> Ty {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1917[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn impl_self_ty_recover(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1926[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn impl_trait_query(db: &dyn HirDatabase, impl_id: ImplId) -> Option<Binders<TraitRef>> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1940[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn return_type_impl_traits(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1965[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn lower_to_chalk_mutability(m: hir_def::type_ref::Mutability) -> Mutability {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1976[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn generic_arg_to_chalk<'a, T>(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m1983[0m:[0m13[0m:) -> Option<[0m[1m[31mcrate[0m::GenericArg> {
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m2014[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn const_or_path_to_chalk(
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m2040[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_data = &db.[0m[1m[31mcrate[0m_graph()[owner.module(db.upcast()).krate()];
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m2041[0m:[0m16[0m:            if [0m[1m[31mcrate[0m_data.env.get("__ra_is_test_fixture").is_none() && [0m[1m[31mcrate[0m_data.origin.is_local()
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m2043[0m:[0m100[0m:                // FIXME: current `InTypeConstId` is very unstable, so we only use it in non local [0m[1m[31mcrate[0m
[0m[35mcrates/hir-ty/src/lower.rs[0m:[0m[32m2090[0m:[0m5[0m:    [0m[1m[31mcrate[0m::fold_free_vars(
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m37[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m412[0m:[0m5[0m:    [0m[1m[31mcrate[0m_def_map: &DefMap,
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m416[0m:[0m21[0m:    visit_scope(db, [0m[1m[31mcrate[0m_def_map, &[0m[1m[31mcrate[0m_def_map[module_id].scope, cb);
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m417[0m:[0m20[0m:    for impl_id in [0m[1m[31mcrate[0m_def_map[module_id].scope.impls() {
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m440[0m:[0m9[0m:        [0m[1m[31mcrate[0m_def_map: &DefMap,
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m486[0m:[0m63[0m:                ModuleDefId::ModuleId(it) => visit_module(db, [0m[1m[31mcrate[0m_def_map, it.local_id, cb),
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m560[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_def_map = module.def_map(&db);
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m561[0m:[0m24[0m:    visit_module(&db, &[0m[1m[31mcrate[0m_def_map, module.local_id, &mut |def| {
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m593[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_def_map = module.def_map(&db);
[0m[35mcrates/hir-ty/src/tests.rs[0m:[0m[32m594[0m:[0m24[0m:    visit_module(&db, &[0m[1m[31mcrate[0m_def_map, module.local_id, &mut |def| {
[0m[35mcrates/hir-ty/src/mir/borrowck.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/mutability.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{lower::lower_to_chalk_mutability, Adjust, Adjustment, AutoBorrow, OverloadedDeref};
[0m[35mcrates/hir-ty/src/infer/mutability.rs[0m:[0m[32m16[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn infer_mut_body(&mut self) {
[0m[35mcrates/hir-ty/src/mir/eval/shim.rs[0m:[0m[32m308[0m:[0m26[0m:                        .[0m[1m[31mcrate[0m_def_map(self.[0m[1m[31mcrate[0m_id)
[0m[35mcrates/hir-ty/src/mir/eval/shim.rs[0m:[0m[32m309[0m:[0m26[0m:                        .[0m[1m[31mcrate[0m_root()
[0m[35mcrates/hir-ty/src/mir/eval/shim.rs[0m:[0m[32m537[0m:[0m37[0m:                let value = self.db.[0m[1m[31mcrate[0m_graph()[self.[0m[1m[31mcrate[0m_id].env.get(&name);
[0m[35mcrates/hir-ty/src/mir/eval/shim.rs[0m:[0m[32m1176[0m:[0m62[0m:                if let Some(target) = self.db.lang_item(self.[0m[1m[31mcrate[0m_id, LangItem::FnOnce) {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m14[0m:[0m15[0m://! the `ena` [0m[1m[31mcrate[0m, which is extracted from rustc.
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m17[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod closure;
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod unify;
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m52[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m73[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use closure::{CaptureKind, CapturedItem, CapturedItemWithoutTy};
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m76[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m137[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn normalize(db: &dyn HirDatabase, trait_env: Arc<TraitEnvironment>, ty: Ty) -> Ty {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m179[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct InferOk<T> {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m191[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TypeError;
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m192[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type InferResult<T> = Result<InferOk<T>, TypeError>;
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m425[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) closure_info: FxHashMap<ClosureId, (Vec<CapturedItem>, FnTrait)>,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m495[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct InferenceContext<'a> {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m496[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) db: &'a dyn HirDatabase,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m497[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) owner: DefWithBodyId,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m498[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) body: &'a Body,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m499[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) resolver: Resolver,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m503[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) result: InferenceResult,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m606[0m:[0m45[0m:    // there is no problem in it being `pub([0m[1m[31mcrate[0m)`, remove this comment.
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m607[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_all(self) -> InferenceResult {
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m720[0m:[0m19[0m:        let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, func.into())
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m744[0m:[0m19[0m:        let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, self.owner.into())
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m773[0m:[0m38[0m:        rpits: Arc<chalk_ir::Binders<[0m[1m[31mcrate[0m::ReturnTypeImplTraits>>,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m777[0m:[0m12[0m:        T: [0m[1m[31mcrate[0m::HasInterner<Interner = Interner> + [0m[1m[31mcrate[0m::TypeFoldable<Interner>,
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m859[0m:[0m19[0m:        let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, self.owner.into());
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m1023[0m:[0m19[0m:        let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, self.owner.into());
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m1077[0m:[0m32[0m:                let generics = [0m[1m[31mcrate[0m::utils::generics(self.db.upcast(), impl_id.into());
[0m[35mcrates/hir-ty/src/infer.rs[0m:[0m[32m1318[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Expectation {
[0m[35mcrates/hir-ty/src/consteval/tests.rs[0m:[0m[32m6[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/consteval/tests.rs[0m:[0m[32m2618[0m:[0m19[0m:    //- /a/lib.rs [0m[1m[31mcrate[0m:a
[0m[35mcrates/hir-ty/src/consteval/tests.rs[0m:[0m[32m2625[0m:[0m18[0m:    //- /main.rs [0m[1m[31mcrate[0m:main deps:a
[0m[35mcrates/hir-ty/src/consteval/tests.rs[0m:[0m[32m2638[0m:[0m19[0m:    //- /a/lib.rs [0m[1m[31mcrate[0m:a
[0m[35mcrates/hir-ty/src/consteval/tests.rs[0m:[0m[32m2648[0m:[0m18[0m:    //- /main.rs [0m[1m[31mcrate[0m:main deps:a
[0m[35mcrates/hir-ty/src/mir/lower/pattern_matching.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::BindingMode;
[0m[35mcrates/hir-ty/src/mir/eval/tests.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::HirDatabase, test_db::TestDB, Interner, Substitution};
[0m[35mcrates/hir-ty/src/mir/eval/tests.rs[0m:[0m[32m500[0m:[0m15[0m://- /b/mod.rs [0m[1m[31mcrate[0m:b
[0m[35mcrates/hir-ty/src/mir/eval/tests.rs[0m:[0m[32m520[0m:[0m15[0m://- /a/mod.rs [0m[1m[31mcrate[0m:a deps:b
[0m[35mcrates/hir-ty/src/mir/pretty.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir/pretty.rs[0m:[0m[32m112[0m:[0m17[0m:        f: &mut [0m[1m[31mcrate[0m::display::HirFormatter<'_>,
[0m[35mcrates/hir-ty/src/mir/pretty.rs[0m:[0m[32m113[0m:[0m21[0m:    ) -> Result<(), [0m[1m[31mcrate[0m::display::HirDisplayError> {
[0m[35mcrates/hir-ty/src/infer/cast.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{infer::unify::InferenceTable, Interner, Ty, TyExt, TyKind};
[0m[35mcrates/hir-ty/src/infer/pat.rs[0m:[0m[32m13[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mir/eval/shim/simd.rs[0m:[0m[32m5[0m:[0m5[0m:use [0m[1m[31mcrate[0m::TyKind;
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m48[0m:[0m17[0m:                [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, self.owner.into());
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m93[0m:[0m32[0m:                let generics = [0m[1m[31mcrate[0m::utils::generics(self.db.upcast(), impl_id.into());
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m112[0m:[0m19[0m:        let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(self.db, &self.resolver, self.owner.into());
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m211[0m:[0m27[0m:                let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(
[0m[35mcrates/hir-ty/src/infer/path.rs[0m:[0m[32m227[0m:[0m27[0m:                let ctx = [0m[1m[31mcrate[0m::lower::TyLoweringContext::new(
[0m[35mcrates/hir-ty/src/infer/coerce.rs[0m:[0m[32m18[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/coerce.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type CoerceResult = Result<InferOk<(Vec<Adjustment>, Ty)>, TypeError>;
[0m[35mcrates/hir-ty/src/infer/coerce.rs[0m:[0m[32m192[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn coerce(
[0m[35mcrates/hir-ty/src/infer/coerce.rs[0m:[0m[32m245[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn coerce(
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m22[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m114[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct HirPlace {
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m115[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) local: BindingId,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m116[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) projections: Vec<ProjectionElem<Infallible, Ty>>,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m160[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) place: HirPlace,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m161[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) kind: CaptureKind,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m162[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) span: MirSpan,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m163[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ty: Binders<Ty>,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m231[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct CapturedItemWithoutTy {
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m232[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) place: HirPlace,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m233[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) kind: CaptureKind,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m234[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) span: MirSpan,
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m683[0m:[0m17[0m:                [0m[1m[31mcrate[0m::BindingMode::Move => {
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m690[0m:[0m17[0m:                [0m[1m[31mcrate[0m::BindingMode::Ref(r) => match r {
[0m[35mcrates/hir-ty/src/infer/closure.rs[0m:[0m[32m940[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn infer_closures(&mut self) {
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m11[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m19[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m34[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m35[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m36[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m38[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m40[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m41[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type TraitId = chalk_ir::TraitId<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type AdtId = chalk_ir::AdtId<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m43[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type ImplId = chalk_ir::ImplId<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m44[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m45[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m46[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m47[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) type Variances = chalk_ir::Variances<Interner>;
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m156[0m:[0m46[0m:        let in_self = self.db.trait_impls_in_[0m[1m[31mcrate[0m(self.krate);
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m248[0m:[0m13[0m:            [0m[1m[31mcrate[0m::ImplTraitId::ReturnTypeImplTrait(func, idx) => {
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m261[0m:[0m13[0m:            [0m[1m[31mcrate[0m::ImplTraitId::AsyncBlockTypeImplTrait(..) => {
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m291[0m:[0m33[0m:                    binder.push([0m[1m[31mcrate[0m::wrap_empty_binders(impl_bound));
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m309[0m:[0m37[0m:                        binder.push([0m[1m[31mcrate[0m::wrap_empty_binders(sized_bound));
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m325[0m:[0m33[0m:                    binder.push([0m[1m[31mcrate[0m::wrap_empty_binders(proj_bound));
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m450[0m:[0m28[0m:        let input_output = [0m[1m[31mcrate[0m::make_type_and_const_binders(it, input_output);
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m480[0m:[0m27[0m:        let inner_types = [0m[1m[31mcrate[0m::make_type_and_const_binders(it, inner_types);
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m503[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn program_clauses_for_chalk_env_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m505[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m512[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn associated_ty_data_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m528[0m:[0m15[0m:    let ctx = [0m[1m[31mcrate[0m::TyLoweringContext::new(db, &resolver, type_alias.into())
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m529[0m:[0m31[0m:        .with_type_param_mode([0m[1m[31mcrate[0m::lower::ParamLoweringMode::Variable);
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m532[0m:[0m31[0m:        .fill_with_bound_vars([0m[1m[31mcrate[0m::DebruijnIndex::INNERMOST, generic_params.len_self())
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m535[0m:[0m31[0m:        .fill_with_bound_vars([0m[1m[31mcrate[0m::DebruijnIndex::INNERMOST, 0)
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m573[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn trait_datum_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m575[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m650[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn struct_datum_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m652[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m685[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn impl_datum_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m687[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m698[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m756[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn associated_ty_value_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m758[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m767[0m:[0m13[0m:    _krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m796[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fn_def_datum_query(
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m798[0m:[0m13[0m:    _krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m826[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fn_def_variance_query(db: &dyn HirDatabase, fn_def_id: FnDefId) -> Variances {
[0m[35mcrates/hir-ty/src/chalk_db.rs[0m:[0m[32m835[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn adt_variance_query(
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m10[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod deconstruct_pat;
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m11[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod usefulness;
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m20[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use self::usefulness::MatchArm;
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m33[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum PatternError {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m42[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct FieldPat {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m43[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) field: LocalFieldId,
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m44[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) pattern: Pat,
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m48[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Pat {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m49[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) ty: Ty,
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m50[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) kind: Box<PatKind>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m55[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum PatKind {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m95[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct PatCtxt<'a> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m99[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) errors: Vec<PatternError>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m103[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(db: &'a dyn HirDatabase, infer: &'a InferenceResult, body: &'a Body) -> Self {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m107[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_pattern(&mut self, pat: PatId) -> Pat {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m418[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait PatternFoldable: Sized {
[0m[35mcrates/hir-ty/src/diagnostics/match_check.rs[0m:[0m[32m426[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait PatternFolder: Sized {
[0m[35mcrates/hir-ty/src/diagnostics/decl_check.rs[0m:[0m[32m34[0m:[0m5[0m:use [0m[1m[31mcrate[0m::db::HirDatabase;
[0m[35mcrates/hir-ty/src/diagnostics/decl_check.rs[0m:[0m[32m179[0m:[0m34[0m:                AttrDefId::Extern[0m[1m[31mCrate[0mId(id) => Some(id.lookup(db).id.file_id()),
[0m[35mcrates/hir-ty/src/diagnostics/decl_check.rs[0m:[0m[32m209[0m:[0m34[0m:                AttrDefId::Extern[0m[1m[31mCrate[0mId(id) => Some(id.lookup(db).container.into()),
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m16[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait ToChalk {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m22[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn from_chalk<T, ChalkT>(db: &dyn HirDatabase, chalk: ChalkT) -> T
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m53[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct TypeAliasAsValue(pub([0m[1m[31mcrate[0m) TypeAliasId);
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m70[0m:[0m24[0m:impl From<FnDefId> for [0m[1m[31mcrate[0m::db::InternedCallableDefId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m76[0m:[0m11[0m:impl From<[0m[1m[31mcrate[0m::db::InternedCallableDefId> for FnDefId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m77[0m:[0m30[0m:    fn from(callable_def_id: [0m[1m[31mcrate[0m::db::InternedCallableDefId) -> Self {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m82[0m:[0m27[0m:impl From<OpaqueTyId> for [0m[1m[31mcrate[0m::db::InternedOpaqueTyId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m88[0m:[0m11[0m:impl From<[0m[1m[31mcrate[0m::db::InternedOpaqueTyId> for OpaqueTyId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m89[0m:[0m17[0m:    fn from(id: [0m[1m[31mcrate[0m::db::InternedOpaqueTyId) -> Self {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m94[0m:[0m46[0m:impl From<chalk_ir::ClosureId<Interner>> for [0m[1m[31mcrate[0m::db::InternedClosureId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m100[0m:[0m11[0m:impl From<[0m[1m[31mcrate[0m::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m101[0m:[0m17[0m:    fn from(id: [0m[1m[31mcrate[0m::db::InternedClosureId) -> Self {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m106[0m:[0m48[0m:impl From<chalk_ir::GeneratorId<Interner>> for [0m[1m[31mcrate[0m::db::InternedGeneratorId {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m112[0m:[0m11[0m:impl From<[0m[1m[31mcrate[0m::db::InternedGeneratorId> for chalk_ir::GeneratorId<Interner> {
[0m[35mcrates/hir-ty/src/mapping.rs[0m:[0m[32m113[0m:[0m17[0m:    fn from(id: [0m[1m[31mcrate[0m::db::InternedGeneratorId) -> Self {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m37[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Canonicalized<T>
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m41[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) value: Canonical<T>,
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m85[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn unify(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m130[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) struct TypeVariableFlags: u8 {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m140[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct InferenceTable<'a> {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m141[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) db: &'a dyn HirDatabase,
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m142[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) trait_env: Arc<TraitEnvironment>,
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m151[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct InferenceTableSnapshot {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m158[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(db: &'a dyn HirDatabase, trait_env: Arc<TraitEnvironment>) -> Self {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m208[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m233[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn normalize_associated_types_in<T>(&mut self, ty: T) -> T
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m248[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::ConstScalar::UnevaluatedConst(c_id, subst) => {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m273[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn normalize_projection_ty(&mut self, proj_ty: ProjectionTy) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m303[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_type_var(&mut self) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m307[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_integer_var(&mut self) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m311[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_float_var(&mut self) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m315[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_maybe_never_var(&mut self) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m319[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_const_var(&mut self, ty: Ty) -> Const {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m324[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new_lifetime_var(&mut self) -> Lifetime {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m329[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_with_fallback<T>(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m340[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fresh_subst(&mut self, binders: &[CanonicalVarKind<Interner>]) -> Substitution {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m351[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m374[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_completely<T>(&mut self, t: T) -> T
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m427[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn unify<T: ?Sized + Zip<Interner>>(&mut self, ty1: &T, ty2: &T) -> bool {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m438[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn try_unify<T: ?Sized + Zip<Interner>>(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m458[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m463[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn snapshot(&mut self) -> InferenceTableSnapshot {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m474[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn rollback_to(&mut self, snapshot: InferenceTableSnapshot) {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m480[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn run_in_snapshot<T>(&mut self, f: impl FnOnce(&mut InferenceTable<'_>) -> T) -> T {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m490[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn try_obligation(&mut self, goal: Goal) -> Option<Solution> {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m498[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn register_obligation(&mut self, goal: Goal) {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m510[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn register_infer_ok<T>(&mut self, infer_ok: InferOk<T>) {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m514[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn resolve_obligations_as_possible(&mut self) {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m539[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn fudge_inference<T: TypeFoldable<Interner>>(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m664[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn callable_sig(
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m782[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ConstScalar::Unknown => self.new_const_var(data.ty.clone()),
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m784[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ConstScalar::UnevaluatedConst(id, subst) => {
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m806[0m:[0m9[0m:    use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/unify.rs[0m:[0m[32m908[0m:[0m13[0m:            [0m[1m[31mcrate[0m::static_lifetime()
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m280[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::HirDatabase, inhabitedness::is_ty_uninhabited_from, Ty, TyExt};
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m286[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MatchCheckCtx<'a, 'p> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m287[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) module: ModuleId,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m288[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) body: DefWithBodyId,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m289[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) db: &'a dyn HirDatabase,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m291[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) pattern_arena: &'p Arena<DeconstructedPat<'p>>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m296[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m302[0m:[0m26[0m:        let def_map = db.[0m[1m[31mcrate[0m_def_map(module.krate());
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m315[0m:[0m64[0m:    /// Returns whether the given type is an enum from another [0m[1m[31mcrate[0m declared `#[non_exhaustive]`.
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m610[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Witness<'p>(Vec<DeconstructedPat<'p>>);
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m747[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct MatchArm<'p> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m748[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) pat: &'p DeconstructedPat<'p>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m749[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) has_guard: bool,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m754[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum Reachability {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m765[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct UsefulnessReport<'p> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m767[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) _arm_usefulness: Vec<(MatchArm<'p>, Reachability)>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m770[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) non_exhaustiveness_witnesses: Vec<DeconstructedPat<'p>>,
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m778[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn compute_match_usefulness<'p>(
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m812[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) mod helper {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/usefulness.rs[0m:[0m[32m821[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) trait Captures<'a> {}
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m23[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m52[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn infer_expr(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m66[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn infer_expr_no_expect(&mut self, tgt_expr: ExprId) -> Ty {
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m913[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn lower_async_block_type_impl_trait(
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m920[0m:[0m29[0m:        let impl_trait_id = [0m[1m[31mcrate[0m::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, tgt_expr);
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m925[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn write_fn_trait_method_resolution(
[0m[35mcrates/hir-ty/src/infer/expr.rs[0m:[0m[32m1144[0m:[0m25[0m:                        [0m[1m[31mcrate[0m::consteval::usize_const(self.db, None, self.resolver.krate()),
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m6[0m:[0m39[0m:use base_db::{impl_intern_key, salsa, [0m[1m[31mCrate[0mId, Upcast};
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m16[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m34[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::infer::infer_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m37[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::mir::mir_body_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m38[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::mir::mir_body_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m41[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::mir::mir_body_for_closure_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m44[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::mir::monomorphized_mir_body_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m45[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::mir::monomorphized_mir_body_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m50[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m53[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::mir::monomorphized_mir_body_for_closure_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m58[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m61[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::mir::borrowck_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m64[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::ty_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m65[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::lower::ty_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m68[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::value_ty_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m71[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::impl_self_ty_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m72[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::lower::impl_self_ty_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m75[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::const_param_ty_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m78[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::consteval::const_eval_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m79[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::consteval::const_eval_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m84[0m:[0m31[0m:        trait_env: Option<Arc<[0m[1m[31mcrate[0m::TraitEnvironment>>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m87[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::consteval::const_eval_static_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m88[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::consteval::const_eval_static_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m91[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::consteval::const_eval_discriminant_variant)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m92[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::consteval::const_eval_discriminant_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m95[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::impl_trait_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m98[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::field_types_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m101[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::layout::layout_of_adt_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m102[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::layout::layout_of_adt_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m107[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m110[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::layout::layout_of_ty_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m111[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::layout::layout_of_ty_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m115[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m118[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::layout::target_data_layout_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m119[0m:[0m41[0m:    fn target_data_layout(&self, krate: [0m[1m[31mCrate[0mId) -> Option<Arc<TargetDataLayout>>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m121[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::method_resolution::lookup_impl_method_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m124[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m129[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::callable_item_sig)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m132[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::return_type_impl_traits)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m138[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::generic_predicates_for_param_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m139[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::lower::generic_predicates_for_param_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m147[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::generic_predicates_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m150[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::trait_environment_for_body_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m152[0m:[0m69[0m:    fn trait_environment_for_body(&self, def: DefWithBodyId) -> Arc<[0m[1m[31mcrate[0m::TraitEnvironment>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m154[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::trait_environment_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m155[0m:[0m59[0m:    fn trait_environment(&self, def: GenericDefId) -> Arc<[0m[1m[31mcrate[0m::TraitEnvironment>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m157[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::lower::generic_defaults_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m158[0m:[0m20[0m:    #[salsa::cycle([0m[1m[31mcrate[0m::lower::generic_defaults_recover)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m161[0m:[0m54[0m:    #[salsa::invoke(InherentImpls::inherent_impls_in_[0m[1m[31mcrate[0m_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m162[0m:[0m26[0m:    fn inherent_impls_in_[0m[1m[31mcrate[0m(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<InherentImpls>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m167[0m:[0m22[0m:    /// Collects all [0m[1m[31mcrate[0ms in the dependency graph that have impls for the
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m170[0m:[0m29[0m:    /// we just look at the [0m[1m[31mcrate[0m where the type is defined.
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m171[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::method_resolution::incoherent_inherent_impl_[0m[1m[31mcrate[0ms)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m172[0m:[0m33[0m:    fn incoherent_inherent_impl_[0m[1m[31mcrate[0ms(
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m174[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m176[0m:[0m20[0m:    ) -> SmallVec<[[0m[1m[31mCrate[0mId; 2]>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m178[0m:[0m48[0m:    #[salsa::invoke(TraitImpls::trait_impls_in_[0m[1m[31mcrate[0m_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m179[0m:[0m23[0m:    fn trait_impls_in_[0m[1m[31mcrate[0m(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<TraitImpls>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m185[0m:[0m42[0m:    fn trait_impls_in_deps(&self, krate: [0m[1m[31mCrate[0mId) -> Arc<[Arc<TraitImpls>]>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m213[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m220[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m227[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m232[0m:[0m35[0m:    fn fn_def_datum(&self, krate: [0m[1m[31mCrate[0mId, fn_def_id: FnDefId) -> sync::Arc<chalk_db::FnDefDatum>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m243[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m247[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::traits::normalize_projection_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m251[0m:[0m21[0m:        projection: [0m[1m[31mcrate[0m::ProjectionTy,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m252[0m:[0m18[0m:        env: Arc<[0m[1m[31mcrate[0m::TraitEnvironment>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m259[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m261[0m:[0m15[0m:        goal: [0m[1m[31mcrate[0m::Canonical<[0m[1m[31mcrate[0m::InEnvironment<[0m[1m[31mcrate[0m::Goal>>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m262[0m:[0m17[0m:    ) -> Option<[0m[1m[31mcrate[0m::Solution>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m264[0m:[0m21[0m:    #[salsa::invoke([0m[1m[31mcrate[0m::traits::trait_solve_query)]
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m267[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m269[0m:[0m15[0m:        goal: [0m[1m[31mcrate[0m::Canonical<[0m[1m[31mcrate[0m::InEnvironment<[0m[1m[31mcrate[0m::Goal>>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m270[0m:[0m17[0m:    ) -> Option<[0m[1m[31mcrate[0m::Solution>;
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m275[0m:[0m16[0m:        krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m304[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m306[0m:[0m11[0m:    goal: [0m[1m[31mcrate[0m::Canonical<[0m[1m[31mcrate[0m::InEnvironment<[0m[1m[31mcrate[0m::Goal>>,
[0m[35mcrates/hir-ty/src/db.rs[0m:[0m[32m307[0m:[0m13[0m:) -> Option<[0m[1m[31mcrate[0m::Solution> {
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m60[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m235[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn wrap_empty_binders<T>(value: T) -> Binders<T>
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m242[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_type_and_const_binders<T: HasInterner<Interner = Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m261[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_single_type_binders<T: HasInterner<Interner = Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m273[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_binders_with_count<T: HasInterner<Interner = Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m283[0m:[0m5[0m:    [0m[1m[31mcrate[0m::make_type_and_const_binders(it, value)
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m286[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn make_binders<T: HasInterner<Interner = Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m385[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) impl_traits: Arena<ReturnTypeImplTrait>,
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m392[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) bounds: Binders<Vec<QuantifiedWhereClause>>,
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m401[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fold_free_vars<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m443[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fold_tys<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(
[0m[35mcrates/hir-ty/src/lib.rs[0m:[0m[32m458[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn fold_tys_and_consts<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(
[0m[35mcrates/hir-ty/src/diagnostics/expr.rs[0m:[0m[32m17[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/diagnostics/expr.rs[0m:[0m[32m28[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) use hir_def::{
[0m[35mcrates/hir-ty/src/layout/adt.rs[0m:[0m[32m14[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/layout/adt.rs[0m:[0m[32m23[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn struct_variant_idx() -> RustcEnumVariantIdx {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs[0m:[0m[32m55[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs[0m:[0m[32m790[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn wildcards(
[0m[35mcrates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs[0m:[0m[32m849[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct DeconstructedPat<'p> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs[0m:[0m[32m879[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn from_pat(cx: &MatchCheckCtx<'_, 'p>, pat: &Pat) -> Self {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs[0m:[0m[32m982[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn to_pat(&self, cx: &MatchCheckCtx<'_, 'p>) -> Pat {
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m3[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m7[0m:[0m5[0m:use [0m[1m[31mcrate[0m::db::HirDatabase;
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m11[0m:[0m12[0m:    krate: [0m[1m[31mCrate[0mId,
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m13[0m:[0m9[0m:    let [0m[1m[31mcrate[0m_graph = db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m14[0m:[0m25[0m:    let target_layout = [0m[1m[31mcrate[0m_graph[krate].target_layout.as_ref().ok()?;
[0m[35mcrates/hir-ty/src/layout/target.rs[0m:[0m[32m19[0m:[0m67[0m:        // parse that doesn't impose a dependency to the rust-abi [0m[1m[31mcrate[0m for project-model
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m12[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m20[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) enum AutoderefKind {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m61[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct Autoderef<'a, 'db> {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m62[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) table: &'a mut InferenceTable<'db>,
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m70[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn new(table: &'a mut InferenceTable<'db>, ty: Ty, explicit: bool) -> Self {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m75[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn step_count(&self) -> usize {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m79[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn steps(&self) -> &[(AutoderefKind, Ty)] {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m83[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) fn final_ty(&self) -> Ty {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m110[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn autoderef_step(
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m122[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn builtin_deref<'ty>(
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m131[0m:[0m16[0m:            if [0m[1m[31mcrate[0m::lang_items::is_box(table.db, adt) {
[0m[35mcrates/hir-ty/src/autoderef.rs[0m:[0m[32m141[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn deref_by_trait(
[0m[35mcrates/hir-ty/src/diagnostics/decl_check/case_conv.rs[0m:[0m[32m9[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn to_camel_case(ident: &str) -> Option<String> {
[0m[35mcrates/hir-ty/src/diagnostics/decl_check/case_conv.rs[0m:[0m[32m62[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn to_lower_snake_case(ident: &str) -> Option<String> {
[0m[35mcrates/hir-ty/src/diagnostics/decl_check/case_conv.rs[0m:[0m[32m74[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) fn to_upper_snake_case(ident: &str) -> Option<String> {
[0m[35mcrates/hir-ty/src/tests/coercion.rs[0m:[0m[32m633[0m:[0m14[0m:            $[0m[1m[31mcrate[0m::panicking::panic()
[0m[35mcrates/hir-ty/src/tests/coercion.rs[0m:[0m[32m644[0m:[0m28[0m:    // Expands to either `$[0m[1m[31mcrate[0m::panic::panic_2015` or `$[0m[1m[31mcrate[0m::panic::panic_2021`
[0m[35mcrates/hir-ty/src/interner.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{chalk_db, tls, ConstScalar, GenericArg};
[0m[35mcrates/hir-ty/src/interner.rs[0m:[0m[32m418[0m:[0m29[0m:            type Interner = [0m[1m[31mcrate[0m::Interner;
[0m[35mcrates/hir-ty/src/diagnostics/unsafe_check.rs[0m:[0m[32m11[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m239[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:alloc
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m251[0m:[0m15[0m://- /alloc.rs [0m[1m[31mcrate[0m:alloc
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m278[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m292[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m308[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:std
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m322[0m:[0m13[0m://- /std.rs [0m[1m[31mcrate[0m:std
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m2946[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3160[0m:[0m6[0m:impl [0m[1m[31mcrate[0m::tr::Tr for Tr {}
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3162[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tr::Tr as _;
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3364[0m:[0m19[0m:fn renamed_extern_[0m[1m[31mcrate[0m_in_block() {
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3367[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:serde
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3373[0m:[0m12[0m:    extern [0m[1m[31mcrate[0m serde as _serde;
[0m[35mcrates/hir-ty/src/tests/traits.rs[0m:[0m[32m3384[0m:[0m15[0m://- /serde.rs [0m[1m[31mcrate[0m:serde
[0m[35mcrates/hir-ty/src/diagnostics/match_check/pat_util.rs[0m:[0m[32m7[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) struct EnumerateAndAdjust<I> {
[0m[35mcrates/hir-ty/src/diagnostics/match_check/pat_util.rs[0m:[0m[32m30[0m:[0m5[0m:pub([0m[1m[31mcrate[0m) trait EnumerateAndAdjustIterator {
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m3[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::check;
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m27[0m:[0m10[0m:fn cross_[0m[1m[31mcrate[0m_primitive_method() {
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m30[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m36[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m306[0m:[0m10[0m:fn cross_[0m[1m[31mcrate[0m_associated_method_call() {
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m309[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:other_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m311[0m:[0m19[0m:    let x = other_[0m[1m[31mcrate[0m::foo::S::thing();
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m315[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:other_[0m[1m[31mcrate[0m
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m837[0m:[0m27[0m://- /main.rs edition:2018 [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m846[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1498[0m:[0m13[0m:        pub([0m[1m[31mcrate[0m) fn [0m[1m[31mcrate[0m_method(&self) -> u16 { 0 }
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1511[0m:[0m7[0m:    S.[0m[1m[31mcrate[0m_method();
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1620[0m:[0m18[0m://- /main2018.rs [0m[1m[31mcrate[0m:main2018 deps:core edition:2018
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1633[0m:[0m18[0m://- /main2021.rs [0m[1m[31mcrate[0m:main2021 deps:core edition:2021
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1646[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1898[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:lib deps:core
[0m[35mcrates/hir-ty/src/tests/method_resolution.rs[0m:[0m[32m1907[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::tests::check_infer_with_mismatches;
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m12[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo cfg:test
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m31[0m:[0m13[0m://- /foo.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m95[0m:[0m21[0m:            let y = [0m[1m[31mcrate[0m::foo!(1,2);
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m106[0m:[0m23[0m:            231..247 '[0m[1m[31mcrate[0m:...!(1,2)': {unknown}
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m125[0m:[0m21[0m:            let x = [0m[1m[31mcrate[0m::foo!();
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m505[0m:[0m28[0m:fn infer_macro_with_dollar_[0m[1m[31mcrate[0m_is_correct_in_expr() {
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m508[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m514[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m517[0m:[0m15[0m:    (1) => { $[0m[1m[31mcrate[0m::bar!() };
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m518[0m:[0m19[0m:    (2) => { 1 + $[0m[1m[31mcrate[0m::baz() };
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m532[0m:[0m28[0m:fn infer_macro_with_dollar_[0m[1m[31mcrate[0m_is_correct_in_trait_associate_type() {
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m535[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m545[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m558[0m:[0m28[0m:            type Target = $[0m[1m[31mcrate[0m::MessageRef;
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m572[0m:[0m28[0m:fn infer_macro_with_dollar_[0m[1m[31mcrate[0m_in_def_site() {
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m575[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m588[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m591[0m:[0m20[0m:    () => { list!($[0m[1m[31mcrate[0m::m!()) };
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m610[0m:[0m17[0m:            pub([0m[1m[31mcrate[0m) use _foo as foo;
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m654[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m660[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1284[0m:[0m13[0m://- /lib.rs [0m[1m[31mcrate[0m:foo cfg:feature=foo
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1309[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1316[0m:[0m13[0m://- /mac.rs [0m[1m[31mcrate[0m:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1317[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1328[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1338[0m:[0m13[0m://- /mac.rs [0m[1m[31mcrate[0m:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1339[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1350[0m:[0m14[0m://- /main.rs [0m[1m[31mcrate[0m:main deps:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1359[0m:[0m13[0m://- /mac.rs [0m[1m[31mcrate[0m:mac
[0m[35mcrates/hir-ty/src/tests/macros.rs[0m:[0m[32m1360[0m:[0m4[0m:#![[0m[1m[31mcrate[0m_type="proc-macro"]
[0m[35mcrates/hir-ty/src/layout/tests/closure.rs[0m:[0m[32m1[0m:[0m5[0m:use [0m[1m[31mcrate[0m::size_and_align_expr;
[0m[35mcrates/rustc-dependencies/src/lib.rs[0m:[0m[32m1[0m:[0m37[0m://! A wrapper around rustc internal [0m[1m[31mcrate[0ms, which enables switching between compiler provided
[0m[35mcrates/rustc-dependencies/src/lib.rs[0m:[0m[32m2[0m:[0m39[0m://! ones and stable ones published in [0m[1m[31mcrate[0ms.io
[0m[35mcrates/rustc-dependencies/src/lib.rs[0m:[0m[32m7[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_lexer;
[0m[35mcrates/rustc-dependencies/src/lib.rs[0m:[0m[32m20[0m:[0m8[0m:extern [0m[1m[31mcrate[0m rustc_parse_format;
[0m[35mcrates/hir-ty/src/layout.rs[0m:[0m[32m15[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/layout.rs[0m:[0m[32m343[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ImplTraitId::ReturnTypeImplTrait(func, idx) => {
[0m[35mcrates/hir-ty/src/layout.rs[0m:[0m[32m347[0m:[0m17[0m:                [0m[1m[31mcrate[0m::ImplTraitId::AsyncBlockTypeImplTrait(_, _) => {
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m9[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m25[0m:[0m33[0m:        "{minicore}//- /main.rs [0m[1m[31mcrate[0m:test target_data_layout:{target_data_layout}\n{ra_fixture}",
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m74[0m:[0m33[0m:        "{minicore}//- /main.rs [0m[1m[31mcrate[0m:test target_data_layout:{target_data_layout}\nfn main(){{let goal = {{{ra_fixture}}};}}",
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m155[0m:[0m18[0m:                $[0m[1m[31mcrate[0m::layout::tests::check_size_and_align_expr(
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m169[0m:[0m18[0m:                $[0m[1m[31mcrate[0m::layout::tests::check_size_and_align_expr(
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m258[0m:[0m15[0m://- /b/mod.rs [0m[1m[31mcrate[0m:b
[0m[35mcrates/hir-ty/src/layout/tests.rs[0m:[0m[32m264[0m:[0m15[0m://- /a/mod.rs [0m[1m[31mcrate[0m:a deps:b
[0m[35mcrates/hir-ty/src/tests/regression.rs[0m:[0m[32m539[0m:[0m22[0m:fn issue_4465_dollar_[0m[1m[31mcrate[0m_at_type() {
[0m[35mcrates/hir-ty/src/tests/regression.rs[0m:[0m[32m548[0m:[0m25[0m:                let r: $[0m[1m[31mcrate[0m::Foo = anything();
[0m[35mcrates/hir-ty/src/diagnostics.rs[0m:[0m[32m7[0m:[0m9[0m:pub use [0m[1m[31mcrate[0m::diagnostics::{
[0m[35mcrates/hir-ty/src/tests/incremental.rs[0m:[0m[32m4[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{db::HirDatabase, test_db::TestDB};
[0m[35mcrates/hir-ty/src/tests/incremental.rs[0m:[0m[32m21[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = module.def_map(&db);
[0m[35mcrates/hir-ty/src/tests/incremental.rs[0m:[0m[32m22[0m:[0m32[0m:            visit_module(&db, &[0m[1m[31mcrate[0m_def_map, module.local_id, &mut |def| {
[0m[35mcrates/hir-ty/src/tests/incremental.rs[0m:[0m[32m42[0m:[0m17[0m:            let [0m[1m[31mcrate[0m_def_map = module.def_map(&db);
[0m[35mcrates/hir-ty/src/tests/incremental.rs[0m:[0m[32m43[0m:[0m32[0m:            visit_module(&db, &[0m[1m[31mcrate[0m_def_map, module.local_id, &mut |def| {
[0m[35mcrates/hir-ty/src/tests/simple.rs[0m:[0m[32m3078[0m:[0m27[0m://- /main.rs edition:2015 [0m[1m[31mcrate[0m:main deps:core
[0m[35mcrates/hir-ty/src/tests/simple.rs[0m:[0m[32m3084[0m:[0m14[0m://- /core.rs [0m[1m[31mcrate[0m:core
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m10[0m:[0m14[0m:use base_db::[0m[1m[31mCrate[0mId;
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m34[0m:[0m5[0m:use [0m[1m[31mcrate[0m::{
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m66[0m:[0m9[0m:    pub([0m[1m[31mcrate[0m) max_size: Option<usize>,
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m410[0m:[0m13[0m:            [0m[1m[31mcrate[0m::GenericArgData::Ty(ty) => ty.hir_fmt(f),
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m411[0m:[0m13[0m:            [0m[1m[31mcrate[0m::GenericArgData::Lifetime(lt) => lt.hir_fmt(f),
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m412[0m:[0m13[0m:            [0m[1m[31mcrate[0m::GenericArgData::Const(c) => c.hir_fmt(f),
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m452[0m:[0m15[0m:        *f.db.[0m[1m[31mcrate[0m_graph().[0m[1m[31mcrate[0ms_in_topological_order().last().unwrap(),
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1353[0m:[0m21[0m:    Sized { anchor: [0m[1m[31mCrate[0mId },
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1639[0m:[0m32[0m:                write!(f, "pub([0m[1m[31mcrate[0m) ")
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1788[0m:[0m27[0m:            (_, PathKind::[0m[1m[31mCrate[0m) => write!(f, "[0m[1m[31mcrate[0m")?,
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1798[0m:[0m33[0m:            (_, PathKind::Dollar[0m[1m[31mCrate[0m(id)) => {
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1799[0m:[0m30[0m:                // Resolve `$[0m[1m[31mcrate[0m` to the [0m[1m[31mcrate[0m's display name.
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1801[0m:[0m24[0m:                // the [0m[1m[31mcrate[0m invoking `HirDisplay`
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1802[0m:[0m21[0m:                let [0m[1m[31mcrate[0m_graph = f.db.[0m[1m[31mcrate[0m_graph();
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1803[0m:[0m28[0m:                let name = [0m[1m[31mcrate[0m_graph[*id]
[0m[35mcrates/hir-ty/src/display.rs[0m:[0m[32m1807[0m:[0m34[0m:                    .unwrap_or("$[0m[1m[31mcrate[0m");
